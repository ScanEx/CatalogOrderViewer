
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function (leaflet,moment$1) {
	'use strict';

	leaflet = leaflet && leaflet.hasOwnProperty('default') ? leaflet['default'] : leaflet;
	moment$1 = moment$1 && moment$1.hasOwnProperty('default') ? moment$1['default'] : moment$1;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _global = createCommonjsModule(function (module) {
	  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function _has(it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var _fails = function _fails(exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

	var _core = createCommonjsModule(function (module) {
	  var core = module.exports = { version: '2.6.9' };
	  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};

	var asyncToGenerator = function (fn) {
	  return function () {
	    var gen = fn.apply(this, arguments);
	    return new Promise(function (resolve, reject) {
	      function step(key, arg) {
	        try {
	          var info = gen[key](arg);
	          var value = info.value;
	        } catch (error) {
	          reject(error);
	          return;
	        }

	        if (info.done) {
	          resolve(value);
	        } else {
	          return Promise.resolve(value).then(function (value) {
	            step("next", value);
	          }, function (err) {
	            step("throw", err);
	          });
	        }
	      }

	      return step("next");
	    });
	  };
	};

	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	var defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	var get = function get(object, property, receiver) {
	  if (object === null) object = Function.prototype;
	  var desc = Object.getOwnPropertyDescriptor(object, property);

	  if (desc === undefined) {
	    var parent = Object.getPrototypeOf(object);

	    if (parent === null) {
	      return undefined;
	    } else {
	      return get(parent, property, receiver);
	    }
	  } else if ("value" in desc) {
	    return desc.value;
	  } else {
	    var getter = desc.get;

	    if (getter === undefined) {
	      return undefined;
	    }

	    return getter.call(receiver);
	  }
	};

	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	var set = function set(object, property, value, receiver) {
	  var desc = Object.getOwnPropertyDescriptor(object, property);

	  if (desc === undefined) {
	    var parent = Object.getPrototypeOf(object);

	    if (parent !== null) {
	      set(parent, property, value, receiver);
	    }
	  } else if ("value" in desc && desc.writable) {
	    desc.value = value;
	  } else {
	    var setter = desc.set;

	    if (setter !== undefined) {
	      setter.call(receiver, value);
	    }
	  }

	  return value;
	};

	var slicedToArray = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

	var toConsumableArray = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  } else {
	    return Array.from(arr);
	  }
	};

	var _isObject = function _isObject(it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function _anObject(it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var document$1 = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document$1) && _isObject(document$1.createElement);
	var _domCreate = function _domCreate(it) {
	  return is ? document$1.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function _toPrimitive(it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) {/* empty */}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
	  f: f
	};

	var _propertyDesc = function _propertyDesc(bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var id$1 = 0;
	var px = Math.random();
	var _uid = function _uid(key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px).toString(36));
	};

	var _library = false;

	var _shared = createCommonjsModule(function (module) {
	  var SHARED = '__core-js_shared__';
	  var store = _global[SHARED] || (_global[SHARED] = {});

	  (module.exports = function (key, value) {
	    return store[key] || (store[key] = value !== undefined ? value : {});
	  })('versions', []).push({
	    version: _core.version,
	    mode: 'global',
	    copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	  });
	});

	var _functionToString = _shared('native-function-to-string', Function.toString);

	var _redefine = createCommonjsModule(function (module) {
	  var SRC = _uid('src');

	  var TO_STRING = 'toString';
	  var TPL = ('' + _functionToString).split(TO_STRING);

	  _core.inspectSource = function (it) {
	    return _functionToString.call(it);
	  };

	  (module.exports = function (O, key, val, safe) {
	    var isFunction = typeof val == 'function';
	    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
	    if (O[key] === val) return;
	    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	    if (O === _global) {
	      O[key] = val;
	    } else if (!safe) {
	      delete O[key];
	      _hide(O, key, val);
	    } else if (O[key]) {
	      O[key] = val;
	    } else {
	      _hide(O, key, val);
	    }
	    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	  })(Function.prototype, TO_STRING, function toString() {
	    return typeof this == 'function' && this[SRC] || _functionToString.call(this);
	  });
	});

	var _aFunction = function _aFunction(it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function _ctx(fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function () /* ...args */{
	    return fn.apply(that, arguments);
	  };
	};

	var PROTOTYPE = 'prototype';

	var $export = function $export(type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // extend global
	    if (target) _redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) _hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	_global.core = _core;
	// type bitmap
	$export.F = 1; // forced
	$export.G = 2; // global
	$export.S = 4; // static
	$export.P = 8; // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	$export.U = 64; // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	var _meta = createCommonjsModule(function (module) {
	  var META = _uid('meta');

	  var setDesc = _objectDp.f;
	  var id = 0;
	  var isExtensible = Object.isExtensible || function () {
	    return true;
	  };
	  var FREEZE = !_fails(function () {
	    return isExtensible(Object.preventExtensions({}));
	  });
	  var setMeta = function setMeta(it) {
	    setDesc(it, META, { value: {
	        i: 'O' + ++id, // object ID
	        w: {} // weak collections IDs
	      } });
	  };
	  var fastKey = function fastKey(it, create) {
	    // return primitive with prefix
	    if (!_isObject(it)) return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	    if (!_has(it, META)) {
	      // can't set metadata to uncaught frozen object
	      if (!isExtensible(it)) return 'F';
	      // not necessary to add metadata
	      if (!create) return 'E';
	      // add missing metadata
	      setMeta(it);
	      // return object ID
	    }return it[META].i;
	  };
	  var getWeak = function getWeak(it, create) {
	    if (!_has(it, META)) {
	      // can't set metadata to uncaught frozen object
	      if (!isExtensible(it)) return true;
	      // not necessary to add metadata
	      if (!create) return false;
	      // add missing metadata
	      setMeta(it);
	      // return hash weak collections IDs
	    }return it[META].w;
	  };
	  // add metadata on freeze-family methods calling
	  var onFreeze = function onFreeze(it) {
	    if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
	    return it;
	  };
	  var meta = module.exports = {
	    KEY: META,
	    NEED: false,
	    fastKey: fastKey,
	    getWeak: getWeak,
	    onFreeze: onFreeze
	  };
	});
	var _meta_1 = _meta.KEY;
	var _meta_2 = _meta.NEED;
	var _meta_3 = _meta.fastKey;
	var _meta_4 = _meta.getWeak;
	var _meta_5 = _meta.onFreeze;

	var _wks = createCommonjsModule(function (module) {
	  var store = _shared('wks');

	  var _Symbol = _global.Symbol;
	  var USE_SYMBOL = typeof _Symbol == 'function';

	  var $exports = module.exports = function (name) {
	    return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : _uid)('Symbol.' + name));
	  };

	  $exports.store = store;
	});

	var def = _objectDp.f;

	var TAG = _wks('toStringTag');

	var _setToStringTag = function _setToStringTag(it, tag, stat) {
	  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var f$1 = _wks;

	var _wksExt = {
		f: f$1
	};

	var defineProperty$1 = _objectDp.f;
	var _wksDefine = function _wksDefine(name) {
	  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$1($Symbol, name, { value: _wksExt.f(name) });
	};

	var toString = {}.toString;

	var _cof = function _cof(it) {
	  return toString.call(it).slice(8, -1);
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function _defined(it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function _toIobject(it) {
	  return _iobject(_defined(it));
	};

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function _toInteger(it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function _toLength(it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	// false -> Array#indexOf
	// true  -> Array#includes


	var _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	      // Array#indexOf ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if (IS_INCLUDES || index in O) {
	        if (O[index] === el) return IS_INCLUDES || index || 0;
	      }
	    }return !IS_INCLUDES && -1;
	  };
	};

	var shared = _shared('keys');

	var _sharedKey = function _sharedKey(key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	var arrayIndexOf = _arrayIncludes(false);
	var IE_PROTO = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function _objectKeysInternal(object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) {
	    if (key != IE_PROTO) _has(O, key) && result.push(key);
	  } // Don't enum bug & hidden keys
	  while (names.length > i) {
	    if (_has(O, key = names[i++])) {
	      ~arrayIndexOf(result, key) || result.push(key);
	    }
	  }return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)


	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var f$2 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$2
	};

	var f$3 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$3
	};

	// all enumerable object keys, includes symbols


	var _enumKeys = function _enumKeys(it) {
	  var result = _objectKeys(it);
	  var getSymbols = _objectGops.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = _objectPie.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) {
	      if (isEnum.call(it, key = symbols[i++])) result.push(key);
	    }
	  }return result;
	};

	// 7.2.2 IsArray(argument)

	var _isArray = Array.isArray || function isArray(arg) {
	  return _cof(arg) == 'Array';
	};

	// 7.1.13 ToObject(argument)

	var _toObject = function _toObject(it) {
	  return Object(_defined(it));
	};

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) {
	    _objectDp.f(O, P = keys[i++], Properties[P]);
	  }return O;
	};

	var document$2 = _global.document;
	var _html = document$2 && document$2.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


	var IE_PROTO$1 = _sharedKey('IE_PROTO');
	var Empty = function Empty() {/* empty */};
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var _createDict = function createDict() {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  _createDict = iframeDocument.F;
	  while (i--) {
	    delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  }return _createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = _createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
	  f: f$4
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

	var gOPN = _objectGopn.f;
	var toString$1 = {}.toString;

	var windowNames = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function getWindowNames(it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
	};

	var _objectGopnExt = {
	  f: f$5
	};

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) {/* empty */}
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
	  f: f$6
	};

	// ECMAScript 6 symbols shim


	var META = _meta.KEY;

	var gOPD$1 = _objectGopd.f;
	var dP$1 = _objectDp.f;
	var gOPN$1 = _objectGopnExt.f;
	var $Symbol = _global.Symbol;
	var $JSON = _global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE$2 = 'prototype';
	var HIDDEN = _wks('_hidden');
	var TO_PRIMITIVE = _wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = _shared('symbol-registry');
	var AllSymbols = _shared('symbols');
	var OPSymbols = _shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE$2];
	var USE_NATIVE = typeof $Symbol == 'function' && !!_objectGops.f;
	var QObject = _global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = _descriptors && _fails(function () {
	  return _objectCreate(dP$1({}, 'a', {
	    get: function get$$1() {
	      return dP$1(this, 'a', { value: 7 }).a;
	    }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD$1(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP$1(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);
	} : dP$1;

	var wrap = function wrap(tag) {
	  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty$$1(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  _anObject(it);
	  key = _toPrimitive(key, true);
	  _anObject(D);
	  if (_has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
	    }return setSymbolDesc(it, key, D);
	  }return dP$1(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  _anObject(it);
	  var keys = _enumKeys(P = _toIobject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) {
	    $defineProperty(it, key = keys[i++], P[key]);
	  }return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = _toPrimitive(key, true));
	  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
	  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = _toIobject(it);
	  key = _toPrimitive(key, true);
	  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
	  var D = gOPD$1(it, key);
	  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN$1(_toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  }return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  }return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function _Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function $set(value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, _propertyDesc(1, value));
	    };
	    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
	    return this._k;
	  });

	  _objectGopd.f = $getOwnPropertyDescriptor;
	  _objectDp.f = $defineProperty;
	  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
	  _objectPie.f = $propertyIsEnumerable;
	  _objectGops.f = $getOwnPropertySymbols;

	  if (_descriptors && !_library) {
	    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  _wksExt.f = function (name) {
	    return wrap(_wks(name));
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols =
	// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
	  _wks(es6Symbols[j++]);
	}for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {
	  _wksDefine(wellKnownSymbols[k++]);
	}_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function _for(key) {
	    return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) {
	      if (SymbolRegistry[key] === sym) return key;
	    }
	  },
	  useSetter: function useSetter() {
	    setter = true;
	  },
	  useSimple: function useSimple() {
	    setter = false;
	  }
	});

	_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	var FAILS_ON_PRIMITIVES = _fails(function () {
	  _objectGops.f(1);
	});

	_export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return _objectGops.f(_toObject(it));
	  }
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) {
	      args.push(arguments[i++]);
	    }$replacer = replacer = args[1];
	    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!_isArray(replacer)) replacer = function replacer(key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	_setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	_setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	_setToStringTag(_global.JSON, 'JSON', true);

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	_export(_export.S, 'Object', { create: _objectCreate });

	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperties: _objectDps });

	// most Object methods by ES6 should accept primitives


	var _objectSap = function _objectSap(KEY, exec) {
	  var fn = (_core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  _export(_export.S + _export.F * _fails(function () {
	    fn(1);
	  }), 'Object', exp);
	};

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

	var $getOwnPropertyDescriptor$1 = _objectGopd.f;

	_objectSap('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor$1(_toIobject(it), key);
	  };
	});

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO$2 = _sharedKey('IE_PROTO');
	var ObjectProto$1 = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = _toObject(O);
	  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }return O instanceof Object ? ObjectProto$1 : null;
	};

	// 19.1.2.9 Object.getPrototypeOf(O)


	_objectSap('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return _objectGpo(_toObject(it));
	  };
	});

	// 19.1.2.14 Object.keys(O)


	_objectSap('keys', function () {
	  return function keys(it) {
	    return _objectKeys(_toObject(it));
	  };
	});

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	_objectSap('getOwnPropertyNames', function () {
	  return _objectGopnExt.f;
	});

	// 19.1.2.5 Object.freeze(O)

	var meta = _meta.onFreeze;

	_objectSap('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && _isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

	// 19.1.2.17 Object.seal(O)

	var meta$1 = _meta.onFreeze;

	_objectSap('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && _isObject(it) ? $seal(meta$1(it)) : it;
	  };
	});

	// 19.1.2.15 Object.preventExtensions(O)

	var meta$2 = _meta.onFreeze;

	_objectSap('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && _isObject(it) ? $preventExtensions(meta$2(it)) : it;
	  };
	});

	// 19.1.2.12 Object.isFrozen(O)


	_objectSap('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return _isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

	// 19.1.2.13 Object.isSealed(O)


	_objectSap('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return _isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

	// 19.1.2.11 Object.isExtensible(O)


	_objectSap('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return _isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

	// 19.1.2.1 Object.assign(target, source, ...)


	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || _fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) {
	    B[k] = k;
	  });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) {
	  // eslint-disable-line no-unused-vars
	  var T = _toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = _objectGops.f;
	  var isEnum = _objectPie.f;
	  while (aLen > index) {
	    var S = _iobject(arguments[index++]);
	    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];
	    }
	  }return T;
	} : $assign;

	// 19.1.3.1 Object.assign(target, source)


	_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

	// 7.2.9 SameValue(x, y)
	var _sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// 19.1.3.10 Object.is(value1, value2)

	_export(_export.S, 'Object', { is: _sameValue });

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */

	var check = function check(O, proto) {
	  _anObject(O);
	  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	var _setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	  function (test, buggy, set) {
	    try {
	      set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
	      set(test, []);
	      buggy = !(test instanceof Array);
	    } catch (e) {
	      buggy = true;
	    }
	    return function setPrototypeOf(O, proto) {
	      check(O, proto);
	      if (buggy) O.__proto__ = proto;else set(O, proto);
	      return O;
	    };
	  }({}, false) : undefined),
	  check: check
	};

	// 19.1.3.19 Object.setPrototypeOf(O, proto)

	_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = _wks('toStringTag');
	// ES3 wrong here
	var ARG = _cof(function () {
	  return arguments;
	}()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function tryGet(it, key) {
	  try {
	    return it[key];
	  } catch (e) {/* empty */}
	};

	var _classof = function _classof(it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	  // @@toStringTag case
	  : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	  // builtinTag case
	  : ARG ? _cof(O)
	  // ES3 arguments fallback
	  : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	// 19.1.3.6 Object.prototype.toString()

	var test = {};
	test[_wks('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  _redefine(Object.prototype, 'toString', function toString() {
	    return '[object ' + _classof(this) + ']';
	  }, true);
	}

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	var _invoke = function _invoke(fn, args, that) {
	                  var un = that === undefined;
	                  switch (args.length) {
	                                    case 0:
	                                                      return un ? fn() : fn.call(that);
	                                    case 1:
	                                                      return un ? fn(args[0]) : fn.call(that, args[0]);
	                                    case 2:
	                                                      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
	                                    case 3:
	                                                      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
	                                    case 4:
	                                                      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
	                  }return fn.apply(that, args);
	};

	var arraySlice = [].slice;
	var factories = {};

	var construct = function construct(F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) {
	      n[i] = 'a[' + i + ']';
	    } // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  }return factories[len](F, args);
	};

	var _bind = Function.bind || function bind(that /* , ...args */) {
	  var fn = _aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function bound() /* args... */{
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : _invoke(fn, args, that);
	  };
	  if (_isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)


	_export(_export.P, 'Function', { bind: _bind });

	var dP$2 = _objectDp.f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// 19.2.4.2 name
	NAME in FProto || _descriptors && dP$2(FProto, NAME, {
	  configurable: true,
	  get: function get() {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});

	var HAS_INSTANCE = _wks('hasInstance');
	var FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if (!(HAS_INSTANCE in FunctionProto)) _objectDp.f(FunctionProto, HAS_INSTANCE, { value: function value(O) {
	    if (typeof this != 'function' || !_isObject(O)) return false;
	    if (!_isObject(this.prototype)) return O instanceof this;
	    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	    while (O = _objectGpo(O)) {
	      if (this.prototype === O) return true;
	    }return false;
	  } });

	var _stringWs = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var space = '[' + _stringWs + ']';
	var non = '\u200B\x85';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');

	var exporter = function exporter(KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = _fails(function () {
	    return !!_stringWs[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  _export(_export.P + _export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(_defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};

	var _stringTrim = exporter;

	var $parseInt = _global.parseInt;
	var $trim = _stringTrim.trim;

	var hex = /^[-+]?0[xX]/;

	var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim(String(str), 3);
	  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
	} : $parseInt;

	// 18.2.5 parseInt(string, radix)
	_export(_export.G + _export.F * (parseInt != _parseInt), { parseInt: _parseInt });

	var $parseFloat = _global.parseFloat;
	var $trim$1 = _stringTrim.trim;

	var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim$1(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

	// 18.2.4 parseFloat(string)
	_export(_export.G + _export.F * (parseFloat != _parseFloat), { parseFloat: _parseFloat });

	var setPrototypeOf = _setProto.set;
	var _inheritIfRequired = function _inheritIfRequired(that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  }return that;
	};

	var gOPN$2 = _objectGopn.f;
	var gOPD$2 = _objectGopd.f;
	var dP$3 = _objectDp.f;
	var $trim$2 = _stringTrim.trim;
	var NUMBER = 'Number';
	var $Number = _global[NUMBER];
	var Base = $Number;
	var proto = $Number.prototype;
	// Opera ~12 has broken Object#toString
	var BROKEN_COF = _cof(_objectCreate(proto)) == NUMBER;
	var TRIM = 'trim' in String.prototype;

	// 7.1.3 ToNumber(argument)
	var toNumber = function toNumber(argument) {
	  var it = _toPrimitive(argument, false);
	  if (typeof it == 'string' && it.length > 2) {
	    it = TRIM ? it.trim() : $trim$2(it, 3);
	    var first = it.charCodeAt(0);
	    var third, radix, maxCode;
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66:case 98:
	          radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
	        case 79:case 111:
	          radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
	        default:
	          return +it;
	      }
	      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      }return parseInt(digits, radix);
	    }
	  }return +it;
	};

	if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
	  $Number = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var that = this;
	    return that instanceof $Number
	    // check on 1..constructor(foo) case
	    && (BROKEN_COF ? _fails(function () {
	      proto.valueOf.call(that);
	    }) : _cof(that) != NUMBER) ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for (var keys = _descriptors ? gOPN$2(Base) : (
	  // ES3:
	  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	  // ES6 (in case, if modules with ES6 Number statics required before):
	  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j$1 = 0, key; keys.length > j$1; j$1++) {
	    if (_has(Base, key = keys[j$1]) && !_has($Number, key)) {
	      dP$3($Number, key, gOPD$2(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  _redefine(_global, NUMBER, $Number);
	}

	var _aNumberValue = function _aNumberValue(it, msg) {
	  if (typeof it != 'number' && _cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};

	var _stringRepeat = function repeat(count) {
	  var str = String(_defined(this));
	  var res = '';
	  var n = _toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (; n > 0; (n >>>= 1) && (str += str)) {
	    if (n & 1) res += str;
	  }return res;
	};

	var $toFixed = 1.0.toFixed;
	var floor$1 = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';

	var multiply = function multiply(n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor$1(c2 / 1e7);
	  }
	};
	var divide = function divide(n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor$1(c / n);
	    c = c % n * 1e7;
	  }
	};
	var numToString = function numToString() {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + _stringRepeat.call(ZERO, 7 - t.length) + t;
	    }
	  }return s;
	};
	var pow = function pow(x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function log(x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  }return n;
	};

	_export(_export.P + _export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !_fails(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = _aNumberValue(this, ERROR);
	    var f = _toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + _stringRepeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + _stringRepeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    }return m;
	  }
	});

	var $toPrecision = 1.0.toPrecision;

	_export(_export.P + _export.F * (_fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !_fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = _aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});

	// 20.1.2.1 Number.EPSILON


	_export(_export.S, 'Number', { EPSILON: Math.pow(2, -52) });

	// 20.1.2.2 Number.isFinite(number)

	var _isFinite = _global.isFinite;

	_export(_export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

	// 20.1.2.3 Number.isInteger(number)

	var floor$2 = Math.floor;
	var _isInteger = function isInteger(it) {
	  return !_isObject(it) && isFinite(it) && floor$2(it) === it;
	};

	// 20.1.2.3 Number.isInteger(number)


	_export(_export.S, 'Number', { isInteger: _isInteger });

	// 20.1.2.4 Number.isNaN(number)


	_export(_export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	// 20.1.2.5 Number.isSafeInteger(number)


	var abs = Math.abs;

	_export(_export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return _isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

	// 20.1.2.6 Number.MAX_SAFE_INTEGER


	_export(_export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

	// 20.1.2.10 Number.MIN_SAFE_INTEGER


	_export(_export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

	// 20.1.2.12 Number.parseFloat(string)
	_export(_export.S + _export.F * (Number.parseFloat != _parseFloat), 'Number', { parseFloat: _parseFloat });

	// 20.1.2.13 Number.parseInt(string, radix)
	_export(_export.S + _export.F * (Number.parseInt != _parseInt), 'Number', { parseInt: _parseInt });

	// 20.2.2.20 Math.log1p(x)
	var _mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

	// 20.2.2.3 Math.acosh(x)


	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;

	_export(_export.S + _export.F * !($acosh
	// V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	&& Math.floor($acosh(Number.MAX_VALUE)) == 710
	// Tor Browser bug: Math.acosh(Infinity) -> NaN
	&& $acosh(Infinity) == Infinity), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

	// 20.2.2.5 Math.asinh(x)

	var $asinh = Math.asinh;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	// Tor Browser bug: Math.asinh(0) -> -0
	_export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

	// 20.2.2.7 Math.atanh(x)

	var $atanh = Math.atanh;

	// Tor Browser bug: Math.atanh(-0) -> 0
	_export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

	// 20.2.2.28 Math.sign(x)
	var _mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	// 20.2.2.9 Math.cbrt(x)


	_export(_export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

	// 20.2.2.11 Math.clz32(x)


	_export(_export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

	// 20.2.2.12 Math.cosh(x)

	var exp = Math.exp;

	_export(_export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	var _mathExpm1 = !$expm1
	// Old FF bug
	|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	// Tor Browser bug
	|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

	// 20.2.2.14 Math.expm1(x)


	_export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', { expm1: _mathExpm1 });

	// 20.2.2.16 Math.fround(x)

	var pow$1 = Math.pow;
	var EPSILON = pow$1(2, -52);
	var EPSILON32 = pow$1(2, -23);
	var MAX32 = pow$1(2, 127) * (2 - EPSILON32);
	var MIN32 = pow$1(2, -126);

	var roundTiesToEven = function roundTiesToEven(n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	var _mathFround = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = _mathSign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	// 20.2.2.16 Math.fround(x)


	_export(_export.S, 'Math', { fround: _mathFround });

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

	var abs$1 = Math.abs;

	_export(_export.S, 'Math', {
	  hypot: function hypot(value1, value2) {
	    // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs$1(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

	// 20.2.2.18 Math.imul(x, y)

	var $imul = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	_export(_export.S + _export.F * _fails(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	// 20.2.2.21 Math.log10(x)


	_export(_export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});

	// 20.2.2.20 Math.log1p(x)


	_export(_export.S, 'Math', { log1p: _mathLog1p });

	// 20.2.2.22 Math.log2(x)


	_export(_export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});

	// 20.2.2.28 Math.sign(x)


	_export(_export.S, 'Math', { sign: _mathSign });

	// 20.2.2.30 Math.sinh(x)


	var exp$1 = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	_export(_export.S + _export.F * _fails(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1 ? (_mathExpm1(x) - _mathExpm1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);
	  }
	});

	// 20.2.2.33 Math.tanh(x)


	var exp$2 = Math.exp;

	_export(_export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = _mathExpm1(x = +x);
	    var b = _mathExpm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
	  }
	});

	// 20.2.2.34 Math.trunc(x)


	_export(_export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) {
	    // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
	    }return res.join('');
	  }
	});

	_export(_export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = _toIobject(callSite.raw);
	    var len = _toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    }return res.join('');
	  }
	});

	// 21.1.3.25 String.prototype.trim()
	_stringTrim('trim', function ($trim) {
	  return function trim() {
	    return $trim(this, 3);
	  };
	});

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function _stringAt(TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _iterators = {};

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	_hide(IteratorPrototype, _wks('iterator'), function () {
	  return this;
	});

	var _iterCreate = function _iterCreate(Constructor, NAME, next) {
	  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
	  _setToStringTag(Constructor, NAME + ' Iterator');
	};

	var ITERATOR = _wks('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function returnThis() {
	  return this;
	};

	var _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  _iterCreate(Constructor, NAME, next);
	  var getMethod = function getMethod(kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return new Constructor(this, kind);
	        };
	      case VALUES:
	        return function values() {
	          return new Constructor(this, kind);
	        };
	    }return function entries() {
	      return new Constructor(this, kind);
	    };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      _setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() {
	      return $native.call(this);
	    };
	  }
	  // Define iterator
	  if (BUGGY || VALUES_BUG || !proto[ITERATOR]) {
	    _hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  _iterators[NAME] = $default;
	  _iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) _redefine(proto, key, methods[key]);
	    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var $at = _stringAt(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	_iterDefine(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0; // next index
	  // 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	var $at$1 = _stringAt(false);
	_export(_export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at$1(this, pos);
	  }
	});

	// 7.2.8 IsRegExp(argument)


	var MATCH = _wks('match');
	var _isRegexp = function _isRegexp(it) {
	  var isRegExp;
	  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
	};

	// helper for String#{startsWith, endsWith, includes}


	var _stringContext = function _stringContext(that, searchString, NAME) {
	  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(_defined(that));
	};

	var MATCH$1 = _wks('match');
	var _failsIsRegexp = function _failsIsRegexp(KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH$1] = false;
	      return !'/./'[KEY](re);
	    } catch (f) {/* empty */}
	  }return true;
	};

	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];

	_export(_export.P + _export.F * _failsIsRegexp(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = _stringContext(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = _toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(_toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
	  }
	});

	var INCLUDES = 'includes';

	_export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~_stringContext(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	_export(_export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: _stringRepeat
	});

	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];

	_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = _stringContext(this, searchString, STARTS_WITH);
	    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
	  }
	});

	var quot = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function createHTML(string, tag, attribute, value) {
	  var S = String(_defined(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	var _stringHtml = function _stringHtml(NAME, exec) {
	  var O = {};
	  O[NAME] = exec(createHTML);
	  _export(_export.P + _export.F * _fails(function () {
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

	// B.2.3.2 String.prototype.anchor(name)
	_stringHtml('anchor', function (createHTML) {
	  return function anchor(name) {
	    return createHTML(this, 'a', 'name', name);
	  };
	});

	// B.2.3.3 String.prototype.big()
	_stringHtml('big', function (createHTML) {
	  return function big() {
	    return createHTML(this, 'big', '', '');
	  };
	});

	// B.2.3.4 String.prototype.blink()
	_stringHtml('blink', function (createHTML) {
	  return function blink() {
	    return createHTML(this, 'blink', '', '');
	  };
	});

	// B.2.3.5 String.prototype.bold()
	_stringHtml('bold', function (createHTML) {
	  return function bold() {
	    return createHTML(this, 'b', '', '');
	  };
	});

	// B.2.3.6 String.prototype.fixed()
	_stringHtml('fixed', function (createHTML) {
	  return function fixed() {
	    return createHTML(this, 'tt', '', '');
	  };
	});

	// B.2.3.7 String.prototype.fontcolor(color)
	_stringHtml('fontcolor', function (createHTML) {
	  return function fontcolor(color) {
	    return createHTML(this, 'font', 'color', color);
	  };
	});

	// B.2.3.8 String.prototype.fontsize(size)
	_stringHtml('fontsize', function (createHTML) {
	  return function fontsize(size) {
	    return createHTML(this, 'font', 'size', size);
	  };
	});

	// B.2.3.9 String.prototype.italics()
	_stringHtml('italics', function (createHTML) {
	  return function italics() {
	    return createHTML(this, 'i', '', '');
	  };
	});

	// B.2.3.10 String.prototype.link(url)
	_stringHtml('link', function (createHTML) {
	  return function link(url) {
	    return createHTML(this, 'a', 'href', url);
	  };
	});

	// B.2.3.11 String.prototype.small()
	_stringHtml('small', function (createHTML) {
	  return function small() {
	    return createHTML(this, 'small', '', '');
	  };
	});

	// B.2.3.12 String.prototype.strike()
	_stringHtml('strike', function (createHTML) {
	  return function strike() {
	    return createHTML(this, 'strike', '', '');
	  };
	});

	// B.2.3.13 String.prototype.sub()
	_stringHtml('sub', function (createHTML) {
	  return function sub() {
	    return createHTML(this, 'sub', '', '');
	  };
	});

	// B.2.3.14 String.prototype.sup()
	_stringHtml('sup', function (createHTML) {
	  return function sup() {
	    return createHTML(this, 'sup', '', '');
	  };
	});

	// 20.3.3.1 / 15.9.4.4 Date.now()


	_export(_export.S, 'Date', { now: function now() {
	    return new Date().getTime();
	  } });

	_export(_export.P + _export.F * _fails(function () {
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function toISOString() {
	      return 1;
	    } }) !== 1;
	}), 'Date', {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = _toObject(this);
	    var pv = _toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

	var getTime = Date.prototype.getTime;
	var $toISOString = Date.prototype.toISOString;

	var lz = function lz(num) {
	  return num > 9 ? num : '0' + num;
	};

	// PhantomJS / old WebKit has a broken implementations
	var _dateToIsoString = _fails(function () {
	  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !_fails(function () {
	  $toISOString.call(new Date(NaN));
	}) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var d = this;
	  var y = d.getUTCFullYear();
	  var m = d.getUTCMilliseconds();
	  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	} : $toISOString;

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()


	// PhantomJS / old WebKit has a broken implementations
	_export(_export.P + _export.F * (Date.prototype.toISOString !== _dateToIsoString), 'Date', {
	  toISOString: _dateToIsoString
	});

	var DateProto = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING = 'toString';
	var $toString = DateProto[TO_STRING];
	var getTime$1 = DateProto.getTime;
	if (new Date(NaN) + '' != INVALID_DATE) {
	  _redefine(DateProto, TO_STRING, function toString() {
	    var value = getTime$1.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

	var NUMBER$1 = 'number';

	var _dateToPrimitive = function _dateToPrimitive(hint) {
	  if (hint !== 'string' && hint !== NUMBER$1 && hint !== 'default') throw TypeError('Incorrect hint');
	  return _toPrimitive(_anObject(this), hint != NUMBER$1);
	};

	var TO_PRIMITIVE$1 = _wks('toPrimitive');
	var proto$1 = Date.prototype;

	if (!(TO_PRIMITIVE$1 in proto$1)) _hide(proto$1, TO_PRIMITIVE$1, _dateToPrimitive);

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)


	_export(_export.S, 'Array', { isArray: _isArray });

	// call something on iterator step with safe closing on error

	var _iterCall = function _iterCall(iterator, fn, value, entries) {
	  try {
	    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
	    // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) _anObject(ret.call(iterator));
	    throw e;
	  }
	};

	// check on default Array iterator

	var ITERATOR$1 = _wks('iterator');
	var ArrayProto = Array.prototype;

	var _isArrayIter = function _isArrayIter(it) {
	  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
	};

	var _createProperty = function _createProperty(object, index, value) {
	  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));else object[index] = value;
	};

	var ITERATOR$2 = _wks('iterator');

	var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || _iterators[_classof(it)];
	};

	var ITERATOR$3 = _wks('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR$3]();
	  riter['return'] = function () {
	    SAFE_CLOSING = true;
	  };
	} catch (e) {/* empty */}

	var _iterDetect = function _iterDetect(exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR$3]();
	    iter.next = function () {
	      return { done: safe = true };
	    };
	    arr[ITERATOR$3] = function () {
	      return iter;
	    };
	    exec(arr);
	  } catch (e) {/* empty */}
	  return safe;
	};

	_export(_export.S + _export.F * !_iterDetect(function (iter) {
	}), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = _toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = core_getIteratorMethod(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = _toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

	// WebKit Array.of isn't generic
	_export(_export.S + _export.F * _fails(function () {
	  function F() {/* empty */}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of() /* ...args */{
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) {
	      _createProperty(result, index, arguments[index++]);
	    }result.length = aLen;
	    return result;
	  }
	});

	var _strictMethod = function _strictMethod(method, arg) {
	  return !!method && _fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () {/* empty */}, 1) : method.call(null);
	  });
	};

	// 22.1.3.13 Array.prototype.join(separator)


	var arrayJoin = [].join;

	// fallback for not array-like strings
	_export(_export.P + _export.F * (_iobject != Object || !_strictMethod(arrayJoin)), 'Array', {
	  join: function join(separator) {
	    return arrayJoin.call(_toIobject(this), separator === undefined ? ',' : separator);
	  }
	});

	var arraySlice$1 = [].slice;

	// fallback for not array-like ES3 strings and DOM objects
	_export(_export.P + _export.F * _fails(function () {
	  if (_html) arraySlice$1.call(_html);
	}), 'Array', {
	  slice: function slice(begin, end) {
	    var len = _toLength(this.length);
	    var klass = _cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return arraySlice$1.call(this, begin, end);
	    var start = _toAbsoluteIndex(begin, len);
	    var upTo = _toAbsoluteIndex(end, len);
	    var size = _toLength(upTo - start);
	    var cloned = new Array(size);
	    var i = 0;
	    for (; i < size; i++) {
	      cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
	    }return cloned;
	  }
	});

	var $sort = [].sort;
	var test$1 = [1, 2, 3];

	_export(_export.P + _export.F * (_fails(function () {
	  // IE8-
	  test$1.sort(undefined);
	}) || !_fails(function () {
	  // V8 bug
	  test$1.sort(null);
	  // Old WebKit
	}) || !_strictMethod($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn) {
	    return comparefn === undefined ? $sort.call(_toObject(this)) : $sort.call(_toObject(this), _aFunction(comparefn));
	  }
	});

	var SPECIES = _wks('species');

	var _arraySpeciesConstructor = function _arraySpeciesConstructor(original) {
	  var C;
	  if (_isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
	    if (_isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  }return C === undefined ? Array : C;
	};

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)


	var _arraySpeciesCreate = function _arraySpeciesCreate(original, length) {
	  return new (_arraySpeciesConstructor(original))(length);
	};

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex


	var _arrayMethods = function _arrayMethods(TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || _arraySpeciesCreate;
	  return function ($this, callbackfn, that) {
	    var O = _toObject($this);
	    var self = _iobject(O);
	    var f = _ctx(callbackfn, that, 3);
	    var length = _toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (; length > index; index++) {
	      if (NO_HOLES || index in self) {
	        val = self[index];
	        res = f(val, index, O);
	        if (TYPE) {
	          if (IS_MAP) result[index] = res; // map
	          else if (res) switch (TYPE) {
	              case 3:
	                return true; // some
	              case 5:
	                return val; // find
	              case 6:
	                return index; // findIndex
	              case 2:
	                result.push(val); // filter
	            } else if (IS_EVERY) return false; // every
	        }
	      }
	    }return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

	var $forEach = _arrayMethods(0);
	var STRICT = _strictMethod([].forEach, true);

	_export(_export.P + _export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

	var $map = _arrayMethods(1);

	_export(_export.P + _export.F * !_strictMethod([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

	var $filter = _arrayMethods(2);

	_export(_export.P + _export.F * !_strictMethod([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

	var $some = _arrayMethods(3);

	_export(_export.P + _export.F * !_strictMethod([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

	var $every = _arrayMethods(4);

	_export(_export.P + _export.F * !_strictMethod([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

	var _arrayReduce = function _arrayReduce(that, callbackfn, aLen, memo, isRight) {
	  _aFunction(callbackfn);
	  var O = _toObject(that);
	  var self = _iobject(O);
	  var length = _toLength(O.length);
	  var index = isRight ? length - 1 : 0;
	  var i = isRight ? -1 : 1;
	  if (aLen < 2) for (;;) {
	    if (index in self) {
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if (isRight ? index < 0 : length <= index) {
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for (; isRight ? index >= 0 : length > index; index += i) {
	    if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	  }return memo;
	};

	_export(_export.P + _export.F * !_strictMethod([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

	_export(_export.P + _export.F * !_strictMethod([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

	var $indexOf = _arrayIncludes(false);
	var $native = [].indexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

	_export(_export.P + _export.F * (NEGATIVE_ZERO || !_strictMethod($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	    // convert -0 to +0
	    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
	  }
	});

	var $native$1 = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!$native$1 && 1 / [1].lastIndexOf(1, -0) < 0;

	_export(_export.P + _export.F * (NEGATIVE_ZERO$1 || !_strictMethod($native$1)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	    // convert -0 to +0
	    if (NEGATIVE_ZERO$1) return $native$1.apply(this, arguments) || 0;
	    var O = _toIobject(this);
	    var length = _toLength(O.length);
	    var index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, _toInteger(arguments[1]));
	    if (index < 0) index = length + index;
	    for (; index >= 0; index--) {
	      if (index in O) if (O[index] === searchElement) return index || 0;
	    }return -1;
	  }
	});

	var _arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = _toObject(this);
	  var len = _toLength(O.length);
	  var to = _toAbsoluteIndex(target, len);
	  var from = _toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : _toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];else delete O[to];
	    to += inc;
	    from += inc;
	  }return O;
	};

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = _wks('unscopables');
	var ArrayProto$1 = Array.prototype;
	if (ArrayProto$1[UNSCOPABLES] == undefined) _hide(ArrayProto$1, UNSCOPABLES, {});
	var _addToUnscopables = function _addToUnscopables(key) {
	  ArrayProto$1[UNSCOPABLES][key] = true;
	};

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


	_export(_export.P, 'Array', { copyWithin: _arrayCopyWithin });

	_addToUnscopables('copyWithin');

	var _arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = _toObject(this);
	  var length = _toLength(O.length);
	  var aLen = arguments.length;
	  var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);
	  while (endPos > index) {
	    O[index++] = value;
	  }return O;
	};

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


	_export(_export.P, 'Array', { fill: _arrayFill });

	_addToUnscopables('fill');

	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

	var $find = _arrayMethods(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () {
	  forced = false;
	});
	_export(_export.P + _export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY);

	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

	var $find$1 = _arrayMethods(6);
	var KEY$1 = 'findIndex';
	var forced$1 = true;
	// Shouldn't skip holes
	if (KEY$1 in []) Array(1)[KEY$1](function () {
	  forced$1 = false;
	});
	_export(_export.P + _export.F * forced$1, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY$1);

	var SPECIES$1 = _wks('species');

	var _setSpecies = function _setSpecies(KEY) {
	  var C = _global[KEY];
	  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
	    configurable: true,
	    get: function get() {
	      return this;
	    }
	  });
	};

	_setSpecies('Array');

	var _iterStep = function _iterStep(done, value) {
	  return { value: value, done: !!done };
	};

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
	  this._t = _toIobject(iterated); // target
	  this._i = 0; // next index
	  this._k = kind; // kind
	  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return _iterStep(1);
	  }
	  if (kind == 'keys') return _iterStep(0, index);
	  if (kind == 'values') return _iterStep(0, O[index]);
	  return _iterStep(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	_iterators.Arguments = _iterators.Array;

	_addToUnscopables('keys');
	_addToUnscopables('values');
	_addToUnscopables('entries');

	// 21.2.5.3 get RegExp.prototype.flags

	var _flags = function _flags() {
	  var that = _anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var dP$4 = _objectDp.f;
	var gOPN$3 = _objectGopn.f;

	var $RegExp = _global.RegExp;
	var Base$1 = $RegExp;
	var proto$2 = $RegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;
	// "new" creates a new object, old webkit buggy here
	var CORRECT_NEW = new $RegExp(re1) !== re1;

	if (_descriptors && (!CORRECT_NEW || _fails(function () {
	  re2[_wks('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))) {
	  $RegExp = function RegExp(p, f) {
	    var tiRE = this instanceof $RegExp;
	    var piRE = _isRegexp(p);
	    var fiU = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : _inheritIfRequired(CORRECT_NEW ? new Base$1(piRE && !fiU ? p.source : p, f) : Base$1((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f), tiRE ? this : proto$2, $RegExp);
	  };
	  var proxy = function proxy(key) {
	    key in $RegExp || dP$4($RegExp, key, {
	      configurable: true,
	      get: function get() {
	        return Base$1[key];
	      },
	      set: function set(it) {
	        Base$1[key] = it;
	      }
	    });
	  };
	  for (var keys$1 = gOPN$3(Base$1), i = 0; keys$1.length > i;) {
	    proxy(keys$1[i++]);
	  }proto$2.constructor = $RegExp;
	  $RegExp.prototype = proto$2;
	  _redefine(_global, 'RegExp', $RegExp);
	}

	_setSpecies('RegExp');

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var LAST_INDEX = 'lastIndex';

	var UPDATES_LAST_INDEX_WRONG = function () {
	  var re1 = /a/,
	      re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
	}();

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + re.source + '$(?!\\s)', _flags.call(re));
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

	    match = nativeExec.call(re, str);

	    if (UPDATES_LAST_INDEX_WRONG && match) {
	      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      // eslint-disable-next-line no-loop-func
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var _regexpExec = patchedExec;

	_export({
	  target: 'RegExp',
	  proto: true,
	  forced: _regexpExec !== /./.exec
	}, {
	  exec: _regexpExec
	});

	// 21.2.5.3 get RegExp.prototype.flags()
	if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: _flags
	});

	var TO_STRING$1 = 'toString';
	var $toString$1 = /./[TO_STRING$1];

	var define = function define(fn) {
	  _redefine(RegExp.prototype, TO_STRING$1, fn, true);
	};

	// 21.2.5.14 RegExp.prototype.toString()
	if (_fails(function () {
	  return $toString$1.call({ source: 'a', flags: 'b' }) != '/a/b';
	})) {
	  define(function toString() {
	    var R = _anObject(this);
	    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
	  });
	  // FF44- RegExp#toString has a wrong name
	} else if ($toString$1.name != TO_STRING$1) {
	  define(function toString() {
	    return $toString$1.call(this);
	  });
	}

	var at = _stringAt(true);

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var _advanceStringIndex = function _advanceStringIndex(S, index, unicode) {
	  return index + (unicode ? at(S, index).length : 1);
	};

	var builtinExec = RegExp.prototype.exec;

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var _regexpExecAbstract = function _regexpExecAbstract(R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {
	      throw new TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }
	  if (_classof(R) !== 'RegExp') {
	    throw new TypeError('RegExp#exec called on incompatible receiver');
	  }
	  return builtinExec.call(R, S);
	};

	var SPECIES$2 = _wks('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
	  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () {
	    return originalExec.apply(this, arguments);
	  };
	  var result = 'ab'.split(re);
	  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
	}();

	var _fixReWks = function _fixReWks(KEY, length, exec) {
	  var SYMBOL = _wks(KEY);

	  var DELEGATES_TO_SYMBOL = !_fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () {
	      return 7;
	    };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;
	    re.exec = function () {
	      execCalled = true;return null;
	    };
	    if (KEY === 'split') {
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$2] = function () {
	        return re;
	      };
	    }
	    re[SYMBOL]('');
	    return !execCalled;
	  }) : undefined;

	  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var fns = exec(_defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === _regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    });
	    var strfn = fns[0];
	    var rxfn = fns[1];

	    _redefine(String.prototype, KEY, strfn);
	    _hide(RegExp.prototype, SYMBOL, length == 2
	    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	    ? function (string, arg) {
	      return rxfn.call(string, this, arg);
	    }
	    // 21.2.5.6 RegExp.prototype[@@match](string)
	    // 21.2.5.9 RegExp.prototype[@@search](string)
	    : function (string) {
	      return rxfn.call(string, this);
	    });
	  }
	};

	// @@match logic
	_fixReWks('match', 1, function (defined, MATCH, $match, maybeCallNative) {
	  return [
	  // `String.prototype.match` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.match
	  function match(regexp) {
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  },
	  // `RegExp.prototype[@@match]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
	  function (regexp) {
	    var res = maybeCallNative($match, regexp, this);
	    if (res.done) return res.value;
	    var rx = _anObject(regexp);
	    var S = String(this);
	    if (!rx.global) return _regexpExecAbstract(rx, S);
	    var fullUnicode = rx.unicode;
	    rx.lastIndex = 0;
	    var A = [];
	    var n = 0;
	    var result;
	    while ((result = _regexpExecAbstract(rx, S)) !== null) {
	      var matchStr = String(result[0]);
	      A[n] = matchStr;
	      if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
	      n++;
	    }
	    return n === 0 ? null : A;
	  }];
	});

	var max$1 = Math.max;
	var min$2 = Math.min;
	var floor$3 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

	var maybeToString = function maybeToString(it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	_fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
	  return [
	  // `String.prototype.replace` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	  function replace(searchValue, replaceValue) {
	    var O = defined(this);
	    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
	  },
	  // `RegExp.prototype[@@replace]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	  function (regexp, replaceValue) {
	    var res = maybeCallNative($replace, regexp, this, replaceValue);
	    if (res.done) return res.value;

	    var rx = _anObject(regexp);
	    var S = String(this);
	    var functionalReplace = typeof replaceValue === 'function';
	    if (!functionalReplace) replaceValue = String(replaceValue);
	    var global = rx.global;
	    if (global) {
	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	    }
	    var results = [];
	    while (true) {
	      var result = _regexpExecAbstract(rx, S);
	      if (result === null) break;
	      results.push(result);
	      if (!global) break;
	      var matchStr = String(result[0]);
	      if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
	    }
	    var accumulatedResult = '';
	    var nextSourcePosition = 0;
	    for (var i = 0; i < results.length; i++) {
	      result = results[i];
	      var matched = String(result[0]);
	      var position = max$1(min$2(_toInteger(result.index), S.length), 0);
	      var captures = [];
	      // NOTE: This is equivalent to
	      //   captures = result.slice(1).map(maybeToString)
	      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	      for (var j = 1; j < result.length; j++) {
	        captures.push(maybeToString(result[j]));
	      }var namedCaptures = result.groups;
	      if (functionalReplace) {
	        var replacerArgs = [matched].concat(captures, position, S);
	        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	        var replacement = String(replaceValue.apply(undefined, replacerArgs));
	      } else {
	        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	      }
	      if (position >= nextSourcePosition) {
	        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	        nextSourcePosition = position + matched.length;
	      }
	    }
	    return accumulatedResult + S.slice(nextSourcePosition);
	  }];

	  // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = _toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return $replace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$':
	          return '$';
	        case '&':
	          return matched;
	        case '`':
	          return str.slice(0, position);
	        case "'":
	          return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default:
	          // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$3(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	// @@search logic
	_fixReWks('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
	  return [
	  // `String.prototype.search` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.search
	  function search(regexp) {
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  },
	  // `RegExp.prototype[@@search]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	  function (regexp) {
	    var res = maybeCallNative($search, regexp, this);
	    if (res.done) return res.value;
	    var rx = _anObject(regexp);
	    var S = String(this);
	    var previousLastIndex = rx.lastIndex;
	    if (!_sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	    var result = _regexpExecAbstract(rx, S);
	    if (!_sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	    return result === null ? -1 : result.index;
	  }];
	});

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)


	var SPECIES$3 = _wks('species');
	var _speciesConstructor = function _speciesConstructor(O, D) {
	  var C = _anObject(O).constructor;
	  var S;
	  return C === undefined || (S = _anObject(C)[SPECIES$3]) == undefined ? D : _aFunction(S);
	};

	var $min = Math.min;
	var $push = [].push;
	var $SPLIT = 'split';
	var LENGTH = 'length';
	var LAST_INDEX$1 = 'lastIndex';
	var MAX_UINT32 = 0xffffffff;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !_fails(function () {
	});

	// @@split logic
	_fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
	  var internalSplit;
	  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function internalSplit(separator, limit) {
	      var string = String(this);
	      if (separator === undefined && limit === 0) return [];
	      // If `separator` is not a regex, use native split
	      if (!_isRegexp(separator)) return $split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = _regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy[LAST_INDEX$1];
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if (output[LENGTH] >= splitLimit) break;
	        }
	        if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string[LENGTH]) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	    // Chakra, V8
	  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
	    internalSplit = function internalSplit(separator, limit) {
	      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
	    };
	  } else {
	    internalSplit = $split;
	  }

	  return [
	  // `String.prototype.split` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.split
	  function split(separator, limit) {
	    var O = defined(this);
	    var splitter = separator == undefined ? undefined : separator[SPLIT];
	    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
	  },
	  // `RegExp.prototype[@@split]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	  //
	  // NOTE: This cannot be properly polyfilled in engines that don't support
	  // the 'y' flag.
	  function (regexp, limit) {
	    var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
	    if (res.done) return res.value;

	    var rx = _anObject(regexp);
	    var S = String(this);
	    var C = _speciesConstructor(rx, RegExp);

	    var unicodeMatching = rx.unicode;
	    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g');

	    // ^(? + rx + ) is needed, in combination with some S slicing, to
	    // simulate the 'y' flag.
	    var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	    if (lim === 0) return [];
	    if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];
	    var p = 0;
	    var q = 0;
	    var A = [];
	    while (q < S.length) {
	      splitter.lastIndex = SUPPORTS_Y ? q : 0;
	      var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	      var e;
	      if (z === null || (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
	        q = _advanceStringIndex(S, q, unicodeMatching);
	      } else {
	        A.push(S.slice(p, q));
	        if (A.length === lim) return A;
	        for (var i = 1; i <= z.length - 1; i++) {
	          A.push(z[i]);
	          if (A.length === lim) return A;
	        }
	        q = p = e;
	      }
	    }
	    A.push(S.slice(p));
	    return A;
	  }];
	});

	var _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
	    throw TypeError(name + ': incorrect invocation!');
	  }return it;
	};

	var _forOf = createCommonjsModule(function (module) {
	  var BREAK = {};
	  var RETURN = {};
	  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	    var iterFn = ITERATOR ? function () {
	      return iterable;
	    } : core_getIteratorMethod(iterable);
	    var f = _ctx(fn, that, entries ? 2 : 1);
	    var index = 0;
	    var length, step, iterator, result;
	    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	    // fast case for arrays with default iterator
	    if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
	      result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	      if (result === BREAK || result === RETURN) return result;
	    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	      result = _iterCall(iterator, f, step.value, entries);
	      if (result === BREAK || result === RETURN) return result;
	    }
	  };
	  exports.BREAK = BREAK;
	  exports.RETURN = RETURN;
	});

	var process = _global.process;
	var setTask = _global.setImmediate;
	var clearTask = _global.clearImmediate;
	var MessageChannel = _global.MessageChannel;
	var Dispatch = _global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function run() {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function listener(event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) {
	      args.push(arguments[i++]);
	    }queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (_cof(process) == 'process') {
	    defer = function defer(id) {
	      process.nextTick(_ctx(run, id, 1));
	    };
	    // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function defer(id) {
	      Dispatch.now(_ctx(run, id, 1));
	    };
	    // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = _ctx(port.postMessage, port, 1);
	    // Browsers with postMessage, skip WebWorkers
	    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
	    defer = function defer(id) {
	      _global.postMessage(id + '', '*');
	    };
	    _global.addEventListener('message', listener, false);
	    // IE8-
	  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
	    defer = function defer(id) {
	      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
	        _html.removeChild(this);
	        run.call(id);
	      };
	    };
	    // Rest old browsers
	  } else {
	    defer = function defer(id) {
	      setTimeout(_ctx(run, id, 1), 0);
	    };
	  }
	}
	var _task = {
	  set: setTask,
	  clear: clearTask
	};

	var macrotask = _task.set;
	var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
	var process$1 = _global.process;
	var Promise$1 = _global.Promise;
	var isNode = _cof(process$1) == 'process';

	var _microtask = function _microtask() {
	  var head, last, notify;

	  var flush = function flush() {
	    var parent, fn;
	    if (isNode && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();else last = undefined;
	        throw e;
	      }
	    }last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function notify() {
	      process$1.nextTick(flush);
	    };
	    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function notify() {
	      node.data = toggle = !toggle;
	    };
	    // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise$1.resolve(undefined);
	    notify = function notify() {
	      promise.then(flush);
	    };
	    // for other environments - macrotask based on:
	    // - setImmediate
	    // - MessageChannel
	    // - window.postMessag
	    // - onreadystatechange
	    // - setTimeout
	  } else {
	    notify = function notify() {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(_global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    }last = task;
	  };
	};

	// 25.4.1.5 NewPromiseCapability(C)


	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = _aFunction(resolve);
	  this.reject = _aFunction(reject);
	}

	var f$7 = function f(C) {
	  return new PromiseCapability(C);
	};

	var _newPromiseCapability = {
	  f: f$7
	};

	var _perform = function _perform(exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};

	var navigator$1 = _global.navigator;

	var _userAgent = navigator$1 && navigator$1.userAgent || '';

	var _promiseResolve = function _promiseResolve(C, x) {
	  _anObject(C);
	  if (_isObject(x) && x.constructor === C) return x;
	  var promiseCapability = _newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var _redefineAll = function _redefineAll(target, src, safe) {
	  for (var key in src) {
	    _redefine(target, key, src[key], safe);
	  }return target;
	};

	var task = _task.set;
	var microtask = _microtask();

	var PROMISE = 'Promise';
	var TypeError$1 = _global.TypeError;
	var process$2 = _global.process;
	var versions = process$2 && process$2.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = _global[PROMISE];
	var isNode$1 = _classof(process$2) == 'process';
	var empty = function empty() {/* empty */};
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

	var USE_NATIVE$1 = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise
	    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // we can't detect it synchronously, so just check versions
	    && v8.indexOf('6.6') !== 0 && _userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) {/* empty */}
	}();

	// helpers
	var isThenable = function isThenable(it) {
	  var then;
	  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function notify(promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function run(reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) {
	      run(chain[i++]);
	    } // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function onUnhandled(promise) {
	  task.call(_global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = _perform(function () {
	        if (isNode$1) {
	          process$2.emit('unhandledRejection', value, promise);
	        } else if (handler = _global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = _global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
	    }promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function isUnhandled(promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function onHandleUnhandled(promise) {
	  task.call(_global, function () {
	    var handler;
	    if (isNode$1) {
	      process$2.emit('rejectionHandled', promise);
	    } else if (handler = _global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function $reject(value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function $resolve(value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE$1) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    _anInstance(this, $Promise, PROMISE, '_h');
	    _aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = []; // <- awaiting reactions
	    this._a = undefined; // <- checked in isUnhandled reactions
	    this._s = 0; // <- state
	    this._d = false; // <- done
	    this._v = undefined; // <- value
	    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false; // <- notify
	  };
	  Internal.prototype = _redefineAll($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode$1 ? process$2.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function _catch(onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function OwnPromiseCapability() {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = _ctx($resolve, promise, 1);
	    this.reject = _ctx($reject, promise, 1);
	  };
	  _newPromiseCapability.f = newPromiseCapability = function newPromiseCapability(C) {
	    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, { Promise: $Promise });
	_setToStringTag($Promise, PROMISE);
	_setSpecies(PROMISE);
	Wrapper = _core[PROMISE];

	// statics
	_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	_export(_export.S + _export.F * (_library || !USE_NATIVE$1), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);
	  }
	});
	_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = _perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      _forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = _perform(function () {
	      _forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});

	var _validateCollection = function _validateCollection(it, TYPE) {
	  if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};

	var dP$5 = _objectDp.f;

	var fastKey = _meta.fastKey;

	var SIZE = _descriptors ? '_s' : 'size';

	var getEntry = function getEntry(that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};

	var _collectionStrong = {
	  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      _anInstance(that, C, NAME, '_i');
	      that._t = NAME; // collection type
	      that._i = _objectCreate(null); // index
	      that._f = undefined; // first entry
	      that._l = undefined; // last entry
	      that[SIZE] = 0; // size
	      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    _redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function _delete(key) {
	        var that = _validateCollection(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        }return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        _validateCollection(this, NAME);
	        var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) {
	            entry = entry.p;
	          }
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(_validateCollection(this, NAME), key);
	      }
	    });
	    if (_descriptors) dP$5(C.prototype, 'size', {
	      get: function get() {
	        return _validateCollection(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function def(that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	      // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key, // <- key
	        v: value, // <- value
	        p: prev = that._l, // <- previous entry
	        n: undefined, // <- next entry
	        r: false // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    }return that;
	  },
	  getEntry: getEntry,
	  setStrong: function setStrong(C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    _iterDefine(C, NAME, function (iterated, kind) {
	      this._t = _validateCollection(iterated, NAME); // target
	      this._k = kind; // kind
	      this._l = undefined; // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) {
	        entry = entry.p;
	      } // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return _iterStep(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return _iterStep(0, entry.k);
	      if (kind == 'values') return _iterStep(0, entry.v);
	      return _iterStep(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    _setSpecies(NAME);
	  }
	};

	var _collection = function _collection(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = _global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function fixMethod(KEY) {
	    var fn = proto[KEY];
	    _redefine(proto, KEY, KEY == 'delete' ? function (a) {
	      return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	    } : KEY == 'has' ? function has(a) {
	      return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	    } : KEY == 'get' ? function get(a) {
	      return IS_WEAK && !_isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	    } : KEY == 'add' ? function add(a) {
	      fn.call(this, a === 0 ? 0 : a);return this;
	    } : function set(a, b) {
	      fn.call(this, a === 0 ? 0 : a, b);return this;
	    });
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    _redefineAll(C.prototype, methods);
	    _meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = _fails(function () {
	      instance.has(1);
	    });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = _iterDetect(function (iter) {
	      new C(iter);
	    }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && _fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) {
	        $instance[ADDER](index, index);
	      }return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        _anInstance(target, C, NAME);
	        var that = _inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }

	  _setToStringTag(C, NAME);

	  O[NAME] = C;
	  _export(_export.G + _export.W + _export.F * (C != Base), O);

	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

	var MAP = 'Map';

	// 23.1 Map Objects
	var es6_map = _collection(MAP, function (get) {
	  return function Map() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, _collectionStrong, true);

	var SET = 'Set';

	// 23.2 Set Objects
	var es6_set = _collection(SET, function (get) {
	  return function Set() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return _collectionStrong.def(_validateCollection(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, _collectionStrong);

	var getWeak = _meta.getWeak;

	var arrayFind = _arrayMethods(5);
	var arrayFindIndex = _arrayMethods(6);
	var id$2 = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function UncaughtFrozenStore() {
	  this.a = [];
	};
	var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function get(key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function has(key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function set(key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;else this.a.push([key, value]);
	  },
	  'delete': function _delete(key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	var _collectionWeak = {
	  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      _anInstance(that, C, NAME, '_i');
	      that._t = NAME; // collection type
	      that._i = id$2++; // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    _redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function _delete(key) {
	        if (!_isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME))['delete'](key);
	        return data && _has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!_isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME)).has(key);
	        return data && _has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function def(that, key, value) {
	    var data = getWeak(_anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

	var es6_weakMap = createCommonjsModule(function (module) {

	  var each = _arrayMethods(0);

	  var NATIVE_WEAK_MAP = _validateCollection;
	  var IS_IE11 = !_global.ActiveXObject && 'ActiveXObject' in _global;
	  var WEAK_MAP = 'WeakMap';
	  var getWeak = _meta.getWeak;
	  var isExtensible = Object.isExtensible;
	  var uncaughtFrozenStore = _collectionWeak.ufstore;
	  var InternalMap;

	  var wrapper = function wrapper(get) {
	    return function WeakMap() {
	      return get(this, arguments.length > 0 ? arguments[0] : undefined);
	    };
	  };

	  var methods = {
	    // 23.3.3.3 WeakMap.prototype.get(key)
	    get: function get(key) {
	      if (_isObject(key)) {
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(_validateCollection(this, WEAK_MAP)).get(key);
	        return data ? data[this._i] : undefined;
	      }
	    },
	    // 23.3.3.5 WeakMap.prototype.set(key, value)
	    set: function set(key, value) {
	      return _collectionWeak.def(_validateCollection(this, WEAK_MAP), key, value);
	    }
	  };

	  // 23.3 WeakMap Objects
	  var $WeakMap = module.exports = _collection(WEAK_MAP, wrapper, methods, _collectionWeak, true, true);

	  // IE11 WeakMap frozen keys fix
	  if (NATIVE_WEAK_MAP && IS_IE11) {
	    InternalMap = _collectionWeak.getConstructor(wrapper, WEAK_MAP);
	    _objectAssign(InternalMap.prototype, methods);
	    _meta.NEED = true;
	    each(['delete', 'has', 'get', 'set'], function (key) {
	      var proto = $WeakMap.prototype;
	      var method = proto[key];
	      _redefine(proto, key, function (a, b) {
	        // store frozen objects on internal weakmap shim
	        if (_isObject(a) && !isExtensible(a)) {
	          if (!this._f) this._f = new InternalMap();
	          var result = this._f[key](a, b);
	          return key == 'set' ? this : result;
	          // store all the rest on native weakmap
	        }return method.call(this, a, b);
	      });
	    });
	  }
	});

	var WEAK_SET = 'WeakSet';

	// 23.4 WeakSet Objects
	_collection(WEAK_SET, function (get) {
	  return function WeakSet() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return _collectionWeak.def(_validateCollection(this, WEAK_SET), value, true);
	  }
	}, _collectionWeak, false, true);

	var TYPED = _uid('typed_array');
	var VIEW = _uid('view');
	var ABV = !!(_global.ArrayBuffer && _global.DataView);
	var CONSTR = ABV;
	var i$1 = 0;
	var l = 9;
	var Typed;

	var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

	while (i$1 < l) {
	  if (Typed = _global[TypedArrayConstructors[i$1++]]) {
	    _hide(Typed.prototype, TYPED, true);
	    _hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}

	var _typed = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};

	// https://tc39.github.io/ecma262/#sec-toindex


	var _toIndex = function _toIndex(it) {
	  if (it === undefined) return 0;
	  var number = _toInteger(it);
	  var length = _toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};

	var _typedBuffer = createCommonjsModule(function (module, exports) {

	  var gOPN = _objectGopn.f;
	  var dP = _objectDp.f;

	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var DATA_VIEW = 'DataView';
	  var PROTOTYPE = 'prototype';
	  var WRONG_LENGTH = 'Wrong length!';
	  var WRONG_INDEX = 'Wrong index!';
	  var $ArrayBuffer = _global[ARRAY_BUFFER];
	  var $DataView = _global[DATA_VIEW];
	  var Math = _global.Math;
	  var RangeError = _global.RangeError;
	  // eslint-disable-next-line no-shadow-restricted-names
	  var Infinity = _global.Infinity;
	  var BaseBuffer = $ArrayBuffer;
	  var abs = Math.abs;
	  var pow = Math.pow;
	  var floor = Math.floor;
	  var log = Math.log;
	  var LN2 = Math.LN2;
	  var BUFFER = 'buffer';
	  var BYTE_LENGTH = 'byteLength';
	  var BYTE_OFFSET = 'byteOffset';
	  var $BUFFER = _descriptors ? '_b' : BUFFER;
	  var $LENGTH = _descriptors ? '_l' : BYTE_LENGTH;
	  var $OFFSET = _descriptors ? '_o' : BYTE_OFFSET;

	  // IEEE754 conversions based on https://github.com/feross/ieee754
	  function packIEEE754(value, mLen, nBytes) {
	    var buffer = new Array(nBytes);
	    var eLen = nBytes * 8 - mLen - 1;
	    var eMax = (1 << eLen) - 1;
	    var eBias = eMax >> 1;
	    var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	    var i = 0;
	    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	    var e, m, c;
	    value = abs(value);
	    // eslint-disable-next-line no-self-compare
	    if (value != value || value === Infinity) {
	      // eslint-disable-next-line no-self-compare
	      m = value != value ? 1 : 0;
	      e = eMax;
	    } else {
	      e = floor(log(value) / LN2);
	      if (value * (c = pow(2, -e)) < 1) {
	        e--;
	        c *= 2;
	      }
	      if (e + eBias >= 1) {
	        value += rt / c;
	      } else {
	        value += rt * pow(2, 1 - eBias);
	      }
	      if (value * c >= 2) {
	        e++;
	        c /= 2;
	      }
	      if (e + eBias >= eMax) {
	        m = 0;
	        e = eMax;
	      } else if (e + eBias >= 1) {
	        m = (value * c - 1) * pow(2, mLen);
	        e = e + eBias;
	      } else {
	        m = value * pow(2, eBias - 1) * pow(2, mLen);
	        e = 0;
	      }
	    }
	    for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {}
	    e = e << mLen | m;
	    eLen += mLen;
	    for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {}
	    buffer[--i] |= s * 128;
	    return buffer;
	  }
	  function unpackIEEE754(buffer, mLen, nBytes) {
	    var eLen = nBytes * 8 - mLen - 1;
	    var eMax = (1 << eLen) - 1;
	    var eBias = eMax >> 1;
	    var nBits = eLen - 7;
	    var i = nBytes - 1;
	    var s = buffer[i--];
	    var e = s & 127;
	    var m;
	    s >>= 7;
	    for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {}
	    m = e & (1 << -nBits) - 1;
	    e >>= -nBits;
	    nBits += mLen;
	    for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {}
	    if (e === 0) {
	      e = 1 - eBias;
	    } else if (e === eMax) {
	      return m ? NaN : s ? -Infinity : Infinity;
	    } else {
	      m = m + pow(2, mLen);
	      e = e - eBias;
	    }return (s ? -1 : 1) * m * pow(2, e - mLen);
	  }

	  function unpackI32(bytes) {
	    return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	  }
	  function packI8(it) {
	    return [it & 0xff];
	  }
	  function packI16(it) {
	    return [it & 0xff, it >> 8 & 0xff];
	  }
	  function packI32(it) {
	    return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	  }
	  function packF64(it) {
	    return packIEEE754(it, 52, 8);
	  }
	  function packF32(it) {
	    return packIEEE754(it, 23, 4);
	  }

	  function addGetter(C, key, internal) {
	    dP(C[PROTOTYPE], key, { get: function get() {
	        return this[internal];
	      } });
	  }

	  function get(view, bytes, index, isLittleEndian) {
	    var numIndex = +index;
	    var intIndex = _toIndex(numIndex);
	    if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	    var store = view[$BUFFER]._b;
	    var start = intIndex + view[$OFFSET];
	    var pack = store.slice(start, start + bytes);
	    return isLittleEndian ? pack : pack.reverse();
	  }
	  function set(view, bytes, index, conversion, value, isLittleEndian) {
	    var numIndex = +index;
	    var intIndex = _toIndex(numIndex);
	    if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	    var store = view[$BUFFER]._b;
	    var start = intIndex + view[$OFFSET];
	    var pack = conversion(+value);
	    for (var i = 0; i < bytes; i++) {
	      store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	    }
	  }

	  if (!_typed.ABV) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      _anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	      var byteLength = _toIndex(length);
	      this._b = _arrayFill.call(new Array(byteLength), 0);
	      this[$LENGTH] = byteLength;
	    };

	    $DataView = function DataView(buffer, byteOffset, byteLength) {
	      _anInstance(this, $DataView, DATA_VIEW);
	      _anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	      var bufferLength = buffer[$LENGTH];
	      var offset = _toInteger(byteOffset);
	      if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	      byteLength = byteLength === undefined ? bufferLength - offset : _toLength(byteLength);
	      if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	      this[$BUFFER] = buffer;
	      this[$OFFSET] = offset;
	      this[$LENGTH] = byteLength;
	    };

	    if (_descriptors) {
	      addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	      addGetter($DataView, BUFFER, '_b');
	      addGetter($DataView, BYTE_LENGTH, '_l');
	      addGetter($DataView, BYTE_OFFSET, '_o');
	    }

	    _redefineAll($DataView[PROTOTYPE], {
	      getInt8: function getInt8(byteOffset) {
	        return get(this, 1, byteOffset)[0] << 24 >> 24;
	      },
	      getUint8: function getUint8(byteOffset) {
	        return get(this, 1, byteOffset)[0];
	      },
	      getInt16: function getInt16(byteOffset /* , littleEndian */) {
	        var bytes = get(this, 2, byteOffset, arguments[1]);
	        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	      },
	      getUint16: function getUint16(byteOffset /* , littleEndian */) {
	        var bytes = get(this, 2, byteOffset, arguments[1]);
	        return bytes[1] << 8 | bytes[0];
	      },
	      getInt32: function getInt32(byteOffset /* , littleEndian */) {
	        return unpackI32(get(this, 4, byteOffset, arguments[1]));
	      },
	      getUint32: function getUint32(byteOffset /* , littleEndian */) {
	        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	      },
	      getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	      },
	      getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	      },
	      setInt8: function setInt8(byteOffset, value) {
	        set(this, 1, byteOffset, packI8, value);
	      },
	      setUint8: function setUint8(byteOffset, value) {
	        set(this, 1, byteOffset, packI8, value);
	      },
	      setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	        set(this, 2, byteOffset, packI16, value, arguments[2]);
	      },
	      setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	        set(this, 2, byteOffset, packI16, value, arguments[2]);
	      },
	      setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	        set(this, 4, byteOffset, packI32, value, arguments[2]);
	      },
	      setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	        set(this, 4, byteOffset, packI32, value, arguments[2]);
	      },
	      setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	        set(this, 4, byteOffset, packF32, value, arguments[2]);
	      },
	      setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	        set(this, 8, byteOffset, packF64, value, arguments[2]);
	      }
	    });
	  } else {
	    if (!_fails(function () {
	      $ArrayBuffer(1);
	    }) || !_fails(function () {
	      new $ArrayBuffer(-1); // eslint-disable-line no-new
	    }) || _fails(function () {
	      new $ArrayBuffer(); // eslint-disable-line no-new
	      new $ArrayBuffer(1.5); // eslint-disable-line no-new
	      new $ArrayBuffer(NaN); // eslint-disable-line no-new
	      return $ArrayBuffer.name != ARRAY_BUFFER;
	    })) {
	      $ArrayBuffer = function ArrayBuffer(length) {
	        _anInstance(this, $ArrayBuffer);
	        return new BaseBuffer(_toIndex(length));
	      };
	      var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	      for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	        if (!((key = keys[j++]) in $ArrayBuffer)) _hide($ArrayBuffer, key, BaseBuffer[key]);
	      }
	      ArrayBufferProto.constructor = $ArrayBuffer;
	    }
	    // iOS Safari 7.x bug
	    var view = new $DataView(new $ArrayBuffer(2));
	    var $setInt8 = $DataView[PROTOTYPE].setInt8;
	    view.setInt8(0, 2147483648);
	    view.setInt8(1, 2147483649);
	    if (view.getInt8(0) || !view.getInt8(1)) _redefineAll($DataView[PROTOTYPE], {
	      setInt8: function setInt8(byteOffset, value) {
	        $setInt8.call(this, byteOffset, value << 24 >> 24);
	      },
	      setUint8: function setUint8(byteOffset, value) {
	        $setInt8.call(this, byteOffset, value << 24 >> 24);
	      }
	    }, true);
	  }
	  _setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	  _setToStringTag($DataView, DATA_VIEW);
	  _hide($DataView[PROTOTYPE], _typed.VIEW, true);
	  exports[ARRAY_BUFFER] = $ArrayBuffer;
	  exports[DATA_VIEW] = $DataView;
	});

	var ArrayBuffer = _global.ArrayBuffer;

	var $ArrayBuffer = _typedBuffer.ArrayBuffer;
	var $DataView = _typedBuffer.DataView;
	var $isView = _typed.ABV && ArrayBuffer.isView;
	var $slice = $ArrayBuffer.prototype.slice;
	var VIEW$1 = _typed.VIEW;
	var ARRAY_BUFFER = 'ArrayBuffer';

	_export(_export.G + _export.W + _export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

	_export(_export.S + _export.F * !_typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it) {
	    return $isView && $isView(it) || _isObject(it) && VIEW$1 in it;
	  }
	});

	_export(_export.P + _export.U + _export.F * _fails(function () {
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end) {
	    if ($slice !== undefined && end === undefined) return $slice.call(_anObject(this), start); // FF fix
	    var len = _anObject(this).byteLength;
	    var first = _toAbsoluteIndex(start, len);
	    var fin = _toAbsoluteIndex(end === undefined ? len : end, len);
	    var result = new (_speciesConstructor(this, $ArrayBuffer))(_toLength(fin - first));
	    var viewS = new $DataView(this);
	    var viewT = new $DataView(result);
	    var index = 0;
	    while (first < fin) {
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    }return result;
	  }
	});

	_setSpecies(ARRAY_BUFFER);

	_export(_export.G + _export.W + _export.F * !_typed.ABV, {
	  DataView: _typedBuffer.DataView
	});

	var _typedArray = createCommonjsModule(function (module) {

	  if (_descriptors) {
	    var global = _global;
	    var fails = _fails;
	    var $export = _export;
	    var $typed = _typed;
	    var $buffer = _typedBuffer;
	    var ctx = _ctx;
	    var anInstance = _anInstance;
	    var propertyDesc = _propertyDesc;
	    var hide = _hide;
	    var redefineAll = _redefineAll;
	    var toInteger = _toInteger;
	    var toLength = _toLength;
	    var toIndex = _toIndex;
	    var toAbsoluteIndex = _toAbsoluteIndex;
	    var toPrimitive = _toPrimitive;
	    var has = _has;
	    var classof = _classof;
	    var isObject = _isObject;
	    var toObject = _toObject;
	    var isArrayIter = _isArrayIter;
	    var create = _objectCreate;
	    var getPrototypeOf = _objectGpo;
	    var gOPN = _objectGopn.f;
	    var getIterFn = core_getIteratorMethod;
	    var uid = _uid;
	    var wks = _wks;
	    var createArrayMethod = _arrayMethods;
	    var createArrayIncludes = _arrayIncludes;
	    var speciesConstructor = _speciesConstructor;
	    var ArrayIterators = es6_array_iterator;
	    var Iterators = _iterators;
	    var $iterDetect = _iterDetect;
	    var setSpecies = _setSpecies;
	    var arrayFill = _arrayFill;
	    var arrayCopyWithin = _arrayCopyWithin;
	    var $DP = _objectDp;
	    var $GOPD = _objectGopd;
	    var dP = $DP.f;
	    var gOPD = $GOPD.f;
	    var RangeError = global.RangeError;
	    var TypeError = global.TypeError;
	    var Uint8Array = global.Uint8Array;
	    var ARRAY_BUFFER = 'ArrayBuffer';
	    var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	    var PROTOTYPE = 'prototype';
	    var ArrayProto = Array[PROTOTYPE];
	    var $ArrayBuffer = $buffer.ArrayBuffer;
	    var $DataView = $buffer.DataView;
	    var arrayForEach = createArrayMethod(0);
	    var arrayFilter = createArrayMethod(2);
	    var arraySome = createArrayMethod(3);
	    var arrayEvery = createArrayMethod(4);
	    var arrayFind = createArrayMethod(5);
	    var arrayFindIndex = createArrayMethod(6);
	    var arrayIncludes = createArrayIncludes(true);
	    var arrayIndexOf = createArrayIncludes(false);
	    var arrayValues = ArrayIterators.values;
	    var arrayKeys = ArrayIterators.keys;
	    var arrayEntries = ArrayIterators.entries;
	    var arrayLastIndexOf = ArrayProto.lastIndexOf;
	    var arrayReduce = ArrayProto.reduce;
	    var arrayReduceRight = ArrayProto.reduceRight;
	    var arrayJoin = ArrayProto.join;
	    var arraySort = ArrayProto.sort;
	    var arraySlice = ArrayProto.slice;
	    var arrayToString = ArrayProto.toString;
	    var arrayToLocaleString = ArrayProto.toLocaleString;
	    var ITERATOR = wks('iterator');
	    var TAG = wks('toStringTag');
	    var TYPED_CONSTRUCTOR = uid('typed_constructor');
	    var DEF_CONSTRUCTOR = uid('def_constructor');
	    var ALL_CONSTRUCTORS = $typed.CONSTR;
	    var TYPED_ARRAY = $typed.TYPED;
	    var VIEW = $typed.VIEW;
	    var WRONG_LENGTH = 'Wrong length!';

	    var $map = createArrayMethod(1, function (O, length) {
	      return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	    });

	    var LITTLE_ENDIAN = fails(function () {
	      // eslint-disable-next-line no-undef
	      return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	    });

	    var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	      new Uint8Array(1).set({});
	    });

	    var toOffset = function toOffset(it, BYTES) {
	      var offset = toInteger(it);
	      if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	      return offset;
	    };

	    var validate = function validate(it) {
	      if (isObject(it) && TYPED_ARRAY in it) return it;
	      throw TypeError(it + ' is not a typed array!');
	    };

	    var allocate = function allocate(C, length) {
	      if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	        throw TypeError('It is not a typed array constructor!');
	      }return new C(length);
	    };

	    var speciesFromList = function speciesFromList(O, list) {
	      return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	    };

	    var fromList = function fromList(C, list) {
	      var index = 0;
	      var length = list.length;
	      var result = allocate(C, length);
	      while (length > index) {
	        result[index] = list[index++];
	      }return result;
	    };

	    var addGetter = function addGetter(it, key, internal) {
	      dP(it, key, { get: function get$$1() {
	          return this._d[internal];
	        } });
	    };

	    var $from = function from(source /* , mapfn, thisArg */) {
	      var O = toObject(source);
	      var aLen = arguments.length;
	      var mapfn = aLen > 1 ? arguments[1] : undefined;
	      var mapping = mapfn !== undefined;
	      var iterFn = getIterFn(O);
	      var i, length, values, result, step, iterator;
	      if (iterFn != undefined && !isArrayIter(iterFn)) {
	        for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	          values.push(step.value);
	        }O = values;
	      }
	      if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	      for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	        result[i] = mapping ? mapfn(O[i], i) : O[i];
	      }
	      return result;
	    };

	    var $of = function of() /* ...items */{
	      var index = 0;
	      var length = arguments.length;
	      var result = allocate(this, length);
	      while (length > index) {
	        result[index] = arguments[index++];
	      }return result;
	    };

	    // iOS Safari 6.x fails here
	    var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
	      arrayToLocaleString.call(new Uint8Array(1));
	    });

	    var $toLocaleString = function toLocaleString() {
	      return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	    };

	    var proto = {
	      copyWithin: function copyWithin(target, start /* , end */) {
	        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	      },
	      every: function every(callbackfn /* , thisArg */) {
	        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      fill: function fill(value /* , start, end */) {
	        // eslint-disable-line no-unused-vars
	        return arrayFill.apply(validate(this), arguments);
	      },
	      filter: function filter(callbackfn /* , thisArg */) {
	        return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
	      },
	      find: function find(predicate /* , thisArg */) {
	        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      findIndex: function findIndex(predicate /* , thisArg */) {
	        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      forEach: function forEach(callbackfn /* , thisArg */) {
	        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      indexOf: function indexOf(searchElement /* , fromIndex */) {
	        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      includes: function includes(searchElement /* , fromIndex */) {
	        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      join: function join(separator) {
	        // eslint-disable-line no-unused-vars
	        return arrayJoin.apply(validate(this), arguments);
	      },
	      lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) {
	        // eslint-disable-line no-unused-vars
	        return arrayLastIndexOf.apply(validate(this), arguments);
	      },
	      map: function map(mapfn /* , thisArg */) {
	        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      reduce: function reduce(callbackfn /* , initialValue */) {
	        // eslint-disable-line no-unused-vars
	        return arrayReduce.apply(validate(this), arguments);
	      },
	      reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	        // eslint-disable-line no-unused-vars
	        return arrayReduceRight.apply(validate(this), arguments);
	      },
	      reverse: function reverse() {
	        var that = this;
	        var length = validate(that).length;
	        var middle = Math.floor(length / 2);
	        var index = 0;
	        var value;
	        while (index < middle) {
	          value = that[index];
	          that[index++] = that[--length];
	          that[length] = value;
	        }return that;
	      },
	      some: function some(callbackfn /* , thisArg */) {
	        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	      },
	      sort: function sort(comparefn) {
	        return arraySort.call(validate(this), comparefn);
	      },
	      subarray: function subarray(begin, end) {
	        var O = validate(this);
	        var length = O.length;
	        var $begin = toAbsoluteIndex(begin, length);
	        return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
	      }
	    };

	    var $slice = function slice(start, end) {
	      return speciesFromList(this, arraySlice.call(validate(this), start, end));
	    };

	    var $set = function set$$1(arrayLike /* , offset */) {
	      validate(this);
	      var offset = toOffset(arguments[1], 1);
	      var length = this.length;
	      var src = toObject(arrayLike);
	      var len = toLength(src.length);
	      var index = 0;
	      if (len + offset > length) throw RangeError(WRONG_LENGTH);
	      while (index < len) {
	        this[offset + index] = src[index++];
	      }
	    };

	    var $iterators = {
	      entries: function entries() {
	        return arrayEntries.call(validate(this));
	      },
	      keys: function keys() {
	        return arrayKeys.call(validate(this));
	      },
	      values: function values() {
	        return arrayValues.call(validate(this));
	      }
	    };

	    var isTAIndex = function isTAIndex(target, key) {
	      return isObject(target) && target[TYPED_ARRAY] && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) != 'symbol' && key in target && String(+key) == String(key);
	    };
	    var $getDesc = function getOwnPropertyDescriptor(target, key) {
	      return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
	    };
	    var $setDesc = function defineProperty$$1(target, key, desc) {
	      if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
	        target[key] = desc.value;
	        return target;
	      }return dP(target, key, desc);
	    };

	    if (!ALL_CONSTRUCTORS) {
	      $GOPD.f = $getDesc;
	      $DP.f = $setDesc;
	    }

	    $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	      getOwnPropertyDescriptor: $getDesc,
	      defineProperty: $setDesc
	    });

	    if (fails(function () {
	      arrayToString.call({});
	    })) {
	      arrayToString = arrayToLocaleString = function toString() {
	        return arrayJoin.call(this);
	      };
	    }

	    var $TypedArrayPrototype$ = redefineAll({}, proto);
	    redefineAll($TypedArrayPrototype$, $iterators);
	    hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	    redefineAll($TypedArrayPrototype$, {
	      slice: $slice,
	      set: $set,
	      constructor: function constructor() {/* noop */},
	      toString: arrayToString,
	      toLocaleString: $toLocaleString
	    });
	    addGetter($TypedArrayPrototype$, 'buffer', 'b');
	    addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	    addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	    addGetter($TypedArrayPrototype$, 'length', 'e');
	    dP($TypedArrayPrototype$, TAG, {
	      get: function get$$1() {
	        return this[TYPED_ARRAY];
	      }
	    });

	    // eslint-disable-next-line max-statements
	    module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	      CLAMPED = !!CLAMPED;
	      var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	      var GETTER = 'get' + KEY;
	      var SETTER = 'set' + KEY;
	      var TypedArray = global[NAME];
	      var Base = TypedArray || {};
	      var TAC = TypedArray && getPrototypeOf(TypedArray);
	      var FORCED = !TypedArray || !$typed.ABV;
	      var O = {};
	      var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	      var getter = function getter(that, index) {
	        var data = that._d;
	        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	      };
	      var setter = function setter(that, index, value) {
	        var data = that._d;
	        if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	      };
	      var addElement = function addElement(that, index) {
	        dP(that, index, {
	          get: function get$$1() {
	            return getter(this, index);
	          },
	          set: function set$$1(value) {
	            return setter(this, index, value);
	          },
	          enumerable: true
	        });
	      };
	      if (FORCED) {
	        TypedArray = wrapper(function (that, data, $offset, $length) {
	          anInstance(that, TypedArray, NAME, '_d');
	          var index = 0;
	          var offset = 0;
	          var buffer, byteLength, length, klass;
	          if (!isObject(data)) {
	            length = toIndex(data);
	            byteLength = length * BYTES;
	            buffer = new $ArrayBuffer(byteLength);
	          } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	            buffer = data;
	            offset = toOffset($offset, BYTES);
	            var $len = data.byteLength;
	            if ($length === undefined) {
	              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	              byteLength = $len - offset;
	              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	            } else {
	              byteLength = toLength($length) * BYTES;
	              if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	            }
	            length = byteLength / BYTES;
	          } else if (TYPED_ARRAY in data) {
	            return fromList(TypedArray, data);
	          } else {
	            return $from.call(TypedArray, data);
	          }
	          hide(that, '_d', {
	            b: buffer,
	            o: offset,
	            l: byteLength,
	            e: length,
	            v: new $DataView(buffer)
	          });
	          while (index < length) {
	            addElement(that, index++);
	          }
	        });
	        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	        hide(TypedArrayPrototype, 'constructor', TypedArray);
	      } else if (!fails(function () {
	        TypedArray(1);
	      }) || !fails(function () {
	        new TypedArray(-1); // eslint-disable-line no-new
	      }) || !$iterDetect(function (iter) {
	        new TypedArray(); // eslint-disable-line no-new
	        new TypedArray(null); // eslint-disable-line no-new
	        new TypedArray(1.5); // eslint-disable-line no-new
	        new TypedArray(iter); // eslint-disable-line no-new
	      }, true)) {
	        TypedArray = wrapper(function (that, data, $offset, $length) {
	          anInstance(that, TypedArray, NAME);
	          var klass;
	          // `ws` module bug, temporarily remove validation length for Uint8Array
	          // https://github.com/websockets/ws/pull/645
	          if (!isObject(data)) return new Base(toIndex(data));
	          if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	            return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
	          }
	          if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	          return $from.call(TypedArray, data);
	        });
	        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	          if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	        });
	        TypedArray[PROTOTYPE] = TypedArrayPrototype;
	        TypedArrayPrototype.constructor = TypedArray;
	      }
	      var $nativeIterator = TypedArrayPrototype[ITERATOR];
	      var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	      var $iterator = $iterators.values;
	      hide(TypedArray, TYPED_CONSTRUCTOR, true);
	      hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	      hide(TypedArrayPrototype, VIEW, true);
	      hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

	      if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	        dP(TypedArrayPrototype, TAG, {
	          get: function get$$1() {
	            return NAME;
	          }
	        });
	      }

	      O[NAME] = TypedArray;

	      $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

	      $export($export.S, NAME, {
	        BYTES_PER_ELEMENT: BYTES
	      });

	      $export($export.S + $export.F * fails(function () {
	        Base.of.call(TypedArray, 1);
	      }), NAME, {
	        from: $from,
	        of: $of
	      });

	      if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

	      $export($export.P, NAME, proto);

	      setSpecies(NAME);

	      $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

	      $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

	      if (TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

	      $export($export.P + $export.F * fails(function () {
	        new TypedArray(1).slice();
	      }), NAME, { slice: $slice });

	      $export($export.P + $export.F * (fails(function () {
	        return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	      }) || !fails(function () {
	        TypedArrayPrototype.toLocaleString.call([1, 2]);
	      })), NAME, { toLocaleString: $toLocaleString });

	      Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	      if (!CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	    };
	  } else module.exports = function () {/* empty */};
	});

	_typedArray('Int8', 1, function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	_typedArray('Int16', 2, function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint16', 2, function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Int32', 4, function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint32', 4, function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Float32', 4, function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Float64', 8, function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)


	var rApply = (_global.Reflect || {}).apply;
	var fApply = Function.apply;
	// MS Edge argumentsList argument is optional
	_export(_export.S + _export.F * !_fails(function () {
	  rApply(function () {/* empty */});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList) {
	    var T = _aFunction(target);
	    var L = _anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])


	var rConstruct = (_global.Reflect || {}).construct;

	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = _fails(function () {
	  function F() {/* empty */}
	  return !(rConstruct(function () {/* empty */}, [], F) instanceof F);
	});
	var ARGS_BUG = !_fails(function () {
	  rConstruct(function () {/* empty */});
	});

	_export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /* , newTarget */) {
	    _aFunction(Target);
	    _anObject(args);
	    var newTarget = arguments.length < 3 ? Target : _aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0:
	          return new Target();
	        case 1:
	          return new Target(args[0]);
	        case 2:
	          return new Target(args[0], args[1]);
	        case 3:
	          return new Target(args[0], args[1], args[2]);
	        case 4:
	          return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (_bind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = _objectCreate(_isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return _isObject(result) ? result : instance;
	  }
	});

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)


	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	_export(_export.S + _export.F * _fails(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(_objectDp.f({}, 1, { value: 1 }), 1, { value: 2 });
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    _anObject(target);
	    propertyKey = _toPrimitive(propertyKey, true);
	    _anObject(attributes);
	    try {
	      _objectDp.f(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)

	var gOPD$3 = _objectGopd.f;

	_export(_export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = gOPD$3(_anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

	// 26.1.5 Reflect.enumerate(target)


	var Enumerate = function Enumerate(iterated) {
	  this._t = _anObject(iterated); // target
	  this._i = 0; // next index
	  var keys = this._k = []; // keys
	  var key;
	  for (key in iterated) {
	    keys.push(key);
	  }
	};
	_iterCreate(Enumerate, 'Object', function () {
	  var that = this;
	  var keys = that._k;
	  var key;
	  do {
	    if (that._i >= keys.length) return { value: undefined, done: true };
	  } while (!((key = keys[that._i++]) in that._t));
	  return { value: key, done: false };
	});

	_export(_export.S, 'Reflect', {
	  enumerate: function enumerate(target) {
	    return new Enumerate(target);
	  }
	});

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])


	function get$1(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var desc, proto;
	  if (_anObject(target) === receiver) return target[propertyKey];
	  if (desc = _objectGopd.f(target, propertyKey)) return _has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
	  if (_isObject(proto = _objectGpo(target))) return get$1(proto, propertyKey, receiver);
	}

	_export(_export.S, 'Reflect', { get: get$1 });

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)


	_export(_export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return _objectGopd.f(_anObject(target), propertyKey);
	  }
	});

	// 26.1.8 Reflect.getPrototypeOf(target)


	_export(_export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return _objectGpo(_anObject(target));
	  }
	});

	// 26.1.9 Reflect.has(target, propertyKey)


	_export(_export.S, 'Reflect', {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	// 26.1.10 Reflect.isExtensible(target)


	var $isExtensible = Object.isExtensible;

	_export(_export.S, 'Reflect', {
	  isExtensible: function isExtensible(target) {
	    _anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

	// all object keys, includes non-enumerable and symbols


	var Reflect$1 = _global.Reflect;
	var _ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {
	  var keys = _objectGopn.f(_anObject(it));
	  var getSymbols = _objectGops.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

	// 26.1.11 Reflect.ownKeys(target)


	_export(_export.S, 'Reflect', { ownKeys: _ownKeys });

	// 26.1.12 Reflect.preventExtensions(target)


	var $preventExtensions = Object.preventExtensions;

	_export(_export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target) {
	    _anObject(target);
	    try {
	      if ($preventExtensions) $preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])


	function set$1(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDesc = _objectGopd.f(_anObject(target), propertyKey);
	  var existingDescriptor, proto;
	  if (!ownDesc) {
	    if (_isObject(proto = _objectGpo(target))) {
	      return set$1(proto, propertyKey, V, receiver);
	    }
	    ownDesc = _propertyDesc(0);
	  }
	  if (_has(ownDesc, 'value')) {
	    if (ownDesc.writable === false || !_isObject(receiver)) return false;
	    if (existingDescriptor = _objectGopd.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      _objectDp.f(receiver, propertyKey, existingDescriptor);
	    } else _objectDp.f(receiver, propertyKey, _propertyDesc(0, V));
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}

	_export(_export.S, 'Reflect', { set: set$1 });

	// 26.1.14 Reflect.setPrototypeOf(target, proto)


	if (_setProto) _export(_export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    _setProto.check(target, proto);
	    try {
	      _setProto.set(target, proto);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// https://github.com/tc39/Array.prototype.includes

	var $includes = _arrayIncludes(true);

	_export(_export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	_addToUnscopables('includes');

	var includes = _core.Array.includes;

	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray


	var IS_CONCAT_SPREADABLE = _wks('isConcatSpreadable');

	function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? _ctx(mapper, thisArg, 3) : false;
	  var element, spreadable;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      spreadable = false;
	      if (_isObject(element)) {
	        spreadable = element[IS_CONCAT_SPREADABLE];
	        spreadable = spreadable !== undefined ? !!spreadable : _isArray(element);
	      }

	      if (spreadable && depth > 0) {
	        targetIndex = flattenIntoArray(target, original, element, _toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	}

	var _flattenIntoArray = flattenIntoArray;

	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap


	_export(_export.P, 'Array', {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = _toObject(this);
	    var sourceLen, A;
	    _aFunction(callbackfn);
	    sourceLen = _toLength(O.length);
	    A = _arraySpeciesCreate(O, 0);
	    _flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
	    return A;
	  }
	});

	_addToUnscopables('flatMap');

	var flatMap = _core.Array.flatMap;

	// https://github.com/tc39/proposal-string-pad-start-end


	var _stringPad = function _stringPad(that, maxLength, fillString, left) {
	  var S = String(_defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = _toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};

	// https://github.com/tc39/proposal-string-pad-start-end


	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);

	_export(_export.P + _export.F * WEBKIT_BUG, 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

	var padStart = _core.String.padStart;

	// https://github.com/tc39/proposal-string-pad-start-end


	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG$1 = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);

	_export(_export.P + _export.F * WEBKIT_BUG$1, 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

	var padEnd = _core.String.padEnd;

	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	_stringTrim('trimLeft', function ($trim) {
	  return function trimLeft() {
	    return $trim(this, 1);
	  };
	}, 'trimStart');

	var trimStart = _core.String.trimLeft;

	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	_stringTrim('trimRight', function ($trim) {
	  return function trimRight() {
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

	var trimEnd = _core.String.trimRight;

	_wksDefine('asyncIterator');

	var asyncIterator$1 = _wksExt.f('asyncIterator');

	// https://github.com/tc39/proposal-object-getownpropertydescriptors


	_export(_export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = _toIobject(object);
	    var getDesc = _objectGopd.f;
	    var keys = _ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) _createProperty(result, key, desc);
	    }
	    return result;
	  }
	});

	var getOwnPropertyDescriptors = _core.Object.getOwnPropertyDescriptors;

	var isEnum$1 = _objectPie.f;
	var _objectToArray = function _objectToArray(isEntries) {
	  return function (it) {
	    var O = _toIobject(it);
	    var keys = _objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!_descriptors || isEnum$1.call(O, key)) {
	        result.push(isEntries ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	// https://github.com/tc39/proposal-object-values-entries

	var $values = _objectToArray(false);

	_export(_export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});

	var values = _core.Object.values;

	// https://github.com/tc39/proposal-object-values-entries

	var $entries = _objectToArray(true);

	_export(_export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});

	var entries = _core.Object.entries;

	_export(_export.P + _export.R, 'Promise', { 'finally': function _finally(onFinally) {
	    var C = _speciesConstructor(this, _core.Promise || _global.Promise);
	    var isFunction = typeof onFinally == 'function';
	    return this.then(isFunction ? function (x) {
	      return _promiseResolve(C, onFinally()).then(function () {
	        return x;
	      });
	    } : onFinally, isFunction ? function (e) {
	      return _promiseResolve(C, onFinally()).then(function () {
	        throw e;
	      });
	    } : onFinally);
	  } });

	var _finally = _core.Promise['finally'];

	// ie9- setTimeout & setInterval additional parameters fix


	var slice = [].slice;
	var MSIE = /MSIE .\./.test(_userAgent); // <- dirty ie9- check
	var wrap$1 = function wrap(set) {
	  return function (fn, time /* , ...args */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : false;
	    return set(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
	    } : fn, time);
	  };
	};
	_export(_export.G + _export.B + _export.F * MSIE, {
	  setTimeout: wrap$1(_global.setTimeout),
	  setInterval: wrap$1(_global.setInterval)
	});

	_export(_export.G + _export.B, {
	  setImmediate: _task.set,
	  clearImmediate: _task.clear
	});

	var ITERATOR$4 = _wks('iterator');
	var TO_STRING_TAG = _wks('toStringTag');
	var ArrayValues = _iterators.Array;

	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};

	for (var collections = _objectKeys(DOMIterables), i$2 = 0; i$2 < collections.length; i$2++) {
	  var NAME$1 = collections[i$2];
	  var explicit = DOMIterables[NAME$1];
	  var Collection = _global[NAME$1];
	  var proto$3 = Collection && Collection.prototype;
	  var key$1;
	  if (proto$3) {
	    if (!proto$3[ITERATOR$4]) _hide(proto$3, ITERATOR$4, ArrayValues);
	    if (!proto$3[TO_STRING_TAG]) _hide(proto$3, TO_STRING_TAG, NAME$1);
	    _iterators[NAME$1] = ArrayValues;
	    if (explicit) for (key$1 in es6_array_iterator) {
	      if (!proto$3[key$1]) _redefine(proto$3, key$1, es6_array_iterator[key$1], true);
	    }
	  }
	}

	var runtime_1 = createCommonjsModule(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */

	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined; // More compressible than void 0.
	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []);

	      // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.
	      generator._invoke = makeInvokeMethod(innerFn, self, context);

	      return generator;
	    }
	    exports.wrap = wrap;

	    // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.
	    function tryCatch(fn, obj, arg) {
	      try {
	        return { type: "normal", arg: fn.call(obj, arg) };
	      } catch (err) {
	        return { type: "throw", arg: err };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed";

	    // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.
	    var ContinueSentinel = {};

	    // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.
	    function Generator() {}
	    function GeneratorFunction() {}
	    function GeneratorFunctionPrototype() {}

	    // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.
	    var IteratorPrototype = {};
	    IteratorPrototype[iteratorSymbol] = function () {
	      return this;
	    };

	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	    GeneratorFunctionPrototype.constructor = GeneratorFunction;
	    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

	    // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.
	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        prototype[method] = function (arg) {
	          return this._invoke(method, arg);
	        };
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction ||
	      // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        if (!(toStringTagSymbol in genFun)) {
	          genFun[toStringTagSymbol] = "GeneratorFunction";
	        }
	      }
	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    };

	    // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.
	    exports.awrap = function (arg) {
	      return { __await: arg };
	    };

	    function AsyncIterator(generator) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);
	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;
	          if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
	            return Promise.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return Promise.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new Promise(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
	        // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      }

	      // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).
	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);
	    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	      return this;
	    };
	    exports.AsyncIterator = AsyncIterator;

	    // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.
	    exports.async = function (innerFn, outerFn, self, tryLocsList) {
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;

	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          }

	          // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;
	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);
	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;

	          var record = tryCatch(innerFn, self, context);
	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted;
	            // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.
	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    }

	    // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.
	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];
	      if (method === undefined) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value;

	        // Resume execution at the desired location (see delegateYield).
	        context.next = delegate.nextLoc;

	        // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.
	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      }

	      // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.
	    defineIteratorMethods(Gp);

	    Gp[toStringTagSymbol] = "Generator";

	    // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.
	    Gp[iteratorSymbol] = function () {
	      return this;
	    };

	    Gp.toString = function () {
	      return "[object Generator]";
	    };

	    function pushTryEntry(locs) {
	      var entry = { tryLoc: locs[0] };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{ tryLoc: "root" }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];
	      for (var key in object) {
	        keys.push(key);
	      }
	      keys.reverse();

	      // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.
	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();
	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        }

	        // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.
	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];
	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined;
	            next.done = true;

	            return next;
	          };

	          return next.next = next;
	        }
	      }

	      // Return an iterator with no values.
	      return { next: doneResult };
	    }
	    exports.values = values;

	    function doneResult() {
	      return { value: undefined, done: true };
	    }

	    Context.prototype = {
	      constructor: Context,

	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0;
	        // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.
	        this.sent = this._sent = undefined;
	        this.done = false;
	        this.delegate = null;

	        this.method = "next";
	        this.arg = undefined;

	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined;
	            }
	          }
	        }
	      },

	      stop: function stop() {
	        this.done = true;

	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;
	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },

	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;
	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },

	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },

	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },

	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },

	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;
	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }
	            return thrown;
	          }
	        }

	        // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.
	        throw new Error("illegal catch attempt");
	      },

	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined;
	        }

	        return ContinueSentinel;
	      }
	    };

	    // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.
	    return exports;
	  }(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	  module.exports);

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	});

	var _global$1 = createCommonjsModule(function (module) {
	  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _core$1 = createCommonjsModule(function (module) {
	  var core = module.exports = { version: '2.6.9' };
	  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1$1 = _core$1.version;

	var _aFunction$1 = function _aFunction(it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx$1 = function _ctx(fn, that, length) {
	  _aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function () /* ...args */{
	    return fn.apply(that, arguments);
	  };
	};

	var _isObject$1 = function _isObject(it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject$1 = function _anObject(it) {
	  if (!_isObject$1(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails$1 = function _fails(exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors$1 = !_fails$1(function () {
	  return Object.defineProperty({}, 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

	var document$3 = _global$1.document;
	// typeof document.createElement is 'object' in old IE
	var is$1 = _isObject$1(document$3) && _isObject$1(document$3.createElement);
	var _domCreate$1 = function _domCreate(it) {
	  return is$1 ? document$3.createElement(it) : {};
	};

	var _ie8DomDefine$1 = !_descriptors$1 && !_fails$1(function () {
	  return Object.defineProperty(_domCreate$1('div'), 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive$1 = function _toPrimitive(it, S) {
	  if (!_isObject$1(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject$1(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject$1(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject$1(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP$6 = Object.defineProperty;

	var f$8 = _descriptors$1 ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject$1(O);
	  P = _toPrimitive$1(P, true);
	  _anObject$1(Attributes);
	  if (_ie8DomDefine$1) try {
	    return dP$6(O, P, Attributes);
	  } catch (e) {/* empty */}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp$1 = {
	  f: f$8
	};

	var _propertyDesc$1 = function _propertyDesc(bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide$1 = _descriptors$1 ? function (object, key, value) {
	  return _objectDp$1.f(object, key, _propertyDesc$1(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty$1 = {}.hasOwnProperty;
	var _has$1 = function _has(it, key) {
	  return hasOwnProperty$1.call(it, key);
	};

	var PROTOTYPE$3 = 'prototype';

	var $export$1 = function $export(type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? _core$1 : _core$1[name] || (_core$1[name] = {});
	  var expProto = exports[PROTOTYPE$3];
	  var target = IS_GLOBAL ? _global$1 : IS_STATIC ? _global$1[name] : (_global$1[name] || {})[PROTOTYPE$3];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && _has$1(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? _ctx$1(out, _global$1)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? function (C) {
	      var F = function F(a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0:
	              return new C();
	            case 1:
	              return new C(a);
	            case 2:
	              return new C(a, b);
	          }return new C(a, b, c);
	        }return C.apply(this, arguments);
	      };
	      F[PROTOTYPE$3] = C[PROTOTYPE$3];
	      return F;
	      // make static versions for prototype methods
	    }(out) : IS_PROTO && typeof out == 'function' ? _ctx$1(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) _hide$1(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export$1.F = 1; // forced
	$export$1.G = 2; // global
	$export$1.S = 4; // static
	$export$1.P = 8; // proto
	$export$1.B = 16; // bind
	$export$1.W = 32; // wrap
	$export$1.U = 64; // safe
	$export$1.R = 128; // real proto method for `library`
	var _export$1 = $export$1;

	// https://github.com/tc39/proposal-global


	_export$1(_export$1.G, { global: _global$1 });

	var global$1 = _core$1.global;

	var lib = createCommonjsModule(function (module) {

	  var _global = _interopRequireDefault(global$1);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	  }

	  if (_global.default._babelPolyfill && typeof console !== "undefined" && console.warn) {
	    console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
	  }

	  _global.default._babelPolyfill = true;
	});

	unwrapExports(lib);

	if (window.NodeList && !NodeList.prototype.forEach) {
	    NodeList.prototype.forEach = function (callback, thisArg) {
	        thisArg = thisArg || window;
	        for (var i = 0; i < this.length; i++) {
	            callback.call(thisArg, this[i], i, this);
	        }
	    };
	}

	// main

	var copy = function copy(source) {
	    switch (typeof source === 'undefined' ? 'undefined' : _typeof(source)) {
	        case 'number':
	        case 'string':
	        case 'function':
	        default:
	            return source;
	        case 'object':
	            if (source === null) {
	                return null;
	            } else if (Array.isArray(source)) {
	                return source.map(function (item) {
	                    return copy(item);
	                });
	            } else if (source instanceof Date) {
	                return source;
	            } else {
	                return Object.keys(source).reduce(function (a, k) {
	                    a[k] = copy(source[k]);
	                    return a;
	                }, {});
	            }
	    }
	};

	var extend = function extend(target, source) {
	    if (target === source) {
	        return target;
	    } else {
	        return Object.keys(source).reduce(function (a, k) {
	            var value = source[k];
	            if (_typeof(a[k]) === 'object' && k in a) {
	                a[k] = extend(a[k], value);
	            } else {
	                a[k] = copy(value);
	            }
	            return a;
	        }, copy(target));
	    }
	};

	var DEFAULT_LANGUAGE = 'rus';

	var Translations$1 = function () {
	    function Translations() {
	        classCallCheck(this, Translations);

	        this._hash = {};
	    }

	    createClass(Translations, [{
	        key: 'setLanguage',
	        value: function setLanguage(lang) {
	            this._language = lang;
	        }
	    }, {
	        key: 'getLanguage',
	        value: function getLanguage() {
	            return window.language || this._language || DEFAULT_LANGUAGE;
	        }
	    }, {
	        key: 'addText',
	        value: function addText(lang, tran) {
	            this._hash[lang] = extend(this._hash[lang] || {}, tran);
	            return this;
	        }
	    }, {
	        key: 'getText',
	        value: function getText(key) {
	            if (key && typeof key === 'string') {
	                var locale = this._hash[this.getLanguage()];
	                if (locale) {
	                    return key.split('.').reduce(function (a, k) {
	                        return a[k];
	                    }, locale);
	                }
	            }
	            return null;
	        }
	    }]);
	    return Translations;
	}();

	window.Scanex = window.Scanex || {};
	window.Scanex.Translations = window.Scanex.Translations || {};
	window.Scanex.translations = window.Scanex.translations || new Translations$1();

	var Translations$2 = window.Scanex.translations;

	var HOME_LINK = '//my.kosmosnimki.ru/Home/Settings';

	var ACCESS_LAYER_ID = '9077D16CFE374967A8C57C78095F34EA';
	var ACCESS_USER_ROLE = 'scanex';

	var LOCAL_STORAGE_KEY = 'view_state';
	var RESULT_MAX_COUNT_PLUS_ONE = 1001;

	var MAX_CART_SIZE = 200;

	var MAX_UPLOAD_OBJECTS = 200;
	var MAX_UPLOAD_POINTS = 100000;

	var LAYER_ID = '9B4733A8CBE942CE9F5E70DCAA6C1FBE'; // 'AFB4D363768E4C5FAC71C9B0C6F7B2F4'

	var DEFAULT_LANGUAGE$1 = 'rus';

	var NON_EDIT_LINE_STYLE = {
	    fill: false,
	    weight: 2,
	    opacity: 1
	};

	var TAB_SEARCH_NAME = 'search';
	var TAB_RESULTS_NAME = 'results';
	var TAB_FAVORITES_NAME = 'favorites';

	var VERSION_PATH = 'dist/version-';

	var NOTIFICATION_HIDE_TIMEOUT = 2000;

	var MAP_CONTAINER_ID = 'map';

	var MAP_INIT_SETTINGS = {
	    center: new L.LatLng(55.634508, 37.433167),
	    minZoom: 1,
	    maxZoom: 17,
	    zoom: 3,
	    boxZoom: false,
	    srs: 3857,
	    skipTiles: 'All',
	    ftc: 'osm',
	    attributionControl: false,
	    zoomControl: false,
	    squareUnit: 'km2',
	    distanceUnit: 'km',
	    maxBounds: L.latLngBounds(L.latLng(-100, -360), L.latLng(100, 360))
	};

	var MAP_SVG_SPRITE = false;

	var LOAD_MAP_ID = '1CB019F36D024831972F3029B724D7CA';

	var LOAD_MAP_PARAMS = {
	    apiKey: 'Z2SSNR87N4', //'A07FEB777402A559A7DE8BC6CA7C2E96',
	    srs: 3857,
	    skipTiles: 'All',
	    ftc: 'osm'
	};

	var EAST_HEMISPHERE = L.bounds(L.point(0, -90), L.point(180, 90));

	var WEST_HEMISPHERE = L.bounds(L.point(180, -90), L.point(360, 90));

	var WEST_HEMISPHERE2 = L.bounds(L.point(-180, -90), L.point(0, 90));

	var QUICKLOOK = {
	    url: '//search.kosmosnimki.ru/QuickLookImage.ashx',
	    width: 600,
	    height: 600
	};

	var PANCHROME_IDS = [/*'WV01',*/'RP_PC', 'SP5_5PC', 'EROSB', 'EROSA'];

	Translations$2.addText('rus', {
	    aoi: 'Область интереса',
	    controls: {
	        point: 'Маркер',
	        polygon: 'Полигон',
	        polyline: 'Линия',
	        print: 'Печать',
	        permalink: 'Постоянная ссылка',
	        rectangle: 'Прямоугольник',
	        download: 'Скачать',
	        upload: 'Загрузить',
	        zoom: 'Увеличение',
	        search: 'Поиск по кадастру, адресам, координатам'
	    },
	    results: {
	        title: 'Найденные снимки',
	        favorites: 'Корзина',
	        sceneid: 'ID',
	        date: 'Дата',
	        satellite: 'Спутник',
	        clouds: 'Обл.',
	        angle: 'Угол',
	        stereo: 'Стерео',
	        clear: 'Очистить список',
	        clearFilter: 'Очистить фильтр',
	        selected: 'Показывать выбранные / все',
	        quicklooks: {
	            select: 'Выбрать квиклуки',
	            toggle: 'Показать / скрыть выбранные квиклуки',
	            cart: 'Поместить видимые в корзину'
	        },
	        download: 'Количество найденных снимков превышает установленный порог.<br/>Хотите скачать их в виде шейп-файла?',
	        change: 'Количество найденных снимков превышает установленный порог.<br/>Измените критерий поиска.'
	    },
	    favorites: {
	        limit: '\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0441\u043D\u0438\u043C\u043A\u043E\u0432 \u0432 \u043A\u043E\u0440\u0437\u0438\u043D\u0435 - ' + MAX_CART_SIZE,
	        delete: 'Удалить выделенные'
	    },
	    boolean: {
	        true: 'Да',
	        false: 'Нет'
	    },
	    units: {
	        m: 'м',
	        km: 'км'
	    },
	    alerts: {
	        title: 'Внимание',
	        clear: 'Удалить найденные снимки?',
	        cancel: 'Отмена',
	        close: 'Закрыть',
	        authenticate: 'Для оформления заказа необходимо:',
	        ok: 'ОК',
	        login: 'Войти в систему',
	        clipboard: 'Копировать ссылку',
	        permalink: 'Постоянная ссылка скопирована в буфер обмена',
	        nothing: 'Ничего не найдено',
	        addToDrawingsHeader: 'Выберите колонку для названий объектов',
	        addToDrawings: 'Добавить',
	        wrongDrawings: 'Загруженные данные некорректны',
	        wait: 'Подождите, идет загрузка...'
	    },
	    search: {
	        title: 'Параметры поиска',
	        action: 'Найти снимки'
	    },
	    cart: {
	        add: 'Оформить заказ'
	    },
	    download: {
	        type: 'Состав',
	        file: 'Имя файла',
	        borders: 'Границы поиска',
	        results: 'Результаты поиска: контуры',
	        cart: 'Корзина: контуры',
	        quicklooks: 'Корзина: контуры и квиклуки',
	        ok: 'Скачать',
	        cancel: 'Отмена',
	        noname: 'Без имени',
	        noresults: 'Нет объектов для скачивания',
	        empty: "Нет объектов",
	        rcsv: 'Результаты поиска: метаданные (csv)',
	        ccsv: 'Корзина: метаданные (csv)'
	    },
	    errors: {
	        permalink: 'Произошла ошибка при загрузке ссылки',
	        upload: 'Произошла ошибка при загрузке файла.',
	        points: '\u0424\u0430\u0439\u043B \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043E\u043B\u0435\u0435 ' + MAX_UPLOAD_OBJECTS + ' \u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u0438/\u0438\u043B\u0438 \u0431\u043E\u043B\u0435\u0435 ' + MAX_UPLOAD_POINTS + ' \u0442\u043E\u0447\u0435\u043A'
	    }
	});

	Translations$2.addText('eng', {
	    aoi: 'Area of interest',
	    controls: {
	        point: 'Marker',
	        polygon: 'Polygon',
	        polyline: 'Polyline',
	        print: 'Print',
	        permalink: 'Permalink',
	        rectangle: 'Rectangle',
	        download: 'Download',
	        upload: 'Upload',
	        zoom: 'Zoom',
	        search: 'Search by cadastre, address and coordinates'
	    },
	    results: {
	        title: 'Found images',
	        favorites: 'Cart',
	        sceneid: 'ID',
	        date: 'Date',
	        satellite: 'Satellite',
	        clouds: 'Clouds',
	        angle: 'Angle',
	        stereo: 'Stereo',
	        controls: {
	            print: 'Print',
	            permalink: 'Permalink',
	            zoom: 'Zoom'
	        },
	        clear: 'Clear results',
	        clearFilter: 'Clear filter',
	        selected: 'Show selected / all',
	        quicklooks: {
	            select: 'Select quicklooks',
	            toggle: 'Show / hide selected quicklooks',
	            cart: 'Add visible to cart'
	        },
	        download: 'Results exceed allowed items amount.<br/>Do you want to download them in a shape-file?',
	        change: 'Results exceed allowed items amount.<br/>Change the criteria to limit the search.'
	    },
	    favorites: {
	        limit: 'No more than ' + MAX_CART_SIZE + ' elements are allowed in the cart',
	        delete: 'Remove selected'
	    },
	    boolean: {
	        true: 'Yes',
	        false: 'No'
	    },
	    units: {
	        m: 'm',
	        km: 'km'
	    },
	    alerts: {
	        title: 'Warning',
	        clear: 'Remove found images?',
	        cancel: 'Cancel',
	        close: 'Close',
	        authenticate: 'To place order<br/>you need to login',
	        ok: 'OK',
	        login: 'Login',
	        clipboard: 'Copy to to clipboard',
	        permalink: 'Permalink saved to clipboard',
	        nothing: 'Nothing found',
	        addToDrawingsHeader: 'Select column as an object name',
	        addToDrawings: 'Add',
	        wrongDrawings: 'Wrong data was loaded',
	        wait: 'Loading, wait please...'
	    },
	    search: {
	        title: 'Search options',
	        action: 'Search'
	    },
	    cart: {
	        add: 'Place an order'
	    },
	    download: {
	        type: 'Download contents',
	        file: 'File name',
	        borders: 'Search borders',
	        results: 'Results: contours',
	        cart: 'Cart: contours',
	        quicklooks: 'Cart: contours and quicklooks',
	        ok: 'Download',
	        cancel: 'Cancel',
	        noname: 'No name',
	        noresults: 'No objects to download',
	        empty: "Can't download. No objects",
	        rcsv: 'Results: metadata as .csv',
	        ccsv: 'Cart: metadata as .csv'
	    },
	    errors: {
	        permalink: 'Error while loading permalik',
	        upload: 'Vector data upload error:',
	        points: 'there are more than ' + MAX_UPLOAD_OBJECTS + ' objects or/and more than ' + MAX_UPLOAD_POINTS + ' points in the file'
	    }
	});

	Translations$2.addText('rus', {
	    operator: {
	        dg: 'Digital Globe, США',
	        airbus: 'Airbus Defence & Space, Франция',
	        siis: 'SI Imaging Services (SIIS), Южная Корея',
	        ge: 'GeoEye, США',
	        iinv: 'ImageSat International, N.V., Израиль',
	        spaceview: 'Beijing Space View Technology Co., Ltd (Space View), КНР',
	        vniiem: 'ФГУП "НПП ВНИИЭМ", Беларусь',
	        blackbridge: 'BlackBridge AG, ФРГ',
	        usgs: 'United States Geological Survey, США',
	        roskosmos: 'Роскосмос',
	        twentyfirst: 'Twenty First Century AT, China'
	    }
	});

	Translations$2.addText('eng', {
	    operator: {
	        dg: 'Digital Globe, USA',
	        airbus: 'Airbus Defence & Space, France',
	        siis: 'SI Imaging Services (SIIS), South Korea',
	        ge: 'GeoEye, USA',
	        iinv: 'ImageSat International, N.V., Israel',
	        spaceview: 'Beijing Space View Technology Co., Ltd (Space View), China',
	        vniiem: 'ФГУП "НПП ВНИИЭМ", Belarus',
	        blackbridge: 'BlackBridge AG, Germany',
	        usgs: 'United States Geological Survey, USA',
	        roskosmos: 'Roskosmos',
	        twentyfirst: 'Twenty First Century AT, China'
	    }
	});

	Translations$2.addText('rus', {
	    about: {
	        version: 'Версия',
	        news: 'Что нового',
	        help: 'Инструкция пользователя'
	    }

	});

	Translations$2.addText('eng', {
	    about: {
	        version: 'Version',
	        news: "What's new",
	        help: "User's guide"
	    }

	});

	Translations$2.addText('rus', {
	    objects: {
	        title: 'Объекты',
	        polygon: 'Многоугольник',
	        line: 'Линия',
	        point: 'Точка'
	    },
	    name: 'Название',
	    area: 'Характеристика',
	    color: 'Цвет'
	});

	Translations$2.addText('eng', {
	    objects: {
	        title: 'Objects',
	        polygon: 'Polygon',
	        line: 'Line',
	        point: 'Point'
	    },
	    name: 'Name',
	    area: 'Data',
	    color: 'Color'
	});

	Translations$2.addText('rus', {
	    satellite: {
	        global: 'Внешние',
	        local: 'Внутренние',
	        ms: 'Мультиспектр',
	        pc: 'Панхром',
	        resolution: 'Разрешение',
	        swath: 'Ширина полосы съемки',
	        since: 'На орбите:'
	    }
	});

	Translations$2.addText('eng', {
	    satellite: {
	        global: 'Global',
	        local: 'Local',
	        ms: 'Multispectrum',
	        pc: 'Panchrome',
	        resolution: 'Resolution',
	        swath: 'Swath',
	        since: 'In orbit since'
	    }
	});

	Translations$2.addText('rus', {
	    period: {
	        title: 'Период',
	        from: 'с',
	        to: 'по',
	        annually: 'Данные за каждый год'
	    },
	    clouds: 'Облачность, %',
	    angle: 'Угол съемки, °',
	    resolution: {
	        title: 'Детальность, м/пиксель',
	        unit: 'м/пиксель'
	    },
	    satellites: 'Спутники',
	    archive: {
	        title: 'Архив',
	        local: 'внутренний',
	        global: 'глобальный',
	        all: 'весь'
	    },
	    stereo: 'только стерео',
	    maximize: 'Показать',
	    minimize: 'Свернуть'
	});

	Translations$2.addText('eng', {
	    period: {
	        title: 'Period',
	        from: 'from',
	        to: 'to',
	        annually: 'annually'
	    },
	    clouds: 'Cloudiness, %',
	    angle: 'View angle, °',
	    resolution: {
	        title: 'Resolution, m/px',
	        unit: 'm/px'
	    },
	    satellites: 'Satellites',
	    archive: {
	        title: 'Archive',
	        local: 'local',
	        global: 'global',
	        all: 'all'
	    },
	    stereo: 'stereo only',
	    maximize: 'Maximize',
	    minimize: 'Minimize'
	});

	Translations$2.addText('rus', {
	    results: {
	        title: 'Найденные снимки',
	        sceneid: 'ID',
	        date: 'Дата',
	        satellite: 'Спутник',
	        clouds: 'Обл.',
	        angle: 'Угол',
	        stereo: 'Стерео',
	        visibility: 'Видимость',
	        cart: 'Добавить все в корзину'
	    },
	    warning: {
	        title: 'Внимание'
	    }
	});

	Translations$2.addText('eng', {
	    results: {
	        title: 'Found images',
	        sceneid: 'ID',
	        date: 'Date',
	        satellite: 'Satellite',
	        clouds: 'Clouds',
	        angle: 'Angle',
	        stereo: 'Stereo',
	        visibility: 'Visibility',
	        cart: 'Add all to cart'
	    },
	    warning: {
	        title: 'Warning'
	    }
	});

	Translations$2.addText('rus', {
	    quicklook: 'Открыть квиклук'
	});
	Translations$2.addText('eng', {
	    quicklook: 'Open quicklook'
	});

	Translations$2.addText('rus', {
	    cart: {
	        title: 'Корзина',
	        clear: 'Очистить корзину',
	        back: 'Назад',
	        order: 'Перейти к оформлению заказа',
	        warning: 'Для редактирования контактной информации воспользуйтесь <label class="link">ссылкой</label>.\r\nПосле этого необходимо снова зайти в систему.',
	        customer: 'Организация (заказчик)',
	        project: {
	            name: 'Название проекта',
	            type: {
	                title: 'Тип проекта',
	                commercial: 'Коммерческий',
	                internal: 'Внутренний',
	                presale: 'Пресейл'
	            },
	            number: '№ Договора-контракта'
	        },
	        person: 'Имя и фамилия',
	        company: 'Компания',
	        email: 'Электронная почта',
	        comment: 'Комментарий',
	        header: 'Оформление заказа',
	        submit: 'Заказать',
	        close: 'Закрыть',
	        success: {
	            header: 'Благодарим за оформление заказа!',
	            content: 'На адрес электронной почты, указанный при регистрации было отправлено сообщение с ссылкой на детали заказа.',
	            footer: 'В ближайшее время мы свяжемся с Вами и дадим подробную информацию о стоимости и характеристиках.'
	        },
	        invalid: 'Данное поле обязательно для заполнения'
	    }
	});

	Translations$2.addText('eng', {
	    cart: {
	        title: 'Cart',
	        clear: 'Clear',
	        back: 'Back',
	        order: 'To order',
	        warning: 'To edit contact information use the link #. Afterwards it is necessary to login.',
	        customer: 'Organization (customer)',
	        project: {
	            name: 'Project name',
	            type: {
	                title: 'Project type',
	                commercial: 'Commercial',
	                internal: 'Internal',
	                presale: 'Presale'
	            },
	            number: 'Project number'
	        },
	        person: 'Name',
	        company: 'Company',
	        email: 'Email',
	        comment: 'Comment',
	        header: 'Place an order',
	        submit: 'Submit',
	        close: 'Close',
	        success: {
	            header: 'Thank you for order!',
	            content: 'An email with the permanent link to your query has been sent to your address.',
	            footer: 'We will soon send you more information concerning the cost and details.'
	        },
	        invalid: 'This field is required'
	    }
	});

	var Satellite = function () {
	    function Satellite(_ref) {
	        var id = _ref.id,
	            platforms = _ref.platforms,
	            name = _ref.name,
	            resolution = _ref.resolution,
	            swath = _ref.swath,
	            operator = _ref.operator,
	            since = _ref.since,
	            _ref$ms = _ref.ms,
	            ms = _ref$ms === undefined ? true : _ref$ms,
	            _ref$arity = _ref.arity,
	            arity = _ref$arity === undefined ? 1 : _ref$arity,
	            _ref$restricted = _ref.restricted,
	            restricted = _ref$restricted === undefined ? false : _ref$restricted,
	            _ref$checked = _ref.checked,
	            checked = _ref$checked === undefined ? false : _ref$checked,
	            _ref$endingDate = _ref.endingDate,
	            endingDate = _ref$endingDate === undefined ? null : _ref$endingDate;
	        classCallCheck(this, Satellite);

	        this._id = id;
	        this._platforms = platforms;
	        this._name = name;
	        this._resolution = resolution;
	        this._swath = swath;
	        this._operator = operator;
	        this._since = since;
	        this._arity = arity;
	        this._ms = ms;
	        this._restricted = restricted;
	        this._checked = checked;
	        this._endingDate = endingDate;
	    }

	    createClass(Satellite, [{
	        key: 'islocal',
	        value: function islocal(archive) {
	            switch (archive) {
	                case 'global':
	                    return ' AND islocal = FALSE';
	                case 'local':
	                    return ' AND islocal = TRUE';
	                default:
	                case 'all':
	                    return '';
	            }
	        }
	    }, {
	        key: 'condition',
	        value: function condition(archive) {
	            return 'platform IN (' + this.platforms.map(function (x) {
	                return '\'' + x + '\'';
	            }).join(',') + ')' + this.islocal(archive);
	        }
	    }, {
	        key: 'id',
	        get: function get$$1() {
	            return this._id;
	        }
	    }, {
	        key: 'platforms',
	        get: function get$$1() {
	            return this._platforms;
	        }
	    }, {
	        key: 'name',
	        get: function get$$1() {
	            return this._name;
	        }
	    }, {
	        key: 'resolution',
	        get: function get$$1() {
	            return this._resolution;
	        }
	    }, {
	        key: 'swath',
	        get: function get$$1() {
	            return this._swath;
	        }
	    }, {
	        key: 'operator',
	        get: function get$$1() {
	            return this._operator;
	        }
	    }, {
	        key: 'since',
	        get: function get$$1() {
	            return this._since;
	        }
	    }, {
	        key: 'arity',
	        get: function get$$1() {
	            return this._arity;
	        }
	    }, {
	        key: 'ms',
	        get: function get$$1() {
	            return this._ms;
	        }
	    }, {
	        key: 'restricted',
	        get: function get$$1() {
	            return this._restricted;
	        }
	    }, {
	        key: 'checked',
	        get: function get$$1() {
	            return this._checked;
	        },
	        set: function set$$1(value) {
	            this._checked = value;
	        }
	    }, {
	        key: 'endingDate',
	        get: function get$$1() {
	            return this._endingDate;
	        },
	        set: function set$$1(value) {
	            this._endingDate = value;
	        }
	    }]);
	    return Satellite;
	}();

	var DG = function (_Satellite) {
	    inherits(DG, _Satellite);

	    function DG(_ref2) {
	        var id = _ref2.id,
	            platforms = _ref2.platforms,
	            name = _ref2.name,
	            resolution = _ref2.resolution,
	            swath = _ref2.swath,
	            since = _ref2.since,
	            ms = _ref2.ms,
	            endingDate = _ref2.endingDate;
	        classCallCheck(this, DG);
	        return possibleConstructorReturn(this, (DG.__proto__ || Object.getPrototypeOf(DG)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: Translations$2.getText('operator.dg'), since: since, ms: ms, endingDate: endingDate }));
	    }

	    createClass(DG, [{
	        key: 'condition',
	        value: function condition(archive) {

	            if (archive === 'local') {
	                return '';
	            }

	            return 'platform IN (' + this.platforms.map(function (x) {
	                return '\'' + x + '\'';
	            }).join(',') + ') AND islocal = FALSE';
	        }
	    }]);
	    return DG;
	}(Satellite);

	var KOMPSAT = function (_Satellite2) {
	    inherits(KOMPSAT, _Satellite2);

	    function KOMPSAT(_ref3) {
	        var id = _ref3.id,
	            platforms = _ref3.platforms,
	            name = _ref3.name,
	            resolution = _ref3.resolution,
	            swath = _ref3.swath,
	            since = _ref3.since;
	        classCallCheck(this, KOMPSAT);
	        return possibleConstructorReturn(this, (KOMPSAT.__proto__ || Object.getPrototypeOf(KOMPSAT)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: Translations$2.getText('operator.siis'), since: since }));
	    }

	    return KOMPSAT;
	}(Satellite);

	var SpaceView = function (_Satellite3) {
	    inherits(SpaceView, _Satellite3);

	    function SpaceView(_ref4) {
	        var id = _ref4.id,
	            platforms = _ref4.platforms,
	            name = _ref4.name,
	            resolution = _ref4.resolution,
	            swath = _ref4.swath,
	            arity = _ref4.arity,
	            since = _ref4.since,
	            _ref4$restricted = _ref4.restricted,
	            restricted = _ref4$restricted === undefined ? true : _ref4$restricted;
	        classCallCheck(this, SpaceView);
	        return possibleConstructorReturn(this, (SpaceView.__proto__ || Object.getPrototypeOf(SpaceView)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: Translations$2.getText('operator.spaceview'), arity: arity, since: since, restricted: restricted }));
	    }

	    return SpaceView;
	}(Satellite);

	var GF1 = function (_SpaceView) {
	    inherits(GF1, _SpaceView);

	    function GF1(_ref5) {
	        var id = _ref5.id,
	            platforms = _ref5.platforms,
	            name = _ref5.name,
	            resolution = _ref5.resolution,
	            swath = _ref5.swath,
	            since = _ref5.since,
	            sensor = _ref5.sensor;
	        classCallCheck(this, GF1);

	        var _this4 = possibleConstructorReturn(this, (GF1.__proto__ || Object.getPrototypeOf(GF1)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, since: since }));

	        _this4._sensor = sensor;
	        _this4._restricted = false;
	        return _this4;
	    }

	    createClass(GF1, [{
	        key: 'condition',
	        value: function condition(archive) {
	            return get(GF1.prototype.__proto__ || Object.getPrototypeOf(GF1.prototype), 'condition', this).call(this, archive) + ' AND sensor = \'' + this.sensor + '\'';
	        }
	    }, {
	        key: 'sensor',
	        get: function get$$1() {
	            return this._sensor;
	        }
	    }]);
	    return GF1;
	}(SpaceView);

	var SV1 = function (_SpaceView2) {
	    inherits(SV1, _SpaceView2);

	    function SV1() {
	        classCallCheck(this, SV1);

	        var _this5 = possibleConstructorReturn(this, (SV1.__proto__ || Object.getPrototypeOf(SV1)).call(this, { id: 'SV1', platforms: ['GJ1A', 'GJ1B', 'GJ1C', 'GJ1D'], name: 'SuperView-1 01-04', resolution: 0.5, swath: 12, arity: 4, since: '26.12.2016, 09.01.2018' }));

	        _this5._restricted = false;
	        return _this5;
	    }

	    return SV1;
	}(SpaceView);

	var Airbus = function (_Satellite4) {
	    inherits(Airbus, _Satellite4);

	    function Airbus(_ref6) {
	        var id = _ref6.id,
	            platforms = _ref6.platforms,
	            name = _ref6.name,
	            resolution = _ref6.resolution,
	            swath = _ref6.swath,
	            since = _ref6.since,
	            arity = _ref6.arity,
	            ms = _ref6.ms,
	            endingDate = _ref6.endingDate;
	        classCallCheck(this, Airbus);
	        return possibleConstructorReturn(this, (Airbus.__proto__ || Object.getPrototypeOf(Airbus)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: Translations$2.getText('operator.airbus'), since: since, arity: arity, ms: ms, endingDate: endingDate }));
	    }

	    return Airbus;
	}(Satellite);

	var PHR = function (_Airbus) {
	    inherits(PHR, _Airbus);

	    function PHR() {
	        classCallCheck(this, PHR);
	        return possibleConstructorReturn(this, (PHR.__proto__ || Object.getPrototypeOf(PHR)).call(this, { id: 'PHR', platforms: ['PHR1A', 'PHR1B', '1A_PM', '1B_PM', 'PHR-1A', 'PHR-1B'], name: 'Pléiades-1A/1B', resolution: 0.5, swath: 20, since: '2011, 2012', arity: 2 }));
	    }

	    createClass(PHR, [{
	        key: 'condition',
	        value: function condition(archive) {
	            switch (archive) {
	                case 'all':
	                    return "platform IN ('PHR1A','PHR1B','1A_PM','1B_PM','PHR-1A','PHR-1B')";
	                case 'local':
	                    return "platform IN ('1A_PM','1B_PM','PHR-1A','PHR-1B')";
	                case 'global':
	                default:
	                    return get(PHR.prototype.__proto__ || Object.getPrototypeOf(PHR.prototype), 'condition', this).call(this, archive);
	            }
	        }
	    }]);
	    return PHR;
	}(Airbus);

	var PLD_1A = function (_Airbus2) {
	    inherits(PLD_1A, _Airbus2);

	    function PLD_1A() {
	        classCallCheck(this, PLD_1A);
	        return possibleConstructorReturn(this, (PLD_1A.__proto__ || Object.getPrototypeOf(PLD_1A)).call(this, { id: '1A_PHR', platforms: ['1A-PHR-1A', '1A-PHR-1B'], name: '1ATLAS (PLD)', resolution: 0.5, swath: 20, since: '2011, 2012', arity: 2 }));
	    }

	    createClass(PLD_1A, [{
	        key: 'condition',
	        value: function condition(archive) {
	            return "platform IN ('1A-PHR-1A','1A-PHR-1B')";
	        }
	    }, {
	        key: 'restricted',
	        get: function get$$1() {
	            return true;
	        }
	    }]);
	    return PLD_1A;
	}(Airbus);

	var SP5_10MS = function (_Airbus3) {
	    inherits(SP5_10MS, _Airbus3);

	    function SP5_10MS() {
	        classCallCheck(this, SP5_10MS);
	        return possibleConstructorReturn(this, (SP5_10MS.__proto__ || Object.getPrototypeOf(SP5_10MS)).call(this, { id: 'SP5_10MS', platforms: ['SPOT 5'], name: 'SPOT 5 (10 м)', resolution: 10, swath: 20, since: '2002 - 2015', endingDate: '2015' }));
	    }

	    createClass(SP5_10MS, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return 'platform = \'SPOT 5\' AND sensor = \'J\'' + (authorized ? this.islocal(archive) : '');
	        }
	    }]);
	    return SP5_10MS;
	}(Airbus);

	var SP5_5MS = function (_Airbus4) {
	    inherits(SP5_5MS, _Airbus4);

	    function SP5_5MS() {
	        classCallCheck(this, SP5_5MS);
	        return possibleConstructorReturn(this, (SP5_5MS.__proto__ || Object.getPrototypeOf(SP5_5MS)).call(this, { id: 'SP5_5MS', platforms: ['SPOT 5'], name: 'SPOT 5 (5 м)', resolution: 5, swath: 20, since: '2002 - 2015' }));
	    }

	    createClass(SP5_5MS, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return 'platform = \'SPOT 5\' AND (sensor = \'J\' AND (spot5_a_exists = TRUE OR spot5_b_exists = TRUE))' + (authorized ? this.islocal(archive) : '');
	        }
	    }]);
	    return SP5_5MS;
	}(Airbus);

	var SP5_5PC = function (_SP5_5MS) {
	    inherits(SP5_5PC, _SP5_5MS);

	    function SP5_5PC() {
	        classCallCheck(this, SP5_5PC);

	        var _this11 = possibleConstructorReturn(this, (SP5_5PC.__proto__ || Object.getPrototypeOf(SP5_5PC)).call(this));

	        _this11._id = 'SP5_5PC';
	        _this11._ms = false;
	        return _this11;
	    }

	    createClass(SP5_5PC, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return 'platform = \'SPOT 5\' AND (sensor = \'A\' OR sensor = \'B\' AND spot5_b_exists = FALSE)' + (authorized ? this.islocal(archive) : '');
	        }
	    }]);
	    return SP5_5PC;
	}(SP5_5MS);

	var SP5_2MS = function (_Airbus5) {
	    inherits(SP5_2MS, _Airbus5);

	    function SP5_2MS() {
	        classCallCheck(this, SP5_2MS);
	        return possibleConstructorReturn(this, (SP5_2MS.__proto__ || Object.getPrototypeOf(SP5_2MS)).call(this, { id: 'SP5_2MS', platforms: ['SPOT 5'], name: 'SPOT 5 (2.5 м)', resolution: 2.5, swath: 20, since: '2002 - 2015' }));
	    }

	    createClass(SP5_2MS, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return 'platform = \'SPOT 5\' AND sensor = \'J\' AND spot5_a_exists = TRUE AND spot5_b_exists = TRUE' + (authorized ? this.islocal(archive) : '');
	        }
	    }]);
	    return SP5_2MS;
	}(Airbus);

	var SP5_2PC = function (_SP5_2MS) {
	    inherits(SP5_2PC, _SP5_2MS);

	    function SP5_2PC() {
	        classCallCheck(this, SP5_2PC);

	        var _this13 = possibleConstructorReturn(this, (SP5_2PC.__proto__ || Object.getPrototypeOf(SP5_2PC)).call(this));

	        _this13._id = 'SP5_2PC';
	        _this13._ms = false;
	        return _this13;
	    }

	    createClass(SP5_2PC, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return 'platform = \'SPOT 5\' AND sensor = \'A\' AND spot5_b_exists = TRUE' + (authorized ? this.islocal(archive) : '');
	        }
	    }]);
	    return SP5_2PC;
	}(SP5_2MS);

	var SP6_7 = function (_Airbus6) {
	    inherits(SP6_7, _Airbus6);

	    function SP6_7() {
	        classCallCheck(this, SP6_7);
	        return possibleConstructorReturn(this, (SP6_7.__proto__ || Object.getPrototypeOf(SP6_7)).call(this, { id: 'SP6_7', platforms: ['SPOT6', 'SPOT 6', 'SPOT7', 'SPOT 7'], name: 'SPOT 6/7', resolution: 1.5, swath: 60, since: '2012, 2014', arity: 2 }));
	    }

	    createClass(SP6_7, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return 'platform IN (\'SPOT6\',\'SPOT 6\',\'SPOT7\',\'SPOT 7\')' + (authorized ? this.islocal(archive) : '');
	        }
	    }]);
	    return SP6_7;
	}(Airbus);

	var SP6_7_1A = function (_Airbus7) {
	    inherits(SP6_7_1A, _Airbus7);

	    function SP6_7_1A() {
	        classCallCheck(this, SP6_7_1A);
	        return possibleConstructorReturn(this, (SP6_7_1A.__proto__ || Object.getPrototypeOf(SP6_7_1A)).call(this, { id: '1A_SP6_7', platforms: ['1A-SPOT-6', '1A-SPOT-7'], name: '1ATLAS (SP)', resolution: 1.5, swath: 60, since: '2012, 2014', arity: 2 }));
	    }

	    createClass(SP6_7_1A, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return "platform IN ('1A-SPOT-6','1A-SPOT-7')";
	        }
	    }, {
	        key: 'restricted',
	        get: function get$$1() {
	            return true;
	        }
	    }]);
	    return SP6_7_1A;
	}(Airbus);

	var SP67_P = function (_Airbus8) {
	    inherits(SP67_P, _Airbus8);

	    function SP67_P() {
	        classCallCheck(this, SP67_P);
	        return possibleConstructorReturn(this, (SP67_P.__proto__ || Object.getPrototypeOf(SP67_P)).call(this, { id: 'SP67_P', platforms: ['SPOT-6', 'SPOT-7'], name: 'SPOT-6/7-P', resolution: 1.5, swath: 60, since: '2012, 2014', arity: 2 }));
	    }

	    createClass(SP67_P, [{
	        key: 'condition',
	        value: function condition(archive, authorized) {
	            return "platform IN ('SPOT-6','SPOT-7') AND product = TRUE";
	        }
	    }, {
	        key: 'restricted',
	        get: function get$$1() {
	            return true;
	        }
	    }]);
	    return SP67_P;
	}(Airbus);

	var EROS = function (_Satellite5) {
	    inherits(EROS, _Satellite5);

	    function EROS(_ref7) {
	        var id = _ref7.id,
	            platforms = _ref7.platforms,
	            name = _ref7.name,
	            resolution = _ref7.resolution,
	            swath = _ref7.swath,
	            since = _ref7.since;
	        classCallCheck(this, EROS);
	        return possibleConstructorReturn(this, (EROS.__proto__ || Object.getPrototypeOf(EROS)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: Translations$2.getText('operator.iinv'), restricted: true, since: since, ms: false }));
	    }

	    return EROS;
	}(Satellite);

	var RP = function (_Satellite6) {
	    inherits(RP, _Satellite6);

	    function RP(_ref8) {
	        var id = _ref8.id,
	            platforms = _ref8.platforms,
	            name = _ref8.name,
	            ms = _ref8.ms;
	        classCallCheck(this, RP);
	        return possibleConstructorReturn(this, (RP.__proto__ || Object.getPrototypeOf(RP)).call(this, { id: id, platforms: platforms, name: name, resolution: 1, swath: 38, operator: Translations$2.getText('operator.roskosmos'), arity: 3, since: '2013, 2014, 2016', ms: ms }));
	    }

	    createClass(RP, [{
	        key: 'condition',
	        value: function condition(archive) {
	            return get(RP.prototype.__proto__ || Object.getPrototypeOf(RP.prototype), 'condition', this).call(this, archive) + ' AND sensor = \'\u0421\u041F\u041F\u0418 "\u0421\u0430\u043D\u0433\u0443\u0440-1\u0423"\'';
	        }
	    }]);
	    return RP;
	}(Satellite);

	var RP_PC = function (_RP) {
	    inherits(RP_PC, _RP);

	    function RP_PC() {
	        classCallCheck(this, RP_PC);
	        return possibleConstructorReturn(this, (RP_PC.__proto__ || Object.getPrototypeOf(RP_PC)).call(this, { id: 'RP_PC', platforms: ['Ресурс-П1', 'Ресурс-П2', 'Ресурс-П3'], name: 'Ресурс-П', ms: false }));
	    }

	    createClass(RP_PC, [{
	        key: 'condition',
	        value: function condition(archive) {
	            return get(RP_PC.prototype.__proto__ || Object.getPrototypeOf(RP_PC.prototype), 'condition', this).call(this, archive) + ' AND spot5_a_exists = TRUE AND spot5_b_exists = FALSE';
	        }
	    }]);
	    return RP_PC;
	}(RP);

	var RP_1MS = function (_RP2) {
	    inherits(RP_1MS, _RP2);

	    function RP_1MS() {
	        classCallCheck(this, RP_1MS);
	        return possibleConstructorReturn(this, (RP_1MS.__proto__ || Object.getPrototypeOf(RP_1MS)).call(this, { id: 'RP_1MS', platforms: ['Ресурс-П1', 'Ресурс-П2', 'Ресурс-П3'], name: 'Ресурс-П 1-3 (1 м)', resolution: 1, ms: true }));
	    }

	    createClass(RP_1MS, [{
	        key: 'condition',
	        value: function condition(archive) {
	            return get(RP_1MS.prototype.__proto__ || Object.getPrototypeOf(RP_1MS.prototype), 'condition', this).call(this, archive) + ' AND spot5_a_exists = TRUE AND spot5_b_exists = TRUE';
	        }
	    }]);
	    return RP_1MS;
	}(RP);

	var RP_4MS = function (_RP3) {
	    inherits(RP_4MS, _RP3);

	    function RP_4MS() {
	        classCallCheck(this, RP_4MS);

	        var _this21 = possibleConstructorReturn(this, (RP_4MS.__proto__ || Object.getPrototypeOf(RP_4MS)).call(this, { id: 'RP_4MS', platforms: ['Ресурс-П1', 'Ресурс-П2', 'Ресурс-П3'], name: 'Ресурс-П 1-3 (4 м)', resolution: 4, ms: true }));

	        _this21._resolution = 4;
	        return _this21;
	    }

	    createClass(RP_4MS, [{
	        key: 'condition',
	        value: function condition(archive) {
	            return get(RP_4MS.prototype.__proto__ || Object.getPrototypeOf(RP_4MS.prototype), 'condition', this).call(this, archive) + ' AND spot5_b_exists = TRUE';
	        }
	    }]);
	    return RP_4MS;
	}(RP);

	var Triplesat = function (_Satellite7) {
	    inherits(Triplesat, _Satellite7);

	    function Triplesat() {
	        classCallCheck(this, Triplesat);
	        return possibleConstructorReturn(this, (Triplesat.__proto__ || Object.getPrototypeOf(Triplesat)).call(this, {
	            id: '21AT',
	            platforms: ['TripleSat Constellation-1', 'TripleSat Constellation-2', 'TripleSat Constellation-3'],
	            name: 'TripleSat',
	            resolution: 1,
	            swath: 23,
	            arity: 3,
	            operator: Translations$2.getText('operator.twentyfirst'),
	            since: '2015',
	            ms: true,
	            restricted: false
	        }));
	    }

	    return Triplesat;
	}(Satellite);

	var satellites = {
	    ms: [new DG({ id: 'WV04', platforms: ['WV04'], name: 'WorldView-4', resolution: 0.3, swath: 13.2, since: '2016' }), new DG({ id: 'WV03', platforms: ['WV03'], name: 'WorldView-3', resolution: 0.3, swath: 13.1, since: '2014' }), new DG({ id: 'WV02', platforms: ['WV02'], name: 'WorldView-2', resolution: 0.4, swath: 16.4, since: '2009' }), new DG({ id: 'WV01', platforms: ['WV01'], name: 'WorldView-1', resolution: 0.5, swath: 17.6, since: '2007' }), new DG({ id: 'GE01', platforms: ['GE01'], name: 'GeoEye-1', resolution: 0.4, swath: 15.2, since: '2008' }), new PHR(), new DG({ id: 'QB02', platforms: ['QB02'], name: 'QuickBird', resolution: 0.5, swath: 16.5, since: '2001 - 2015', endingDate: '2015' }), new KOMPSAT({ id: 'KOMPSAT3A', platforms: ['KOMPSAT3A'], name: 'KOMPSAT-3A', resolution: 0.5, swath: 12, since: '2015' }), new KOMPSAT({ id: 'KOMPSAT3', platforms: ['KOMPSAT3'], name: 'KOMPSAT-3', resolution: 0.7, swath: 16, since: '2012' }), new SV1(), new Satellite({ id: 'IK', platforms: ['IK-2', 'IKONOS-2'], name: 'IKONOS', resolution: 0.8, swath: 11.3, operator: Translations$2.getText('operator.ge'), since: '1999 - 2015', endingDate: '2015' }), new SpaceView({ id: 'GF2', platforms: ['GF2'], name: 'GaoFen-2', resolution: 0.8, swath: 45, since: '2014', restricted: false }), new SpaceView({ id: 'GF4', platforms: ['GF4'], name: 'GaoFen-4', resolution: 50, swath: 400, since: '2015', restricted: false }), new KOMPSAT({ id: 'KOMPSAT2', platforms: ['KOMPSAT2'], name: 'KOMPSAT-2', resolution: 1, swath: 15, since: '2006' }), new Triplesat(), new RP_1MS(), new SP6_7(), new Satellite({ id: 'BKA', platforms: ['BKA'], name: 'БелКА', resolution: 2, swath: 20, operator: Translations$2.getText('operator.vniiem'), since: '2012', restricted: true }), new GF1({ id: 'GF1_2m', platforms: ['GF1'], name: 'Gaofen-1 (2 м)', resolution: 2, swath: 60, since: '2013', sensor: 'A' }), new SpaceView({ id: 'ZY3', platforms: ['ZY3', 'ZY302'], name: 'ZiYuan 3', resolution: 2.1, swath: 51, since: '2012', restricted: false }),
	    // new SP5_2MS(),
	    new RP_4MS(),
	    // new SP5_5MS(),
	    new Satellite({ id: 'RE', platforms: ['RE'], name: 'RapidEye', resolution: 6.5, swath: 77, operator: Translations$2.getText('operator.blackbridge'), since: '2008', restricted: true }), new SP5_10MS(), new Satellite({ id: 'LANDSAT8', platforms: ['LANDSAT_8'], name: 'Landsat 8', resolution: 15, swath: 185, operator: Translations$2.getText('operator.usgs'), since: '2013', restricted: true }), new GF1({ id: 'GF1_16m', platforms: ['GF1'], name: 'Gaofen-1 (16 м)', resolution: 16, swath: 800, since: '2013', sensor: 'B' }), new SP6_7_1A(), new PLD_1A(), new SP67_P()],
	    pc: [
	    //new DG({id: 'WV01', platforms: ['WV01'], name: 'WorldView-1', resolution: 0.5, swath: 17.6, since: '2007'}),
	    new EROS({ id: 'EROSB', platforms: ['EROS-B'], name: 'EROS B', resolution: 0.7, swath: 7, since: '2006' }), new RP_PC(), new EROS({ id: 'EROSA', platforms: ['EROS-A1'], name: 'EROS A', resolution: 1.9, swath: 14, since: '2000' }),
	    // new SP5_2PC(),
	    new SP5_5PC()]
	};

	function get_name(a, x) {
	    return x.platforms.reduce(function (b, y) {
	        b[y] = x.name;
	        return b;
	    }, a);
	}

	var names = satellites.ms.reduce(get_name, {});
	names = satellites.pc.reduce(get_name, names);

	function hex$1(number) {
	    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;

	    var h = number.toString(16);
	    while (h.length < width) {
	        h = '0' + h;
	    }
	    return h.toUpperCase();
	}

	function isNumber(n) {
	    return !isNaN(new Number(n));
	}

	function isNumeric(n) {
	    return !isNaN(parseFloat(n)) && isFinite(n);
	}

	function createContainer() {

	    var container = document.createElement('div');
	    document.body.appendChild(container);
	    return container;
	}

	function isMobile() {

	    var browserCheckString = navigator.userAgent || navigator.vendor || window.opera;
	    var stringSubstr = browserCheckString.substr(0, 4);

	    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(browserCheckString) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(stringSubstr)
	    );
	}

	function _f(arr, acc, swap) {
	    if (arr.length) {
	        var r = [];
	        for (var i = 0, len = arr.length; i < len; i++) {
	            var a = arr[i];
	            if (_f(a, acc, swap)) {
	                if (swap) {
	                    r.unshift(a);
	                } else {
	                    r.push(a);
	                }
	            }
	        }
	        if (r.length) {
	            acc.push(r);
	        }
	        return false;
	    } else {
	        return true;
	    }
	}

	function flatten(arr, swap) {
	    var acc = [];
	    _f(arr, acc, swap);
	    return acc;
	}

	function getTotalHeight(parts) {
	    return parts.reduce(function (a, x) {
	        return a + document.body.querySelector(x).getBoundingClientRect().height;
	    }, 0);
	}
	function makeCloseTo(lng, x) {
	    var dist = function dist(a, b) {
	        return Math.abs(a - b);
	    };

	    var _map$reduce = [x - 360, x, x + 360].map(function (p) {
	        return { p: p, d: dist(lng, p) };
	    }).reduce(function (a, _ref) {
	        var p = _ref.p,
	            d = _ref.d;

	        if (a === null || d < a.d) {
	            a = { d: d, p: p };
	        }
	        return a;
	    }, null),
	        p = _map$reduce.p;

	    return p;
	}

	function stRange(start, end, boxes) {
	    var rng = [];
	    var lo = getQuarters(start);
	    var hi = getQuarters(end);

	    var _loop = function _loop(i) {
	        boxes.forEach(function (box) {
	            tileRange(i, box).forEach(function (n) {
	                return rng.push(n);
	            });
	        });
	    };

	    for (var i = lo; i <= hi; i++) {
	        _loop(i);
	    }
	    return rng;
	}

	function toQuery(range) {
	    return '' + (range.length > 0 ? 'stidx IN (' + range.join(',') + ')' : '');
	}

	function getQuarters(date) {
	    return (date.getFullYear() - 1970) * 4 + Math.ceil((date.getMonth() + 1) / 3);
	}

	function getSatelliteName$1(platform) {

	    var getName = function getName(a, x) {
	        return x.platforms.reduce(function (b, y) {
	            b[y] = x.name;
	            return b;
	        }, a);
	    };

	    var names = satellites.ms.reduce(getName, {});
	    names = satellites.pc.reduce(getName, names);

	    return names[platform];
	}

	function createDefaultCriteria() {

	    var setSatellitesChecked = function setSatellitesChecked(group, flag) {
	        for (var key in group) {
	            var s = group[key];
	            if (s['resolution'] <= 0.5 && PANCHROME_IDS.indexOf(s['id']) === -1) {
	                s['checked'] = flag;
	            }
	        }
	    };

	    var now = getNowDate();

	    var dateStart = new Date(now.getFullYear(), 0, 1);
	    var dateEnd = now;

	    setSatellitesChecked(satellites.ms, true);
	    setSatellitesChecked(satellites.pc, true);

	    var defaultCriteria = {
	        date: [dateStart, dateEnd],
	        annually: false,
	        clouds: [0, 100],
	        angle: [0, 80],
	        resolution: [0.3, 20],
	        satellites: satellites,
	        stereo: false,
	        archive: 'global'
	    };

	    return defaultCriteria;
	}

	function createDefaultFilter() {

	    var now = getNowDate();
	    var dateStart = new Date(now.getFullYear(), 0, 1);
	    var dateEnd = now;

	    return {
	        date: [dateStart, dateEnd],
	        clouds: [0, 100],
	        angle: [0, 80],
	        unChecked: []
	    };
	}

	function getPanelHeight(container, parts) {

	    return parts.reduce(function (a, x) {
	        return a - container.querySelector(x).getBoundingClientRect().height;
	    }, container.getBoundingClientRect().height);
	}

	function splitComplexId(complexId) {

	    var separatorIndex = complexId.lastIndexOf('!');
	    return separatorIndex > 0 ? { id: complexId.substring(0, separatorIndex),
	        productId: complexId.substring(separatorIndex + 1, complexId.length)
	    } : { id: complexId };
	}

	function fromGmx(_ref2) {
	    var fields = _ref2.fields,
	        values = _ref2.values,
	        types = _ref2.types;
	    var convertMercator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


	    return values.map(function (x) {
	        var item = fields.reduce(function (a, k, i) {
	            switch (types[i]) {
	                default:
	                    a[k] = x[i];
	                    break;
	                case 'date':
	                    switch (_typeof(x[i])) {
	                        case 'string':
	                            a[k] = new Date(x[i]);
	                            break;
	                        case 'number':
	                            a[k] = new Date(x[i] * 1000);
	                            break;
	                        default:
	                            break;
	                    }
	                    break;
	                case 'time':
	                    break;
	                case 'geometry':
	                    a[k] = L.gmxUtil.geometryToGeoJSON(x[i], convertMercator);
	                    break;
	            }
	            switch (k) {
	                case 'stereo':
	                    var s = x[i];
	                    a.stereo = typeof s === 'string' && s !== 'NONE';
	                    break;
	                default:
	                    break;
	            }
	            return a;
	        }, {});
	        if (item.geomixergeojson) {
	            item.geoJSON = item.geomixergeojson;
	            delete item.geomixergeojson;
	        }
	        item.url = '//search.kosmosnimki.ru/QuickLookImage.ashx?id=' + item.sceneid;
	        return item;
	    });
	}

	function getDrawingObject(rawObject) {
	    var id = rawObject.id,
	        name = rawObject.name,
	        geoJSON = rawObject.geoJSON,
	        color = rawObject.color,
	        visible = rawObject.visible;


	    var correctId = id || L.gmxUtil.newId();
	    var correctName = name === null || typeof name === 'undefined' ? getDrawingObjectName(geoJSON) : decodeURIComponent(name);
	    var GeoJSON = {
	        type: 'Feature',
	        geometry: L.gmxUtil.geometryToGeoJSON(geoJSON.geometry),
	        properties: geoJSON.properties
	    };
	    var isVisible = typeof visible === 'undefined' ? true : Boolean(visible);
	    var isEditable = typeof geoJSON.properties.editable === 'undefined' ? true : geoJSON.properties.editable;

	    var correctColor = void 0;
	    if (geoJSON.geometry.type === 'Point') {
	        correctColor = undefined;
	    } else {
	        if (typeof color === 'undefined') {
	            correctColor = '#0033FF';
	        } else {
	            if (isNaN(parseInt(color, 10))) {
	                correctColor = color;
	            } else {
	                correctColor = '#' + hex$1(color);
	            }
	        }
	    }

	    return {
	        id: correctId,
	        name: correctName,
	        area: getDrawingObjectArea(geoJSON),
	        geoJSON: GeoJSON,
	        visible: isVisible,
	        color: correctColor,
	        editable: isEditable
	    };
	}

	function getDrawingObjectArea(geoJSON) {
	    var _geoJSON$geometry = geoJSON.geometry,
	        type = _geoJSON$geometry.type,
	        coordinates = _geoJSON$geometry.coordinates;


	    if (typeof coordinates !== 'undefined') {

	        switch (type.toUpperCase()) {
	            case 'POINT':
	                return 0;
	            case 'LINESTRING':
	            case 'MULTILINESTRING':
	                return L.gmxUtil.geoJSONGetLength(geoJSON);
	            case 'MULTIPOLYGON':
	            case 'POLYGON':
	            default:
	                return L.gmxUtil.geoJSONGetArea(geoJSON);
	        }
	    }
	}

	function getDrawingObjectName(geoJSON) {

	    if (geoJSON.properties.name) {
	        return geoJSON.properties.name;
	    } else {
	        var type = geoJSON.geometry.type;

	        switch (type.toUpperCase()) {
	            case 'POINT':
	                return Translations$2.getText('objects.point');
	            case 'LINESTRING':
	            case 'MULTILINESTRING':
	                return Translations$2.getText('objects.line');
	            case 'MULTIPOLYGON':
	            case 'POLYGON':
	            default:
	                return Translations$2.getText('objects.polygon');
	        }
	    }
	}

	function splitOn180(geometry) {
	    var type = geometry.type,
	        coordinates = geometry.coordinates;


	    var splitCoordinates = function splitCoordinates(points, hemisphere) {

	        var coords = L.PolyUtil.clipPolygon(points, hemisphere).map(function (_ref3) {
	            var x = _ref3.x,
	                y = _ref3.y;
	            return [x, y];
	        });
	        if (coords.length > 0) {
	            var start_point = coords[0];
	            var end_point = coords[coords.length - 1];
	            if (start_point[0] != end_point[0] || start_point[1] != end_point[1]) {
	                coords.push(start_point);
	            }
	        }
	        return coords;
	    };

	    var geometries = [];

	    switch (type.toUpperCase()) {
	        case 'POLYGON':
	            var points = coordinates[0].map(function (_ref4) {
	                var _ref5 = slicedToArray(_ref4, 2),
	                    x = _ref5[0],
	                    y = _ref5[1];

	                return L.point(x, y);
	            });
	            var c1 = splitCoordinates(points, EAST_HEMISPHERE);
	            if (c1.length > 0) {
	                geometries.push(normalizeGeometry({ type: type, coordinates: [c1] }, 179));
	            }
	            var c2 = splitCoordinates(points, WEST_HEMISPHERE);
	            if (c2.length > 0) {
	                geometries.push(normalizeGeometry({ type: type, coordinates: [c2] }, -179));
	            } else {
	                c2 = splitCoordinates(points, WEST_HEMISPHERE2);
	                if (c2.length > 0) {
	                    geometries.push(normalizeGeometry({ type: type, coordinates: [c2] }, -179));
	                }
	            }
	            break;
	        case 'LINESTRING':
	        default:
	            geometries.push(geometry);
	            break;
	    }
	    return geometries;
	}

	function isGeometry(obj) {
	    var type = obj.type;


	    switch (type) {
	        case 'Point':
	        case 'MultiPoint':
	        case 'LineString':
	        case 'MultiLineString':
	        case 'Polygon':
	        case 'MultiPolygon':
	        case 'GeometryCollection':
	            return true;
	        default:
	            return false;
	    }
	}

	function isGeojsonFeature(obj) {
	    var type = obj.type,
	        geometry = obj.geometry;


	    if (type !== 'Feature') {
	        console.log('geojson feature test failed: provided type is not a "Feature" object', obj);
	        return false;
	    }

	    if (!isGeometry(geometry)) {
	        console.log('geojson feature test failed: geometry is of wrong type', geometry);
	        return false;
	    }

	    return true;
	}

	function normalizeGeometry(geometry, lng) {
	    var type = geometry.type,
	        coordinates = geometry.coordinates;


	    var x = isNumber(lng) ? lng : getRefLon(coordinates);

	    switch (type.toUpperCase()) {
	        case 'POLYGON':
	            return { type: type, coordinates: normalizePolygon(x, coordinates) };
	        case 'MULTIPOLYGON':
	            return { type: type, coordinates: coordinates.map(normalizePolygon.bind(null, x)) };
	        default:
	            return geometry;
	    }
	}

	function normalizeGeometryType(geometry) {
	    var type = geometry.type;


	    switch (type.toUpperCase()) {
	        case 'POINT':
	            geometry.type = 'Point';
	            break;
	        case 'MULTIPOINT':
	            geometry.type = 'MultiPoint';
	            break;
	        case 'LINESTRING':
	            geometry.type = 'LineString';
	            break;
	        case 'MULTILINESTRING':
	            geometry.type = 'MultiLineString';
	            break;
	        case 'POLYGON':
	            geometry.type = 'Polygon';
	            break;
	        case 'MULTIPOLYGON':
	            geometry.type = 'MultiPolygon';
	            break;
	        case 'GEOMETRYCOLLECTION':
	            geometry.type = 'GeometryCollection';
	            break;
	        default:
	            break;
	    }

	    return geometry;
	}

	function normalizePoint(lng, _ref6) {
	    var _ref7 = slicedToArray(_ref6, 2),
	        x = _ref7[0],
	        y = _ref7[1];

	    return [makeCloseTo(lng, x), y];
	}

	function normalizeRing(lng, coordinates) {

	    return coordinates.map(normalizePoint.bind(null, lng));
	}

	function normalizePolygon(lng, coordinates) {

	    if (isNumber(lng)) {
	        return coordinates.map(normalizeRing.bind(null, lng));
	    } else {
	        return coordinates.map(normalizeRing.bind(null, getRefLon(coordinates)));
	    }
	}

	function getRefLon(coordinates) {

	    var f = flatten(coordinates);
	    var pos = f.filter(function (_ref8) {
	        var _ref9 = slicedToArray(_ref8, 2),
	            x = _ref9[0],
	            y = _ref9[1];

	        return x >= 0;
	    });

	    var _ref10 = pos.length > 0 ? pos[0] : f[0],
	        _ref11 = slicedToArray(_ref10, 2),
	        x = _ref11[0],
	        y = _ref11[1];

	    return x;
	}

	function getBbox(geometry) {
	    var type = geometry.type,
	        coordinates = geometry.coordinates;

	    var lon = 0,
	        lat = 0;
	    var sorter = function sorter(a, b) {
	        if (a > b) {
	            return 1;
	        }
	        if (a < b) {
	            return -1;
	        }
	        return 0;
	    };
	    var rings = function rings(coords) {
	        var _coords$reduce = coords.reduce(function (a, _ref12) {
	            var _ref13 = slicedToArray(_ref12, 2),
	                x = _ref13[0],
	                y = _ref13[1];

	            a.xs.push(x);
	            a.ys.push(y);
	            return a;
	        }, { xs: [], ys: [] }),
	            xs = _coords$reduce.xs,
	            ys = _coords$reduce.ys;

	        xs = xs.sort(sorter);
	        ys = ys.sort(sorter);
	        var xmin = xs[0];
	        var xmax = xs[xs.length - 1];
	        var ymin = ys[0];
	        var ymax = ys[ys.length - 1];
	        return [[xmin, ymax], [xmax, ymax], [xmax, ymin], [xmin, ymin]];
	    };
	    switch (type.toUpperCase()) {
	        case 'POINT':
	            var _coordinates = slicedToArray(coordinates, 2);

	            lon = _coordinates[0];
	            lat = _coordinates[1];

	            return [[lon, lat], [lon, lat], [lon, lat], [lon, lat]];
	        case 'MULTIPOINT':
	        case 'LINESTRING':
	            return rings(coordinates);
	        case 'POLYGON':
	        case 'MULTILINESTRING':
	            return rings(coordinates[0]);
	        case 'MULTIPOLYGON':
	            var _coordinates$reduce = coordinates.reduce(function (a, coords) {
	                var _rings = rings(coords[0]),
	                    _rings2 = slicedToArray(_rings, 4),
	                    _rings2$ = slicedToArray(_rings2[0], 2),
	                    x1 = _rings2$[0],
	                    y1 = _rings2$[1],
	                    _rings2$2 = slicedToArray(_rings2[1], 2),
	                    x2 = _rings2$2[0],
	                    y2 = _rings2$2[1],
	                    _rings2$3 = slicedToArray(_rings2[2], 2),
	                    x3 = _rings2$3[0],
	                    y3 = _rings2$3[1],
	                    _rings2$4 = slicedToArray(_rings2[3], 2),
	                    x4 = _rings2$4[0],
	                    y4 = _rings2$4[1];

	                a.xs.push(x1);
	                a.xs.push(x2);
	                a.xs.push(x3);
	                a.xs.push(x4);
	                a.ys.push(y1);
	                a.ys.push(y2);
	                a.ys.push(y3);
	                a.ys.push(y4);
	                return a;
	            }, { xs: [], ys: [] }),
	                xs = _coordinates$reduce.xs,
	                ys = _coordinates$reduce.ys;

	            xs = xs.sort(sorter);
	            ys = ys.sort(sorter);
	            var xmin = xs[0];
	            var xmax = xs[xs.length - 1];
	            var ymin = ys[0];
	            var ymax = ys[ys.length - 1];
	            return [[xmin, ymax], [xmax, ymax], [xmax, ymin], [xmin, ymin]];
	        default:
	            return null;
	    }
	}

	function sti(period, lon, lat) {
	    return 65536 * period + 256 * Math.round(256 * (90 - lat) / 180) + Math.round(256 * (lon + 180) / 360);
	}

	function step(lat) {
	    return lat < 50 ? 1 : 50 <= lat && lat <= 70 ? 2 : 3;
	}

	function tileRange(period, _ref14) {
	    var _ref15 = slicedToArray(_ref14, 4),
	        _ref15$ = slicedToArray(_ref15[0], 2),
	        x1 = _ref15$[0],
	        y1 = _ref15$[1],
	        _ref15$2 = slicedToArray(_ref15[1], 2),
	        x2 = _ref15$2[0],
	        y2 = _ref15$2[1],
	        _ref15$3 = slicedToArray(_ref15[2], 2),
	        x3 = _ref15$3[0],
	        y3 = _ref15$3[1],
	        _ref15$4 = slicedToArray(_ref15[3], 2),
	        x4 = _ref15$4[0],
	        y4 = _ref15$4[1];

	    var nw = sti(period, x1, y1) - (step(Math.abs(y1)) + 512);
	    var ne = sti(period, x2, y2) + (step(Math.abs(y2)) - 512);
	    var se = sti(period, x3, y3) + (step(Math.abs(y3)) + 512);

	    var rng = [];
	    for (var lo = nw, hi = ne; hi <= se; lo += 256, hi += 256) {
	        var k = lo;
	        while (k <= hi) {
	            rng.push(k++);
	        }
	    }
	    return rng;
	}

	function getShapefileObject(item, key) {

	    var drawingObject = getDrawingObject({ geoJSON: item });
	    var name = drawingObject.name,
	        color = drawingObject.color,
	        editable = drawingObject.editable,
	        visible = drawingObject.visible,
	        _drawingObject$geoJSO = drawingObject.geoJSON,
	        geometry = _drawingObject$geoJSO.geometry,
	        properties = _drawingObject$geoJSO.properties;

	    var itemId = '_item' + key;

	    return Object.assign({}, {
	        selectedName: name,
	        itemId: itemId,
	        name: name,
	        color: color,
	        editable: editable,
	        visible: visible
	    }, { geoJSON: { geometry: geometry, properties: properties } });
	}

	function getCoordinatesCount(results) {

	    var numOfCoordinates = 0;

	    var recursiveArrayLength = function recursiveArrayLength(data) {

	        for (var i = 0; i < data.length; i++) {

	            var currentArray = data[i];

	            if (currentArray instanceof Array) {
	                recursiveArrayLength(currentArray);
	            } else {
	                numOfCoordinates++;
	            }
	        }
	    };

	    for (var i = 0; i < results.length; i++) {

	        var currentItem = results[i];
	        var _currentItem$geometry = currentItem.geometry.coordinates,
	            coordinates = _currentItem$geometry === undefined ? [] : _currentItem$geometry;


	        recursiveArrayLength(coordinates);
	    }

	    numOfCoordinates = Math.round(numOfCoordinates / 2);

	    return numOfCoordinates;
	}

	function getBounds(items) {
	    var bounds = items.reduce(function (a, properties) {
	        var geometry = L.gmxUtil.convertGeometry(properties[properties.length - 1], true, true);

	        var _getBbox = getBbox(geometry),
	            _getBbox2 = slicedToArray(_getBbox, 4),
	            _getBbox2$ = slicedToArray(_getBbox2[0], 2),
	            x1 = _getBbox2$[0],
	            y1 = _getBbox2$[1],
	            _getBbox2$2 = slicedToArray(_getBbox2[1], 2),
	            x2 = _getBbox2$2[0],
	            y2 = _getBbox2$2[1],
	            _getBbox2$3 = slicedToArray(_getBbox2[2], 2),
	            x3 = _getBbox2$3[0],
	            y3 = _getBbox2$3[1],
	            _getBbox2$4 = slicedToArray(_getBbox2[3], 2),
	            x4 = _getBbox2$4[0],
	            y4 = _getBbox2$4[1];

	        var ne = L.latLng(y2, x2);
	        var sw = L.latLng(y4, x4);
	        var b = L.latLngBounds(ne, sw);
	        if (a === null) {
	            a = b;
	        } else {
	            a.extend(b);
	        }
	        return a;
	    }, null);
	    var ne = bounds.getNorthEast();
	    var sw = bounds.getSouthWest();
	    var lng = ne.lng;
	    ne = L.latLng(ne.lat, makeCloseTo(lng, ne.lng));
	    sw = L.latLng(sw.lat, makeCloseTo(lng, sw.lng));
	    return L.latLngBounds(ne, sw);
	}

	function getRootUrl() {
	    var _location = location,
	        origin = _location.origin,
	        pathname = _location.pathname;

	    return '' + origin + pathname;
	}

	function getDifferenceBetweenDates(startDate, endDate) {

	    var startYear = startDate.getFullYear();
	    var startMonth = startDate.getMonth();
	    var startDay = startDate.getDate();

	    var endYear = endDate.getFullYear();
	    var endMonth = endDate.getMonth();
	    var endDay = endDate.getDate();

	    var startMomentDate = moment([startYear, startMonth, startDay]);
	    var endMomentDate = moment([endYear, endMonth, endDay]);

	    var monthDiff = startMomentDate.diff(endMomentDate, 'months');
	    var absMonthDiff = Math.abs(monthDiff);

	    if (absMonthDiff > 0) {
	        return absMonthDiff + ' \u043C\u0435\u0441';
	    }

	    var dayDiff = startMomentDate.diff(endMomentDate, 'days');
	    var absDayDiff = Math.abs(dayDiff);

	    return absDayDiff + ' \u0434\u043D';
	}

	function compareDates(one, two) {

	    var oneDate = new Date(one);
	    var twoDate = new Date(two);

	    return oneDate.getDay() === twoDate.getDay() && oneDate.getMonth() === twoDate.getMonth() && oneDate.getYear() === twoDate.getYear();
	}

	function prepareDate(date) {

	    var preparedDate = date;

	    preparedDate.setHours(0);
	    preparedDate.setMinutes(0);
	    preparedDate.setSeconds(0);

	    return preparedDate;
	}

	function getNowDate() {

	    var now = new Date();
	    now.setHours(0, 0, 0, 0);

	    return now;
	}

	var EventTarget = function () {
	    function EventTarget() {
	        classCallCheck(this, EventTarget);

	        this.listeners = {};
	    }

	    createClass(EventTarget, [{
	        key: 'addEventListener',
	        value: function addEventListener(type, callback) {
	            if (!(type in this.listeners)) {
	                this.listeners[type] = [];
	            }
	            this.listeners[type].push(callback);
	        }
	    }, {
	        key: 'on',
	        value: function on(type, callback) {
	            this.addEventListener(type, callback);
	            return this;
	        }
	    }, {
	        key: 'removeEventListener',
	        value: function removeEventListener(type, callback) {
	            if (!(type in this.listeners)) {
	                return;
	            }
	            var stack = this.listeners[type];
	            for (var i = 0, l = stack.length; i < l; i++) {
	                if (stack[i] === callback) {
	                    stack.splice(i, 1);
	                    return this.removeEventListener(type, callback);
	                }
	            }
	        }
	    }, {
	        key: 'off',
	        value: function off(type, callback) {
	            this.removeEventListener(type, callback);
	            return this;
	        }
	    }, {
	        key: 'dispatchEvent',
	        value: function dispatchEvent(event) {
	            if (!(event.type in this.listeners)) {
	                return;
	            }
	            var stack = this.listeners[event.type];
	            Object.defineProperty(event, 'target', {
	                enumerable: false,
	                configurable: false,
	                writable: false,
	                value: this
	            });
	            for (var i = 0, l = stack.length; i < l; i++) {
	                stack[i].call(this, event);
	            }
	        }
	    }]);
	    return EventTarget;
	}();

	var uniqueGlobalName = function () {
	    var freeid = 0;
	    return function (thing) {
	        var id = "gmx_unique_" + freeid++;
	        window[id] = thing;
	        return id;
	    };
	}();

	/** Посылает кросс-доменный GET запрос к серверу с использованием транспорта JSONP.
	 *
	 * @memberOf nsGmx.Utils
	 * @param {String} url URL сервера.
	 * @param {Function} callback Ф-ция, которая будет вызвана при получении от сервера результата.
	 * @param {String} [callbackParamName=CallbackName] Имя параметра для задания имени ф-ции ответа.
	 * @param {Function} [errorCallback] Ф-ция, которая будет вызвана в случае ошибки запроса к серверу
	 */
	function sendCrossDomainJSONRequest(url, callback, callbackParamName, errorCallback) {
	    callbackParamName = callbackParamName || 'CallbackName';

	    var script = document.createElement("script");
	    script.setAttribute("charset", "UTF-8");
	    var callbackName = uniqueGlobalName(function (obj) {
	        callback && callback(obj);
	        window[callbackName] = false;
	        document.getElementsByTagName("head").item(0).removeChild(script);
	    });

	    var sepSym = url.indexOf('?') == -1 ? '?' : '&';

	    if (errorCallback) {
	        script.onerror = errorCallback;
	    }

	    script.setAttribute("src", "" + url + sepSym + callbackParamName + "=" + callbackName + "&" + Math.random());
	    document.getElementsByTagName("head").item(0).appendChild(script);
	}

	var AuthManager = function (_EventTarget) {
	    inherits(AuthManager, _EventTarget);

	    function AuthManager(_ref) {
	        var authorizationEndpoint = _ref.authorizationEndpoint,
	            userInfoEndpoint = _ref.userInfoEndpoint,
	            redirectEndpointHtml = _ref.redirectEndpointHtml,
	            redirectEndpointAshx = _ref.redirectEndpointAshx,
	            credentialLoginEndpoint = _ref.credentialLoginEndpoint,
	            _ref$clientId = _ref.clientId,
	            clientId = _ref$clientId === undefined ? 1 : _ref$clientId;
	        classCallCheck(this, AuthManager);

	        // поддерживаем как минимум два события для
	        // серверов ресурсов: login и logout
	        var _this = possibleConstructorReturn(this, (AuthManager.__proto__ || Object.getPrototypeOf(AuthManager)).call(this));

	        _this._authorizationEndpoint = authorizationEndpoint;
	        _this._userInfoEndpoint = userInfoEndpoint;
	        _this._redirectEndpointHtml = redirectEndpointHtml;
	        _this._redirectEndpointAshx = redirectEndpointAshx;
	        _this._redirectEndpointAshx2 = redirectEndpointAshx + '/?return_url=' + location.href;
	        _this._credentialLoginEndpoint = credentialLoginEndpoint;
	        _this._resourceServers = [];
	        _this._clientId = clientId;
	        return _this;
	    }

	    createClass(AuthManager, [{
	        key: '$getAntiCsrfToken',
	        value: function $getAntiCsrfToken() {
	            var cookieName = "sync";
	            var re = new RegExp('.*' + cookieName + '=([^;]+).*', 'i');
	            return document.cookie.replace(re, '$1');
	        }
	        /** Добавляет сервер ресурсов
	         * Должна вызываться только из класса ResourceServer.
	         * @param {ResourceServer} resourceServer
	         */

	    }, {
	        key: '$addResourceServer',
	        value: function $addResourceServer(resourceServer) {
	            this._resourceServers.push(resourceServer);
	        }
	    }, {
	        key: '_chain',
	        value: function _chain(tasks, state) {
	            return tasks.reduce(function (prev, next) {
	                return prev.then(next);
	            }, new Promise(function (resolve, reject) {
	                return resolve(state);
	            }));
	        }
	    }, {
	        key: '_authorizeResourceServers',
	        value: function _authorizeResourceServers() {
	            var tasks = this._resourceServers.map(function (rs) {
	                return function (state) {
	                    return new Promise(function (resolve) {
	                        rs.sendGetRequest('oAuth2/LoginDialog.ashx').then(function (response) {
	                            state = state.concat(response);
	                            resolve(state);
	                        }).catch(function (e) {
	                            return state.push(e);
	                        });
	                    });
	                };
	            });
	            return this._chain(tasks, []);
	        }
	    }, {
	        key: '_processAuthorization',
	        value: function _processAuthorization(search) {
	            var _this2 = this,
	                _arguments = arguments;

	            function parseQueryString(search) {
	                var a = search.slice(1).split('&');
	                var o = {};
	                for (var i = 0; i < a.length; i++) {
	                    var s = a[i].split('=');
	                    o[s[0]] = s[1];
	                }
	                return o;
	            }
	            return new Promise(function (resolve, reject) {
	                // превращаем строку с параметрами в хеш
	                var params = parseQueryString(search);

	                if (params.error) {
	                    reject({
	                        Status: 'auth',
	                        Result: null,
	                        Error: {
	                            message: params.error
	                        }
	                    });
	                } else {
	                    sendCrossDomainJSONRequest('' + _this2._redirectEndpointAshx + search, function (resp) {
	                        if (resp.Status === 'ok') {
	                            resolve({
	                                Status: 'ok',
	                                Result: resp.Result
	                            });
	                        } else {
	                            reject({
	                                Status: resp.Status,
	                                Result: null
	                            });
	                        }
	                    }, 'CallbackName', function () {
	                        reject({
	                            Status: 'network',
	                            Result: null,
	                            Error: {
	                                message: _arguments[2]
	                            }
	                        });
	                    });
	                }
	            });
	        }
	        /** Получение информации о пользователе от AuthServer
	         * @return {Function} promise(userInfo)
	         */

	    }, {
	        key: 'getUserInfo',
	        value: function getUserInfo() {
	            var _this3 = this;

	            if (this._getUserInfoDeferred) {
	                return this._getUserInfoDeferred;
	            }
	            return this._getUserInfoDeferred = new Promise(function (resolve, reject) {

	                function authorizationGrant(search) {
	                    // удаляем айфрейм и глобальную переменную
	                    setTimeout(function () {
	                        delete window.authorizationGrant;
	                        document.body.removeChild(document.body.querySelector('.authorizationIframe'));
	                    }, 0);

	                    this._processAuthorization(search).then(function (resp) {
	                        return resolve(resp);
	                    }, function (err) {
	                        return reject(err);
	                    });
	                }

	                // посылаем запросы на все сервера ресурсов
	                // когда они все ответят ..
	                _this3._authorizeResourceServers().then(function (servers) {
	                    // .. формируем параметры state и scope
	                    var scope = '';
	                    var state = '';
	                    for (var i = 0; i < servers.length; i++) {
	                        var response = servers[i];
	                        scope += response.Service.ServerId + ',';
	                        state += response.Result.State + ',';
	                    }
	                    scope = scope.slice(0, -1);
	                    state = state.slice(0, -1);

	                    // .. и посылаем запрос на сервер авторизации
	                    window.authorizationGrant = authorizationGrant.bind(_this3);
	                    document.body.insertAdjacentHTML('afterbegin', '<iframe\n                    class="authorizationIframe"\n                    style="display: block !important; position: absolute; left: -99999px;"\n                    src="' + _this3._userInfoEndpoint + '/?client_id=1&redirect_uri=' + _this3._redirectEndpointHtml + '&scope=' + scope + '&state=' + state + '">\n                </iframe>');
	                }).catch(function () {
	                    reject({
	                        Status: 'error'
	                    });
	                });
	            });
	        }
	        /** Принудительное перелогинивание пользователя.
	         * Пользователь должен увидеть поля для ввода
	         * логина/пароля (возможно, на сервере авторизации).
	         * При успешной авторизации библиотека должна
	         * произвести авторизацию пользователя на всех
	         * подключенных серверах ресурсов
	         * и только после этого resolve promise
	         * @return {Function} promise(userInfo)
	         */

	    }, {
	        key: 'login',
	        value: function login(arg) {
	            var _this4 = this;

	            var foreignServer = void 0;
	            var iframeContainer = void 0;
	            if (typeof arg === 'string') {
	                // обратная совместимость
	                foreignServer = arg;
	            } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
	                foreignServer = arg.foreignServer;
	                iframeContainer = arg.iframeContainer;
	            }

	            this._authorizeResourceServers().then(function (servers) {
	                // .. формируем параметры state и scope
	                var scope = '';
	                var state = '';
	                for (var i = 0; i < servers.length; i++) {
	                    var response = servers[i];
	                    scope += response.Service.ServerId + ',';
	                    state += response.Result.State + ',';
	                }
	                scope = scope.slice(0, -1);
	                state = state.slice(0, -1);

	                var authUrl = _this4._authorizationEndpoint + '/?client_id=1&redirect_uri=' + _this4._redirectEndpointAshx2 + '&scope=' + scope + '&state=' + state;

	                if (foreignServer) {
	                    authUrl += '&authserver=' + foreignServer;
	                }

	                if (!iframeContainer) {
	                    window.open(authUrl, '_self');
	                } else {
	                    var authorizationGrant = function authorizationGrant() {
	                        window.location.reload();
	                        var event = document.createEvent('Event');
	                        event.initEvent('login', false, false);
	                        this.dispatchEvent(event);
	                    };

	                    window.authorizationGrant = authorizationGrant;
	                    document.body.removeChild(document.body.querySelector('.authorizationIframe'));
	                    document.body.insertAdjacentHTML('afterbegin', '<iframe\n                    class="authorizationIframe"\n                    src="' + self._authorizationEndpoint + '/?client_id=1\n                        &redirect_uri=' + self._redirectEndpointHtml + '\n                        &redirect_uri_alt=' + self._redirectEndpointAshx2 + '\n                        &scope=' + scope + '\n                        &state=' + state + '">\n                </iframe>');
	                }
	            });
	        }
	        /** Залогиниться, используя логин и пароль
	         * @param  {String} login
	         * @param  {String} password
	         * @return {Promise}
	         */

	    }, {
	        key: 'loginWithCredentials',
	        value: function loginWithCredentials(login, password) {
	            var _this5 = this,
	                _arguments2 = arguments;

	            // отправляем ajax-запрос на Handler/Login с логином и паролем
	            // После этого пользователь считается залогиненным на my.
	            // Затем вызываем getUserInfo()

	            return new Promise(function (resolve, reject) {
	                sendCrossDomainJSONRequest(_this5._credentialLoginEndpoint + '?login=' + encodeURIComponent(login) + '&password=' + encodeURIComponent(password), function (response) {
	                    if (response.Status.toLowerCase() === 'ok') {
	                        _this5.getUserInfo().then(function () {
	                            resolve({
	                                Status: 'ok',
	                                Result: _arguments2[0].Result
	                            });
	                        }).catch(function () {
	                            reject({
	                                Status: 'error',
	                                Result: {
	                                    Message: 'authorization error'
	                                }
	                            });
	                        });
	                    } else if (response.Status.toLowerCase() === 'auth') {
	                        reject({
	                            Status: 'auth',
	                            Result: {
	                                Message: response.Result.Message
	                            }
	                        });
	                    } else {
	                        reject({
	                            Status: 'error',
	                            Result: {
	                                Message: 'unknown error'
	                            }
	                        });
	                    }
	                }, 'CallbackName', function () {
	                    reject({
	                        Status: 'network',
	                        Result: {
	                            Message: 'network error'
	                        }
	                    });
	                });
	            });
	        }
	        /** Принудительное разлогинивание пользователя.
	         * В том числе и на серверах ресурсов
	         * @return {Function} promise(status)
	         */

	    }, {
	        key: 'logout',
	        value: function logout() {
	            var _this6 = this;

	            return new Promise(function (resolve, reject) {
	                var promises = [];
	                for (var i = 0; i < _this6._resourceServers.length; i++) {
	                    var resourceServer = _this6._resourceServers[i];
	                    var promise = resourceServer.sendGetRequest('oAuth2/Logout.ashx');
	                    promises.push(promise);
	                }
	                _this6._chain(promises, {}).then(function () {
	                    if (_this6._clientId === 1) {
	                        sendCrossDomainJSONRequest('//my.kosmosnimki.ru/Handler/Logout', function (response) {
	                            return resolve({ Status: 'ok' });
	                        }, '', function () {
	                            return reject({ Status: 'network' });
	                        });
	                    } else {
	                        resolve({
	                            Status: 'ok'
	                        });
	                        var event = document.createEvent('Event');
	                        event.initEvent('logout', false, false);
	                        _this6.dispatchEvent(event);
	                    }
	                }).catch(function () {
	                    reject({
	                        Status: 'error'
	                    });
	                });
	            });
	        }
	    }]);
	    return AuthManager;
	}(EventTarget);

	// <String>options.title
	// <String>options.className
	// <String>options.trigger (hover|click|manual)
	// <String>options.direction (down|up)
	// <Boolean>options.adjustWidth
	// <Boolean>options.showTopItem

	var DropdownWidget = function (_EventTarget) {
	    inherits(DropdownWidget, _EventTarget);

	    function DropdownWidget(options) {
	        classCallCheck(this, DropdownWidget);

	        var _this = possibleConstructorReturn(this, (DropdownWidget.__proto__ || Object.getPrototypeOf(DropdownWidget)).call(this));

	        _this.options = extend({
	            title: '',
	            trigger: 'hover',
	            direction: 'down',
	            adjustWidth: true,
	            showTopItem: true,
	            titleClassName: ''
	        }, options);

	        _this.$el = _this.options.el;
	        _this.$el.classList.add('dropdownWidget');
	        _this.$el.classList.add('dropdownWidget-item');

	        _this.$titleContainer = document.createElement('div');
	        _this.$titleContainer.classList.add('dropdownWidget-dropdownTitle');
	        if (_this.options.titleClassName) {
	            _this.$titleContainer.classList.add(_this.options.titleClassName);
	        }
	        _this.$titleContainer.innerHTML = _this.options.title;
	        _this.$el.appendChild(_this.$titleContainer);

	        _this.$dropdownContainer = document.createElement('div');
	        _this.$dropdownContainer.classList.add('dropdownWidget-dropdown');
	        _this.$dropdownContainer.style.display = 'none';
	        _this.$el.appendChild(_this.$dropdownContainer);

	        _this.$dropdownTitle = document.createElement('div');
	        _this.$dropdownTitle.classList.add('dropdownWidget-item');
	        _this.$dropdownTitle.classList.add('dropdownWidget-dropdownTitle');
	        if (options.titleClassName) {
	            _this.$dropdownTitle.classList.add(options.titleClassName);
	        }
	        _this.$dropdownTitle.innerHTML = _this.options.title;
	        _this.$dropdownContainer.appendChild(_this.$dropdownTitle);

	        if (!_this.options.showTopItem) {
	            _this.$dropdownTitle.style.display = 'none';
	        }

	        if (_this.options.trigger === 'hover') {
	            _this.$dropdownTitle.classList.add('ui-state-disabled');
	            _this.$titleContainer.addEventListener('mouseover', function () {
	                return _this.expand();
	            });
	            _this.$dropdownContainer.addEventListener('mouseleave', function () {
	                return _this.collapse();
	            });
	        } else if (_this.options.trigger === 'click') {
	            _this.$titleContainer.addEventListener('click', function () {
	                return _this.expand();
	            });
	            _this.$dropdownTitle.addEventListener('click', function () {
	                return _this.collapse();
	            });
	        }

	        if (_this.options.direction === 'up') {
	            _this.$el.classList.add('dropdownWidget_direction-up');
	        } else {
	            _this.$el.classList.add('dropdownWidget_direction-down');
	        }

	        _this._items = {};
	        return _this;
	    }

	    createClass(DropdownWidget, [{
	        key: 'addItem',
	        value: function addItem(id, inst, position) {
	            var _this2 = this;

	            this._items[id] = inst;

	            var $container = document.createElement('div');

	            $container.classList.add('dropdownWidget-item');
	            $container.classList.add('dropdownWidget-dropdownItem');
	            $container.setAttribute('data-id', id);
	            $container.setAttribute('data-position', position);
	            $container.addEventListener('click', function (je) {
	                var event = document.createEvent('Event');
	                event.initEvent('item:click', false, false);
	                event.detail = { dataId: je.currentTarget.getAttribute('data-id') };
	                _this2.dispatchEvent(event);

	                if (_this2.options.trigger === 'click') {
	                    _this2.collapse();
	                }
	            });
	            $container.appendChild(inst.el);
	            this.$dropdownContainer.appendChild($container);
	            this._sortItems();
	        }
	    }, {
	        key: 'setTitle',
	        value: function setTitle(title) {
	            this.$titleContainer.innerHTML = title;
	            this.$dropdownTitle.innerHTML = title;
	        }
	    }, {
	        key: 'toggle',
	        value: function toggle() {
	            this._expanded ? this.collapse() : this.expand();
	            this._expanded = !this._expanded;
	        }
	    }, {
	        key: 'expand',
	        value: function expand() {
	            var r = this.$el.getBoundingClientRect();
	            this.$dropdownContainer.style.minWidth = r.width + 'px';
	            this.$dropdownContainer.style.display = 'block';
	            var event = document.createEvent('Event');
	            event.initEvent('expand', false, false);
	            event.detail = {};
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: 'collapse',
	        value: function collapse() {
	            this.$dropdownContainer.style.display = 'none';
	            var event = document.createEvent('Event');
	            event.initEvent('collapse', false, false);
	            event.detail = {};
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: 'reset',
	        value: function reset() {
	            this.collapse();
	        }
	    }, {
	        key: '_sortItems',
	        value: function _sortItems() {
	            var containerEl = this.$dropdownContainer[0];
	            var items = Array.prototype.slice.call(containerEl.children);

	            var titleEl = items.splice(items.indexOf(containerEl.querySelector('.dropdownWidget-dropdownTitle')), 1);

	            while (items.length) {
	                var positions = items.map(function (el) {
	                    return parseInt(el.getAttribute('data-position'), 10);
	                });
	                var maxPositionIndex = positions.indexOf(Math.max.apply(null, positions));
	                containerEl.insertBefore(items.splice(maxPositionIndex, 1)[0], containerEl.children[0]);
	            }

	            if (this.options.direction === 'up') {
	                containerEl.appendChild(titleEl);
	            } else {
	                containerEl.insertBefore(titleEl, containerEl.children[0]);
	            }
	        }
	    }]);
	    return DropdownWidget;
	}(EventTarget);

	var DropdownMenuWidget = function () {
	    function DropdownMenuWidget(options) {
	        classCallCheck(this, DropdownMenuWidget);


	        this._view = document.createElement('div');
	        this._view.classList.add('dropdownMenuWidget');
	        this._view.innerHTML = options.items.map(this._renderItem.bind(this)).join('');
	        var dropDown = this._view.querySelector('.dropdownMenuWidget-itemDropdown');
	        if (dropDown) {
	            dropDown.style.display = 'none';
	        }
	        var mouseTimeout = options.mouseTimeout || 100;
	        var items = this._view.querySelectorAll('.dropdownMenuWidget-item');

	        var _loop = function _loop(i) {
	            var mouseIsOver = false;
	            items[i].addEventListener('mouseenter', function (je) {
	                mouseIsOver = true;
	                setTimeout(function () {
	                    if (mouseIsOver) {
	                        var dd = je.target.querySelector('.dropdownMenuWidget-itemDropdown');
	                        if (dd) {
	                            dd.style.display = 'block';
	                        }
	                    }
	                }, 100);
	            });
	            items[i].addEventListener('mouseleave', function (je) {
	                mouseIsOver = false;
	                var dd = je.target.querySelector('.dropdownMenuWidget-itemDropdown');
	                if (dd) {
	                    dd.style.display = 'none';
	                }
	            });
	        };

	        for (var i = 0; i < items.length; ++i) {
	            _loop(i);
	        }
	    }

	    createClass(DropdownMenuWidget, [{
	        key: '_renderDropdown',
	        value: function _renderDropdown(_ref) {
	            var className = _ref.className,
	                id = _ref.id,
	                link = _ref.link,
	                newWindow = _ref.newWindow,
	                icon = _ref.icon,
	                title = _ref.title;

	            return '<li class="dropdownMenuWidget-dropdownMenuItem' + (className ? ' ' + className : '') + '">\n            ' + (newWindow ? '<div class="ui-icon ui-icon-newwin dropdownMenuWidget-dropdownMenuIcon"></div>' : '') + '\n            <a\n                ' + (id ? 'id="' + id + '"' : '') + '\n                ' + (link ? 'href="' + link + '"' : 'href="javascript:void(0)"') + '\n                ' + (newWindow && link ? 'target="_blank"' : '') + '\n                class="dropdownMenuWidget-dropdownItemAnchor' + (newWindow ? ' dropdownMenuWidget-dropdownItemAnchor_newWindow' : '') + '"\n            >\n                ' + (icon ? '<img src="' + icon + '"/>' : '') + '\n                ' + (title ? '<span>' + title + '</span>' : '') + '\n            </a>\n        </li>';
	        }
	    }, {
	        key: '_renderItem',
	        value: function _renderItem(_ref2) {
	            var className = _ref2.className,
	                id = _ref2.id,
	                link = _ref2.link,
	                newWindow = _ref2.newWindow,
	                icon = _ref2.icon,
	                fonticon = _ref2.fonticon,
	                title = _ref2.title,
	                dropdown = _ref2.dropdown;

	            return '<div class="dropdownMenuWidget-item' + (className ? ' ' + className : '') + '">\n        <a\n            ' + (id ? 'id="' + id + '"' : '') + '\n            ' + (link ? 'href="' + link + '"' : 'href="javascript:void(0)"') + '\n            ' + (newWindow && link ? 'target="_blank"' : '') + '\n            class="dropdownMenuWidget-itemAnchor' + (newWindow ? ' dropdownMenuWidget-itemAnchor_newWindow' : '') + '"\n        >\n            ' + (icon ? '<img src="' + icon + '" />' : '') + '\n            ' + (fonticon ? '<i class="' + fonticon + '"></i>' : '') + '\n            ' + (title ? '<span>' + title + '</span>' + (dropdown ? '<i class="icon-angle-down"></i>' : '') : '') + '\n        </a>\n        ' + (dropdown ? '<div class="dropdownMenuWidget-itemDropdown">\
                <ul class="dropdownMenuWidget-dropdownMenu">' + dropdown.map(this._renderDropdown.bind(this)).join('') + '</ul>\
            </div>' : '') + '\n        </div>';
	        }
	    }, {
	        key: 'appendTo',
	        value: function appendTo(placeholder) {
	            placeholder.appendChild(this._view);
	        }
	    }]);
	    return DropdownMenuWidget;
	}();

	var T = Translations$2;

	T.addText('rus', {
	    auth: {
	        'login': 'Войти',
	        'logout': 'Выйти',
	        'myAccount': 'Личный кабинет',
	        'myMap': 'Личная карта',
	        'closeDialog': 'Закрыть'
	    }
	});

	T.addText('eng', {
	    auth: {
	        'login': 'Login',
	        'logout': 'Logout',
	        'myAccount': 'My account',
	        'myMap': 'My map',
	        'closeDialog': 'Close'
	    }
	});

	var AuthWidget = function (_EventTarget) {
	    inherits(AuthWidget, _EventTarget);

	    function AuthWidget(options) {
	        classCallCheck(this, AuthWidget);

	        var _this = possibleConstructorReturn(this, (AuthWidget.__proto__ || Object.getPrototypeOf(AuthWidget)).call(this));

	        _this._view = document.createElement('div');
	        _this._view.classList.add('authWidget');

	        _this._authManager = options.authManager;
	        _this._userInfo = null;

	        _this._options = options;
	        _this._options.showAccountLink = true;
	        _this._options.accountLink = '//my.kosmosnimki.ru/Home/Settings/';
	        _this._options.showMapLink = true;

	        _this._authManager.getUserInfo().then(function (response) {
	            _this._render({
	                login: response.Result && response.Result.Login,
	                userName: response.Result && (response.Result.FullName || response.Result.Nickname || response.Result.Login),
	                nickName: response.Result.Nickname
	            });
	            _this._userInfo = response.Result;
	            var event = document.createEvent('Event');
	            event.initEvent('ready', false, false);
	            _this.dispatchEvent(event);
	        }).catch(function (response) {
	            _this._render(response);
	        });
	        _this._authManager.addEventListener('login', function () {
	            var event = document.createEvent('Event');
	            event.initEvent('login', false, false);
	            _this.dispatchEvent(event);
	        });
	        return _this;
	    }

	    createClass(AuthWidget, [{
	        key: '_render',
	        value: function _render(vm) {
	            var _this2 = this;

	            this._view.innerHTML = vm.nickName ? '<div class="authWidget_authorized">\n                <div class="authWidget-userPanel">\n                    <div class="authWidget-userPanel-iconCell">\n                        <div class="authWidget-userPanel-userIcon account account-user-logout"></div>\n                    </div>\n                    <div class="authWidget-userPanel-userMenuCell"></div>\n                </div>\n            </div>' : '<div class="authWidget_unauthorized">\n                <!-- div class="authWidget-loginButton">' + T.getText('auth.login') + '</div -->\n                <div class="authWidget-loginButton account account-user-login"></div>\n            </div>';

	            if (vm.nickName) {
	                var dropdownItems = [];

	                if (this._options.showAccountLink) {
	                    dropdownItems.push({
	                        title: T.getText('auth.myAccount'),
	                        link: this._options.accountLink,
	                        id: 'AuthWidgetAccountLink',
	                        newWindow: true,
	                        iconClass: 'account account-personal-area'
	                    });
	                }

	                if (this._options.showMapLink) {
	                    var defaultMapLink = '//maps.kosmosnimki.ru/api/index.html?' + encodeURIComponent('@' + vm.login);
	                    dropdownItems.push({
	                        title: T.getText('auth.myMap'),
	                        link: this._options.mapLink || defaultMapLink,
	                        id: 'AuthWidgetMapLink',
	                        newWindow: true,
	                        iconClass: 'account account-personal-map'
	                    });
	                }

	                dropdownItems.push({
	                    title: T.getText('auth.logout'),
	                    className: 'authWidget-logoutButton',
	                    iconClass: 'account account-exit'
	                });

	                var dropdownMenuWidget = new DropdownMenuWidget({
	                    items: [{
	                        title: vm.nickName,
	                        dropdown: dropdownItems
	                    }]
	                });

	                dropdownMenuWidget.appendTo(this._view.querySelector('.authWidget-userPanel-userMenuCell'));
	            }

	            var loginBtn = this._view.querySelector('.authWidget-loginButton');
	            if (loginBtn) {
	                loginBtn.addEventListener('click', function (e) {
	                    var $iframeContainer;
	                    // if (this._options.loginDialog) {

	                    //     $iframeContainer = document.createElement('div');
	                    //     $iframeContainer.classList.add('authWidget-iframeContainer');
	                    //     var dialog = $iframeContainer.dialog({
	                    //         width: 500,
	                    //         height: 450,
	                    //         closeText: T.getText('auth.closeDialog'),
	                    //         close: (je, ui) => {
	                    //             $(this).dialog('destroy');
	                    //         }
	                    //     });
	                    //     // HACK:
	                    //     let btn = $iframeContainer.querySelector('button.ui-button');
	                    //     if (btn) {
	                    //         btn.classList.add('ui-icon');
	                    //         btn.style.outline = 'none';
	                    //     }                                
	                    // }

	                    _this2._authManager.login({
	                        iframeContainer: $iframeContainer && $iframeContainer[0]
	                    });
	                });
	            }

	            var logoutBtn = this._view.querySelector('.authWidget-logoutButton');
	            if (logoutBtn) {
	                logoutBtn.addEventListener('click', function (e) {
	                    _this2._authManager.logout().then(function (response) {
	                        _this2._render(response);
	                        _this2._userInfo = response.Result;
	                        var event = document.createEvent('Event');
	                        event.initEvent('logout', false, false);
	                        _this2.dispatchEvent(event);
	                    });
	                });
	            }
	        }

	        /** Получить информацию о пользователе, которую вернул AuthManager
	         * @return {Object}
	         */

	    }, {
	        key: 'getUserInfo',
	        value: function getUserInfo() {
	            return this._userInfo;
	        }
	    }, {
	        key: 'appendTo',
	        value: function appendTo(placeholder) {
	            placeholder.appendChild(this._view);
	        }
	    }]);
	    return AuthWidget;
	}(EventTarget);

	//TODO: использовать ли библиотеку?
	function parseUri(str) {
	    var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
	        key = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
	        m = parser.exec(str),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[key[i]] = m[i] || "";
	    } // HACK
	    uri.hostOnly = uri.host;
	    uri.host = uri.authority;

	    return uri;
	}

	var requests = {};
	var lastRequestId = 0;
	var uniquePrefix = "id" + Math.random();

	function processMessage(e) {
	    if (e.origin in requests) {
	        var dataStr = decodeURIComponent(e.data.replace(/\n/g, '\n\\'));
	        try {
	            var dataObj = JSON.parse(dataStr);
	            var request = requests[e.origin][dataObj.CallbackName];
	            if (request) {
	                delete requests[e.origin][dataObj.CallbackName];
	                request.iframe.parentNode.removeChild(request.iframe);
	                request.callback && request.callback(dataObj);
	            }
	        } catch (e) {}
	    }
	}

	//совместимость с IE8
	if (window.addEventListener) {
	    window.addEventListener('message', processMessage);
	} else {
	    window.attachEvent('onmessage', processMessage);
	}

	function addQueryVariables(url, variables) {
	    var oldQueryString = url.split('?')[1];
	    var newQueryString = '';
	    for (var variable in variables) {
	        if (variables.hasOwnProperty(variable)) {
	            newQueryString += '&' + variable + '=' + encodeURIComponent(variables[variable]);
	        }
	    }
	    if (oldQueryString) {
	        return url + newQueryString;
	    } else {
	        return url + '?' + newQueryString.slice(1);
	    }
	}

	function createPostIframe(id) {
	    var iframe = document.createElement("iframe");
	    iframe.style.display = 'none';
	    iframe.setAttribute('id', id);
	    iframe.setAttribute('name', id);
	    iframe.src = 'javascript:true';

	    return iframe;
	}

	var Server = function () {
	    function Server(_ref) {
	        var root = _ref.root;
	        classCallCheck(this, Server);

	        this._root = root;
	    }

	    /** Послать GET запрос к серверу ресурсов.
	     * @param  {String} url
	     * @param  {Object} params
	     * @return {Function} promise(data)
	     */


	    createClass(Server, [{
	        key: "sendGetRequest",
	        value: function sendGetRequest(url, params) {
	            var _this = this;

	            return new Promise(function (resolve, reject) {
	                var requestUrl = _this._root + "/" + url;
	                requestUrl = addQueryVariables(requestUrl, params);
	                sendCrossDomainJSONRequest(requestUrl, function (data) {
	                    return resolve(data);
	                }, 'CallbackName', function (errors) {
	                    return reject({ Status: 'error' });
	                });
	            });
	        }

	        /** Послать к серверу ресурсов запрос за картинкой.
	         * @param  {String} url
	         * @param  {Object} params
	         * @return {Function} promise(image)
	         */

	    }, {
	        key: "sendImageRequest",
	        value: function sendImageRequest(url, params) {
	            var requestUrl = this._root + "/" + url;
	            requestUrl = addQueryVariables(requestUrl, params);

	            var img = new Image();

	            img.onload = function () {
	                return resolve({ Status: 'ok', Result: img });
	            };
	            img.onerror = function (errors) {
	                return reject(errors);
	            };
	            img.src = requestUrl;
	        }

	        /** Послать POST запрос к серверу ресурсов.
	         * @param  {String} url
	         * @param  {Object} params
	         * @param  {HTMLFormElement} baseForm HTML Form, которая может быть использована как основа для посылки запроса (например, если нужно загрузить файл)
	         * @return {Function} promise(data)
	         */

	    }, {
	        key: "sendPostRequest",
	        value: function sendPostRequest(url, params, baseForm) {
	            var requestURL = this._root + "/" + url;
	            return new Promise(function (resolve, reject) {
	                var processResponse = function processResponse(response) {
	                    if (response.Status !== 'ok') {
	                        reject(response);
	                    } else {
	                        resolve(response);
	                    }
	                };

	                try {

	                    var id = "" + uniquePrefix + lastRequestId++;
	                    var iframe = createPostIframe(id);
	                    var parsedURL = parseUri(requestURL);
	                    var origin = (parsedURL.protocol ? parsedURL.protocol + ":" : window.location.protocol) + ("//" + (parsedURL.host || window.location.host));
	                    var originalFormAction = void 0;
	                    var form = void 0;

	                    requests[origin] = requests[origin] || {};
	                    requests[origin][id] = { callback: processResponse, iframe: iframe };

	                    if (baseForm) {
	                        form = baseForm;
	                        originalFormAction = form.getAttribute('action');
	                        form.setAttribute('action', requestURL);
	                        form.target = id;
	                    } else {
	                        form = document.createElement('form');
	                        form.style.display = 'none';
	                        form.setAttribute('enctype', 'multipart/form-data');
	                        form.target = id;
	                        form.setAttribute('method', 'POST');
	                        form.setAttribute('action', requestURL);
	                        form.id = id;
	                    }

	                    var hiddenParamsDiv = document.createElement("div");
	                    hiddenParamsDiv.style.display = 'none';

	                    var appendFormParam = function appendFormParam(paramName, paramValue) {
	                        var input = document.createElement("input");
	                        paramValue = typeof paramValue !== 'undefined' ? paramValue : '';

	                        input.setAttribute('type', 'hidden');
	                        input.setAttribute('name', paramName);
	                        input.setAttribute('value', paramValue);

	                        hiddenParamsDiv.appendChild(input);
	                    };

	                    for (var paramName in params) {
	                        appendFormParam(paramName, params[paramName]);
	                    }

	                    appendFormParam('WrapStyle', 'message');
	                    appendFormParam('CallbackName', id);

	                    form.appendChild(hiddenParamsDiv);

	                    if (!baseForm) document.body.appendChild(form);

	                    document.body.appendChild(iframe);

	                    form.submit();

	                    if (baseForm) {
	                        form.removeChild(hiddenParamsDiv);
	                        if (originalFormAction !== null) form.setAttribute('action', originalFormAction);else form.removeAttribute('action');
	                    } else {
	                        form.parentNode.removeChild(form);
	                    }
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        }
	    }]);
	    return Server;
	}();

	var ResourceServer = function (_Server) {
	    inherits(ResourceServer, _Server);

	    function ResourceServer(authManager, _ref) {
	        var id = _ref.id,
	            root = _ref.root;
	        classCallCheck(this, ResourceServer);

	        var _this = possibleConstructorReturn(this, (ResourceServer.__proto__ || Object.getPrototypeOf(ResourceServer)).call(this, { root: root }));

	        _this._id = id;
	        _this._authManager = authManager;
	        _this._authManager.$addResourceServer(_this);
	        return _this;
	    }

	    createClass(ResourceServer, [{
	        key: 'sendGetRequest',
	        value: function sendGetRequest(url, params, baseForm) {
	            var _this2 = this;

	            params = params || {};
	            params.sync = this._authManager.$getAntiCsrfToken();
	            return new Promise(function (resolve, reject) {
	                get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendGetRequest', _this2).call(_this2, url, params, baseForm).then(function (data) {
	                    data.Service = { ServerId: _this2._id };
	                    if (data.Status === 'ok') {
	                        resolve(data);
	                    } else {
	                        reject(data);
	                    }
	                }).catch(function (errors) {
	                    return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
	                });
	            });
	        }
	    }, {
	        key: 'sendImageRequest',
	        value: function sendImageRequest(url, params, baseForm) {
	            var _this3 = this;

	            params = params || {};
	            params.sync = this._authManager.$getAntiCsrfToken();
	            return new Promise(function (resolve, reject) {
	                get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendImageRequest', _this3).call(_this3, url, params, baseForm).then(function (data) {
	                    data.Service = { ServerId: _this3._id };
	                    if (data.Status === 'ok') {
	                        resolve(data);
	                    } else {
	                        reject(data);
	                    }
	                }).catch(function (errors) {
	                    return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
	                });
	            });
	        }
	    }, {
	        key: 'sendPostRequest',
	        value: function sendPostRequest(url, params, baseForm) {
	            var _this4 = this;

	            params = params || {};
	            params.sync = this._authManager.$getAntiCsrfToken();
	            return new Promise(function (resolve, reject) {
	                get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendPostRequest', _this4).call(_this4, url, params, baseForm).then(function (data) {
	                    data.Service = { ServerId: _this4._id };
	                    if (data.Status === 'ok') {
	                        resolve(data);
	                    } else {
	                        reject(data);
	                    }
	                }).catch(function (errors) {
	                    return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
	                });
	            });
	        }
	    }]);
	    return ResourceServer;
	}(Server);

	var resourceServersInstances = {};
	var resourceServersConstructors = {};
	var authManager = void 0;

	// зашиваем известные и часто-используемые ресурсы
	resourceServersConstructors['subscriptions'] = function () {
	    return new ResourceServer(authManager, {
	        id: 'subscriptions',
	        root: '//fires.kosmosnimki.ru/SAPIv2'
	    });
	};

	resourceServersConstructors['geomixer2'] = function () {
	    return new ResourceServer(authManager, {
	        id: 'geomixer2',
	        root: '//maps2.kosmosnimki.ru'
	    });
	};

	resourceServersConstructors['geomixer'] = function () {
	    return new ResourceServer(authManager, {
	        id: 'geomixer',
	        root: '//maps.kosmosnimki.ru'
	    });
	};

	resourceServersConstructors['geocode'] = function () {
	    return new ResourceServer(authManager, {
	        id: 'geocode',
	        root: '//geocode.kosmosnimki.ru'
	    });
	};

	function getResourceServer(id) {
	    if (!authManager) {
	        authManager = getAuthManager();
	    }
	    // используем lazy instantiation для отложенного создания
	    // необходимых нам компонентов
	    if (!resourceServersInstances[id]) {
	        resourceServersInstances[id] = resourceServersConstructors[id]();
	    }
	    return resourceServersInstances[id];
	}

	function getAuthManager() {
	    // то же и с authManager
	    if (!authManager) {
	        authManager = new AuthManager({
	            authorizationEndpoint: '//my.kosmosnimki.ru/Test/LoginDialog',
	            userInfoEndpoint: '//my.kosmosnimki.ru/oAuth/LoginDialog',
	            redirectEndpointHtml: location.href.replace(/[^\/]+$/, '') + 'oAuth2/oAuthCallback.htm',
	            redirectEndpointAshx: location.href.replace(/[^\/]+$/, '') + 'oAuth2/oAuthCallback.ashx',
	            credentialLoginEndpoint: '//my.kosmosnimki.ru/Handler/Login'
	        });
	    }
	    return authManager;
	}

	var AuthManagerService = function () {
	    function AuthManagerService(config) {
	        classCallCheck(this, AuthManagerService);


	        this._application = config.application;

	        this._authManager = getAuthManager();

	        this._catalogResourceServer = new ResourceServer(this._authManager, {
	            id: 'Catalog',
	            root: this._getAuthBaseUrl()
	        });
	    }

	    createClass(AuthManagerService, [{
	        key: '_getAuthBaseUrl',
	        value: function _getAuthBaseUrl() {

	            return location.protocol + '//' + location.host + location.pathname.substr(0, location.pathname.lastIndexOf('/'));
	        }
	    }, {
	        key: 'getAuthManager',
	        value: function getAuthManager$$1() {

	            return this._authManager;
	        }
	    }, {
	        key: 'getCatalogResourceServer',
	        value: function getCatalogResourceServer() {

	            return this._catalogResourceServer;
	        }
	    }, {
	        key: 'createOrder',
	        value: function createOrder() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._catalogResourceServer.sendPostRequest('CreateOrder.ashx', params);
	        }
	    }, {
	        key: 'getUserInfo',
	        value: function getUserInfo() {

	            return this._authManager.getUserInfo();
	        }
	    }, {
	        key: 'getShapeMetadata',
	        value: function getShapeMetadata(url, params) {

	            return this._catalogResourceServer.sendPostRequest(url, params);
	        }
	    }, {
	        key: 'downloadCsvFile',
	        value: function downloadCsvFile(url, params) {

	            return this._catalogResourceServer.sendPostRequest(url, params);
	        }
	    }]);
	    return AuthManagerService;
	}();

	var GmxResourceServerService = function () {
	    function GmxResourceServerService(config) {
	        classCallCheck(this, GmxResourceServerService);


	        this._application = config.application;

	        this._gmxResourceService = getResourceServer('geomixer');
	    }

	    createClass(GmxResourceServerService, [{
	        key: 'getGmxResourceServer',
	        value: function getGmxResourceServer() {

	            return this._gmxResourceService;
	        }
	    }, {
	        key: 'getLayerId',
	        value: function getLayerId() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceService.sendGetRequest('Layer/GetLayerInfo.ashx', params);
	        }
	    }, {
	        key: 'vectorLayerSearch',
	        value: function vectorLayerSearch() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceService.sendPostRequest('VectorLayer/Search.ashx', params);
	        }
	    }, {
	        key: 'makeFile',
	        value: function makeFile(url) {
	            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


	            return this._gmxResourceService.sendPostRequest(url, params);
	        }
	    }, {
	        key: 'downloadCommonFile',
	        value: function downloadCommonFile(url) {

	            return this._gmxResourceService.sendPostRequest(url);
	        }
	    }, {
	        key: 'createPermalink',
	        value: function createPermalink() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceService.sendPostRequest('TinyReference/Create.ashx', params);
	        }
	    }, {
	        key: 'readPermalink',
	        value: function readPermalink() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceService.sendPostRequest('TinyReference/Get.ashx', params);
	        }
	    }]);
	    return GmxResourceServerService;
	}();

	var AdapterCore = function () {
	    function AdapterCore(_ref) {
	        var layer = _ref.layer,
	            gmxResourceServer = _ref.gmxResourceServer,
	            application = _ref.application;
	        classCallCheck(this, AdapterCore);


	        this._layer = layer;
	        this._gmxResourceServer = gmxResourceServer;
	        this._geometries = [];

	        this._application = application;
	    }

	    createClass(AdapterCore, [{
	        key: '_getAuthorized',
	        value: function _getAuthorized() {

	            var store = this._application.getStore();
	            var userInfo = store.getData('userInfo');

	            return userInfo['IsAuthenticated'] && userInfo['Role'] === ACCESS_USER_ROLE;
	        }
	    }, {
	        key: '_formatDate',
	        value: function _formatDate(date) {
	            return moment(date).format('YYYY-MM-DD');
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            var _this = this;

	            var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	            return new Promise(function (resolve, reject) {
	                var rq = _extends({}, _this.request, {
	                    pagesize: limit
	                });
	                _this._gmxResourceServer.sendPostRequest('VectorLayer/Search.ashx', rq).then(function (response) {
	                    if (response.Status === 'ok') {
	                        resolve(response.Result);
	                    } else {
	                        reject(response);
	                    }
	                }).catch(function (e) {
	                    var _e$ErrorInfo$ErrorMes = e.ErrorInfo.ErrorMessage,
	                        ErrorMessage = _e$ErrorInfo$ErrorMes === undefined ? '' : _e$ErrorInfo$ErrorMes;

	                    var exceptError = new Error(ErrorMessage);
	                    reject(exceptError);
	                });
	            });
	        }
	    }, {
	        key: 'criteria',
	        set: function set$$1(value) {
	            this._criteria = value;
	        },
	        get: function get$$1() {
	            return this._criteria;
	        }
	    }, {
	        key: 'satellites',
	        get: function get$$1() {
	            var _this2 = this;

	            var serialize = function serialize(s) {
	                return Object.keys(s).reduce(function (a, k) {
	                    return a.concat(s[k]);
	                }, []);
	            };
	            var _criteria = this._criteria,
	                satellites = _criteria.satellites,
	                archive = _criteria.archive;


	            var ms = satellites.ms;
	            var pc = satellites.pc;
	            /*if (this._getAuthorized()) {
	                ms = satellites.ms.filter(item => satellitesIds.indexOf(item.id) === -1);
	                pc = satellites.pc.filter(item => satellitesIds.indexOf(item.id) === -1);
	            }*/

	            var ss = serialize(ms).concat(serialize(pc));
	            var platformsList = ss.filter(function (x) {
	                return x.checked;
	            }).map(function (x) {
	                return '(' + x.condition(archive, _this2._getAuthorized()) + ')';
	            });
	            var newPlatforms = [];
	            platformsList.forEach(function (item) {
	                if (item !== '()') {
	                    newPlatforms.push(item);
	                }
	            });
	            if (newPlatforms.length < 1) {
	                newPlatforms.push('platform IN (\'_NO_\') AND islocal = FALSE');
	            }
	            return '(' + newPlatforms.join(' OR ') + ')';
	        }
	    }, {
	        key: 'geometries',
	        get: function get$$1() {
	            return this._geometries;
	        },
	        set: function set$$1(value) {
	            this._geometries = value;
	        }
	    }, {
	        key: 'geometry',
	        get: function get$$1() {
	            return {
	                type: 'GeometryCollection',
	                geometries: this._geometries
	            };
	        }
	    }, {
	        key: 'hasGeometry',
	        get: function get$$1() {
	            return Array.isArray(this._geometries) && this._geometries.length > 0;
	        }
	    }, {
	        key: 'date',
	        get: function get$$1() {
	            var _criteria2 = this._criteria,
	                date = _criteria2.date,
	                annually = _criteria2.annually;

	            var _date = slicedToArray(date, 2),
	                dateStart = _date[0],
	                dateEnd = _date[1];

	            if (annually) {
	                var dcr = [];
	                var startMonth = dateStart.getMonth();
	                var startDay = dateStart.getDate();
	                var endMonth = dateEnd.getMonth();
	                var endDay = dateEnd.getDate();
	                var endYear = dateEnd.getFullYear();
	                if (startMonth > endMonth) {
	                    --endYear;
	                }
	                for (var year = dateStart.getFullYear(); year <= endYear; year++) {
	                    var start = new Date(year, startMonth, startDay);
	                    var end = new Date(startMonth > endMonth ? year + 1 : year, endMonth, endDay);
	                    dcr.push('(acqdate >= \'' + this._formatDate(start) + '\' AND acqdate <= \'' + this._formatDate(end) + '\')');
	                }
	                return '(' + dcr.join(' OR ') + ')';
	            } else {
	                return '(acqdate >= \'' + this._formatDate(dateStart) + '\' AND acqdate <= \'' + this._formatDate(dateEnd) + '\')';
	            }
	        }
	    }, {
	        key: 'clouds',
	        get: function get$$1() {
	            var clouds = this._criteria.clouds;

	            var _clouds = slicedToArray(clouds, 2),
	                min = _clouds[0],
	                max = _clouds[1];

	            return '(cloudness IS NULL OR cloudness < 0 OR (cloudness >= ' + min.toFixed(1) + ' AND cloudness <= ' + max.toFixed(1) + '))';
	        }
	    }, {
	        key: 'angle',
	        get: function get$$1() {
	            var angle = this._criteria.angle;

	            var _angle = slicedToArray(angle, 2),
	                min = _angle[0],
	                max = _angle[1];

	            return '(tilt IS NULL OR tilt < 0 OR (tilt >= ' + min.toFixed(1) + ' AND tilt <= ' + max.toFixed(1) + '))';
	        }
	    }, {
	        key: 'stereo',
	        get: function get$$1() {
	            var stereo = this._criteria.stereo;

	            return stereo ? "NOT (stereo IS NULL OR stereo = 'NONE')" : '';
	        }
	    }, {
	        key: 'spatial',
	        get: function get$$1() {
	            return 'Intersects([geomixergeojson], buffer(GeometryFromGeoJson(\'' + JSON.stringify(this.geometry) + '\', 4326), 0.001))';
	        }
	    }, {
	        key: 'archive',
	        get: function get$$1() {
	            var archive = this._criteria.archive;

	            switch (archive) {
	                case 'global':
	                    return 'islocal = FALSE';
	                case 'local':
	                    return 'islocal = TRUE';
	                default:
	                case 'all':
	                    return '';
	            }
	        }
	    }, {
	        key: 'st_index',
	        get: function get$$1() {
	            var _criteria3 = this._criteria,
	                _criteria3$date = slicedToArray(_criteria3.date, 2),
	                start = _criteria3$date[0],
	                end = _criteria3$date[1],
	                annually = _criteria3.annually;

	            var boxes = this.geometries.reduce(function (a, g) {
	                a.push(getBbox(g));
	                return a;
	            }, []);
	            return toQuery(stRange(start, end, boxes));
	        }
	    }, {
	        key: 'query',
	        get: function get$$1() {
	            return [this.st_index, this.spatial, this.date, this.clouds, this.angle, this.stereo, this.satellites].filter(function (x) {
	                return x.trim() !== '';
	            }).join(' AND ');
	        }
	    }, {
	        key: 'request',
	        get: function get$$1() {
	            return {
	                layer: this._layer,
	                orderby: 'acqdate',
	                orderdirection: 'desc',
	                geometry: true,
	                page: 0,
	                pagesize: 0,
	                count: 1000,
	                out_cs: 'EPSG:3857',
	                query: this.query
	            };
	        }
	    }]);
	    return AdapterCore;
	}();

	var RequestAdapter = function () {
	    function RequestAdapter(_ref) {
	        var application = _ref.application,
	            gmxResourceServer = _ref.gmxResourceServer;
	        classCallCheck(this, RequestAdapter);


	        this._application = application;

	        this._core = new AdapterCore({
	            layer: LAYER_ID,
	            gmxResourceServer: gmxResourceServer,
	            application: this._application
	        });
	    }

	    createClass(RequestAdapter, [{
	        key: '_getGeometries',
	        value: function _getGeometries() {

	            var map = this._application.getMap();
	            var store = this._application.getStore();
	            var drawingObjects = store.getData('drawings');

	            var drawingKeys = Object.keys(drawingObjects);
	            var drawings = drawingKeys.map(function (id) {
	                return drawingObjects[id];
	            });

	            var geometries = void 0;

	            if (drawings.length > 0) {

	                var visibleDrawings = drawings.filter(function (obj) {
	                    return obj.visible;
	                });

	                var preparedGeoJsonDrawings = visibleDrawings.reduce(function (drawingsArray, _ref2) {
	                    var geoJSON = _ref2.geoJSON;

	                    return drawingsArray.concat(geoJSON.geometry);
	                }, []);

	                geometries = preparedGeoJsonDrawings.reduce(function (drawingsArray, geometry) {
	                    return drawingsArray.concat(splitOn180(geometry));
	                }, []);
	            } else {

	                var bounds = map.getBounds();
	                var nw = bounds.getNorthWest();
	                var ne = bounds.getNorthEast();
	                var se = bounds.getSouthEast();
	                var sw = bounds.getSouthWest();

	                geometries = [{
	                    type: 'Polygon',
	                    coordinates: [[[nw.lng, nw.lat], [ne.lng, ne.lat], [se.lng, se.lat], [sw.lng, sw.lat], [nw.lng, nw.lat]]]
	                }];
	            }

	            return geometries;
	        }
	    }, {
	        key: 'searchContours',
	        value: function searchContours() {
	            var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;


	            var store = this._application.getStore();
	            var searchCriteria = store.getData('searchCriteria');

	            var core = this.getCore();

	            core.criteria = searchCriteria;
	            core.geometries = this._getGeometries();

	            return core.search(limit);
	        }
	    }, {
	        key: 'getCore',
	        value: function getCore() {

	            return this._core;
	        }
	    }]);
	    return RequestAdapter;
	}();

	var RequestManager = function () {
	    function RequestManager(config) {
	        classCallCheck(this, RequestManager);
	        var map = config.map,
	            application = config.application;


	        this._application = application;
	        this._map = map;

	        this._catalogResourceComponent = new AuthManagerService({
	            application: application
	        });

	        this._gmxResourceComponent = new GmxResourceServerService({
	            application: application
	        });

	        this._requestAdapterComponent = new RequestAdapter({
	            application: application,
	            gmxResourceServer: this.getGmxResourceServer()
	        });
	    }

	    // request methods


	    createClass(RequestManager, [{
	        key: 'requestGetUserInfo',
	        value: function requestGetUserInfo() {

	            return this._catalogResourceComponent.getUserInfo();
	        }
	    }, {
	        key: 'requestSearchContours',
	        value: function requestSearchContours() {
	            var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;


	            return this._requestAdapterComponent.searchContours(limit);
	        }
	    }, {
	        key: 'requestVectorLayerSearch',
	        value: function requestVectorLayerSearch() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceComponent.vectorLayerSearch(params);
	        }
	    }, {
	        key: 'requestGetLayerId',
	        value: function requestGetLayerId() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceComponent.getLayerId(params);
	        }
	    }, {
	        key: 'requestMakeFile',
	        value: function requestMakeFile(url) {
	            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


	            return this._gmxResourceComponent.makeFile(url, params);
	        }
	    }, {
	        key: 'requestCreateOrder',
	        value: function requestCreateOrder() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._catalogResourceComponent.createOrder(params);
	        }
	    }, {
	        key: 'requestGetShapeMetadata',
	        value: function requestGetShapeMetadata(url) {
	            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


	            return this._catalogResourceComponent.getShapeMetadata(url, params);
	        }
	    }, {
	        key: 'requestDownloadCsvFile',
	        value: function requestDownloadCsvFile(url) {
	            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


	            return this._catalogResourceComponent.downloadCsvFile(url, params);
	        }
	    }, {
	        key: 'requestDownloadCommonFile',
	        value: function requestDownloadCommonFile(url) {

	            return this._gmxResourceComponent.downloadCommonFile(url);
	        }
	    }, {
	        key: 'requestCreatePermalink',
	        value: function requestCreatePermalink() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceComponent.createPermalink(params);
	        }
	    }, {
	        key: 'requestReadPermalink',
	        value: function requestReadPermalink() {
	            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            return this._gmxResourceComponent.readPermalink(params);
	        }
	    }, {
	        key: 'requestShapeLoader',
	        value: function requestShapeLoader(url) {
	            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


	            return fetch(url, params);
	        }
	    }, {
	        key: 'requestIdLoader',
	        value: function requestIdLoader(url) {
	            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


	            return fetch(url, params);
	        }

	        // service methods

	    }, {
	        key: 'getAuthManager',
	        value: function getAuthManager() {

	            return this._catalogResourceComponent.getAuthManager();
	        }
	    }, {
	        key: 'getCatalogResourceServer',
	        value: function getCatalogResourceServer() {

	            return this._catalogResourceComponent.getCatalogResourceServer();
	        }
	    }, {
	        key: 'getGmxResourceServer',
	        value: function getGmxResourceServer() {

	            return this._gmxResourceComponent.getGmxResourceServer();
	        }
	    }]);
	    return RequestManager;
	}();

	var underscore = createCommonjsModule(function (module, exports) {
	  //     Underscore.js 1.9.1
	  //     http://underscorejs.org
	  //     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	  //     Underscore may be freely distributed under the MIT license.

	  (function () {

	    // Baseline setup
	    // --------------

	    // Establish the root object, `window` (`self`) in the browser, `global`
	    // on the server, or `this` in some virtual machines. We use `self`
	    // instead of `window` for `WebWorker` support.
	    var root = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self.self === self && self || _typeof(commonjsGlobal) == 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal || this || {};

	    // Save the previous value of the `_` variable.
	    var previousUnderscore = root._;

	    // Save bytes in the minified (but not gzipped) version:
	    var ArrayProto = Array.prototype,
	        ObjProto = Object.prototype;
	    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

	    // Create quick reference variables for speed access to core prototypes.
	    var push = ArrayProto.push,
	        slice = ArrayProto.slice,
	        toString = ObjProto.toString,
	        hasOwnProperty = ObjProto.hasOwnProperty;

	    // All **ECMAScript 5** native function implementations that we hope to use
	    // are declared here.
	    var nativeIsArray = Array.isArray,
	        nativeKeys = Object.keys,
	        nativeCreate = Object.create;

	    // Naked function reference for surrogate-prototype-swapping.
	    var Ctor = function Ctor() {};

	    // Create a safe reference to the Underscore object for use below.
	    var _ = function _(obj) {
	      if (obj instanceof _) return obj;
	      if (!(this instanceof _)) return new _(obj);
	      this._wrapped = obj;
	    };

	    // Export the Underscore object for **Node.js**, with
	    // backwards-compatibility for their old module API. If we're in
	    // the browser, add `_` as a global object.
	    // (`nodeType` is checked to ensure that `module`
	    // and `exports` are not HTML elements.)
	    if (!exports.nodeType) {
	      if (!module.nodeType && module.exports) {
	        exports = module.exports = _;
	      }
	      exports._ = _;
	    } else {
	      root._ = _;
	    }

	    // Current version.
	    _.VERSION = '1.9.1';

	    // Internal function that returns an efficient (for current engines) version
	    // of the passed-in callback, to be repeatedly applied in other Underscore
	    // functions.
	    var optimizeCb = function optimizeCb(func, context, argCount) {
	      if (context === void 0) return func;
	      switch (argCount == null ? 3 : argCount) {
	        case 1:
	          return function (value) {
	            return func.call(context, value);
	          };
	        // The 2-argument case is omitted because we’re not using it.
	        case 3:
	          return function (value, index, collection) {
	            return func.call(context, value, index, collection);
	          };
	        case 4:
	          return function (accumulator, value, index, collection) {
	            return func.call(context, accumulator, value, index, collection);
	          };
	      }
	      return function () {
	        return func.apply(context, arguments);
	      };
	    };

	    var builtinIteratee;

	    // An internal function to generate callbacks that can be applied to each
	    // element in a collection, returning the desired result — either `identity`,
	    // an arbitrary callback, a property matcher, or a property accessor.
	    var cb = function cb(value, context, argCount) {
	      if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
	      if (value == null) return _.identity;
	      if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	      if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
	      return _.property(value);
	    };

	    // External wrapper for our callback generator. Users may customize
	    // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
	    // This abstraction hides the internal-only argCount argument.
	    _.iteratee = builtinIteratee = function builtinIteratee(value, context) {
	      return cb(value, context, Infinity);
	    };

	    // Some functions take a variable number of arguments, or a few expected
	    // arguments at the beginning and then a variable number of values to operate
	    // on. This helper accumulates all remaining arguments past the function’s
	    // argument length (or an explicit `startIndex`), into an array that becomes
	    // the last argument. Similar to ES6’s "rest parameter".
	    var restArguments = function restArguments(func, startIndex) {
	      startIndex = startIndex == null ? func.length - 1 : +startIndex;
	      return function () {
	        var length = Math.max(arguments.length - startIndex, 0),
	            rest = Array(length),
	            index = 0;
	        for (; index < length; index++) {
	          rest[index] = arguments[index + startIndex];
	        }
	        switch (startIndex) {
	          case 0:
	            return func.call(this, rest);
	          case 1:
	            return func.call(this, arguments[0], rest);
	          case 2:
	            return func.call(this, arguments[0], arguments[1], rest);
	        }
	        var args = Array(startIndex + 1);
	        for (index = 0; index < startIndex; index++) {
	          args[index] = arguments[index];
	        }
	        args[startIndex] = rest;
	        return func.apply(this, args);
	      };
	    };

	    // An internal function for creating a new object that inherits from another.
	    var baseCreate = function baseCreate(prototype) {
	      if (!_.isObject(prototype)) return {};
	      if (nativeCreate) return nativeCreate(prototype);
	      Ctor.prototype = prototype;
	      var result = new Ctor();
	      Ctor.prototype = null;
	      return result;
	    };

	    var shallowProperty = function shallowProperty(key) {
	      return function (obj) {
	        return obj == null ? void 0 : obj[key];
	      };
	    };

	    var has = function has(obj, path) {
	      return obj != null && hasOwnProperty.call(obj, path);
	    };

	    var deepGet = function deepGet(obj, path) {
	      var length = path.length;
	      for (var i = 0; i < length; i++) {
	        if (obj == null) return void 0;
	        obj = obj[path[i]];
	      }
	      return length ? obj : void 0;
	    };

	    // Helper for collection methods to determine whether a collection
	    // should be iterated as an array or as an object.
	    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	    var getLength = shallowProperty('length');
	    var isArrayLike = function isArrayLike(collection) {
	      var length = getLength(collection);
	      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	    };

	    // Collection Functions
	    // --------------------

	    // The cornerstone, an `each` implementation, aka `forEach`.
	    // Handles raw objects in addition to array-likes. Treats all
	    // sparse array-likes as if they were dense.
	    _.each = _.forEach = function (obj, iteratee, context) {
	      iteratee = optimizeCb(iteratee, context);
	      var i, length;
	      if (isArrayLike(obj)) {
	        for (i = 0, length = obj.length; i < length; i++) {
	          iteratee(obj[i], i, obj);
	        }
	      } else {
	        var keys = _.keys(obj);
	        for (i = 0, length = keys.length; i < length; i++) {
	          iteratee(obj[keys[i]], keys[i], obj);
	        }
	      }
	      return obj;
	    };

	    // Return the results of applying the iteratee to each element.
	    _.map = _.collect = function (obj, iteratee, context) {
	      iteratee = cb(iteratee, context);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          results = Array(length);
	      for (var index = 0; index < length; index++) {
	        var currentKey = keys ? keys[index] : index;
	        results[index] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	    };

	    // Create a reducing function iterating left or right.
	    var createReduce = function createReduce(dir) {
	      // Wrap code that reassigns argument variables in a separate function than
	      // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
	      var reducer = function reducer(obj, iteratee, memo, initial) {
	        var keys = !isArrayLike(obj) && _.keys(obj),
	            length = (keys || obj).length,
	            index = dir > 0 ? 0 : length - 1;
	        if (!initial) {
	          memo = obj[keys ? keys[index] : index];
	          index += dir;
	        }
	        for (; index >= 0 && index < length; index += dir) {
	          var currentKey = keys ? keys[index] : index;
	          memo = iteratee(memo, obj[currentKey], currentKey, obj);
	        }
	        return memo;
	      };

	      return function (obj, iteratee, memo, context) {
	        var initial = arguments.length >= 3;
	        return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
	      };
	    };

	    // **Reduce** builds up a single result from a list of values, aka `inject`,
	    // or `foldl`.
	    _.reduce = _.foldl = _.inject = createReduce(1);

	    // The right-associative version of reduce, also known as `foldr`.
	    _.reduceRight = _.foldr = createReduce(-1);

	    // Return the first value which passes a truth test. Aliased as `detect`.
	    _.find = _.detect = function (obj, predicate, context) {
	      var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
	      var key = keyFinder(obj, predicate, context);
	      if (key !== void 0 && key !== -1) return obj[key];
	    };

	    // Return all the elements that pass a truth test.
	    // Aliased as `select`.
	    _.filter = _.select = function (obj, predicate, context) {
	      var results = [];
	      predicate = cb(predicate, context);
	      _.each(obj, function (value, index, list) {
	        if (predicate(value, index, list)) results.push(value);
	      });
	      return results;
	    };

	    // Return all the elements for which a truth test fails.
	    _.reject = function (obj, predicate, context) {
	      return _.filter(obj, _.negate(cb(predicate)), context);
	    };

	    // Determine whether all of the elements match a truth test.
	    // Aliased as `all`.
	    _.every = _.all = function (obj, predicate, context) {
	      predicate = cb(predicate, context);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length;
	      for (var index = 0; index < length; index++) {
	        var currentKey = keys ? keys[index] : index;
	        if (!predicate(obj[currentKey], currentKey, obj)) return false;
	      }
	      return true;
	    };

	    // Determine if at least one element in the object matches a truth test.
	    // Aliased as `any`.
	    _.some = _.any = function (obj, predicate, context) {
	      predicate = cb(predicate, context);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length;
	      for (var index = 0; index < length; index++) {
	        var currentKey = keys ? keys[index] : index;
	        if (predicate(obj[currentKey], currentKey, obj)) return true;
	      }
	      return false;
	    };

	    // Determine if the array or object contains a given item (using `===`).
	    // Aliased as `includes` and `include`.
	    _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	      return _.indexOf(obj, item, fromIndex) >= 0;
	    };

	    // Invoke a method (with arguments) on every item in a collection.
	    _.invoke = restArguments(function (obj, path, args) {
	      var contextPath, func;
	      if (_.isFunction(path)) {
	        func = path;
	      } else if (_.isArray(path)) {
	        contextPath = path.slice(0, -1);
	        path = path[path.length - 1];
	      }
	      return _.map(obj, function (context) {
	        var method = func;
	        if (!method) {
	          if (contextPath && contextPath.length) {
	            context = deepGet(context, contextPath);
	          }
	          if (context == null) return void 0;
	          method = context[path];
	        }
	        return method == null ? method : method.apply(context, args);
	      });
	    });

	    // Convenience version of a common use case of `map`: fetching a property.
	    _.pluck = function (obj, key) {
	      return _.map(obj, _.property(key));
	    };

	    // Convenience version of a common use case of `filter`: selecting only objects
	    // containing specific `key:value` pairs.
	    _.where = function (obj, attrs) {
	      return _.filter(obj, _.matcher(attrs));
	    };

	    // Convenience version of a common use case of `find`: getting the first object
	    // containing specific `key:value` pairs.
	    _.findWhere = function (obj, attrs) {
	      return _.find(obj, _.matcher(attrs));
	    };

	    // Return the maximum element (or element-based computation).
	    _.max = function (obj, iteratee, context) {
	      var result = -Infinity,
	          lastComputed = -Infinity,
	          value,
	          computed;
	      if (iteratee == null || typeof iteratee == 'number' && _typeof(obj[0]) != 'object' && obj != null) {
	        obj = isArrayLike(obj) ? obj : _.values(obj);
	        for (var i = 0, length = obj.length; i < length; i++) {
	          value = obj[i];
	          if (value != null && value > result) {
	            result = value;
	          }
	        }
	      } else {
	        iteratee = cb(iteratee, context);
	        _.each(obj, function (v, index, list) {
	          computed = iteratee(v, index, list);
	          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	            result = v;
	            lastComputed = computed;
	          }
	        });
	      }
	      return result;
	    };

	    // Return the minimum element (or element-based computation).
	    _.min = function (obj, iteratee, context) {
	      var result = Infinity,
	          lastComputed = Infinity,
	          value,
	          computed;
	      if (iteratee == null || typeof iteratee == 'number' && _typeof(obj[0]) != 'object' && obj != null) {
	        obj = isArrayLike(obj) ? obj : _.values(obj);
	        for (var i = 0, length = obj.length; i < length; i++) {
	          value = obj[i];
	          if (value != null && value < result) {
	            result = value;
	          }
	        }
	      } else {
	        iteratee = cb(iteratee, context);
	        _.each(obj, function (v, index, list) {
	          computed = iteratee(v, index, list);
	          if (computed < lastComputed || computed === Infinity && result === Infinity) {
	            result = v;
	            lastComputed = computed;
	          }
	        });
	      }
	      return result;
	    };

	    // Shuffle a collection.
	    _.shuffle = function (obj) {
	      return _.sample(obj, Infinity);
	    };

	    // Sample **n** random values from a collection using the modern version of the
	    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	    // If **n** is not specified, returns a single random element.
	    // The internal `guard` argument allows it to work with `map`.
	    _.sample = function (obj, n, guard) {
	      if (n == null || guard) {
	        if (!isArrayLike(obj)) obj = _.values(obj);
	        return obj[_.random(obj.length - 1)];
	      }
	      var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
	      var length = getLength(sample);
	      n = Math.max(Math.min(n, length), 0);
	      var last = length - 1;
	      for (var index = 0; index < n; index++) {
	        var rand = _.random(index, last);
	        var temp = sample[index];
	        sample[index] = sample[rand];
	        sample[rand] = temp;
	      }
	      return sample.slice(0, n);
	    };

	    // Sort the object's values by a criterion produced by an iteratee.
	    _.sortBy = function (obj, iteratee, context) {
	      var index = 0;
	      iteratee = cb(iteratee, context);
	      return _.pluck(_.map(obj, function (value, key, list) {
	        return {
	          value: value,
	          index: index++,
	          criteria: iteratee(value, key, list)
	        };
	      }).sort(function (left, right) {
	        var a = left.criteria;
	        var b = right.criteria;
	        if (a !== b) {
	          if (a > b || a === void 0) return 1;
	          if (a < b || b === void 0) return -1;
	        }
	        return left.index - right.index;
	      }), 'value');
	    };

	    // An internal function used for aggregate "group by" operations.
	    var group = function group(behavior, partition) {
	      return function (obj, iteratee, context) {
	        var result = partition ? [[], []] : {};
	        iteratee = cb(iteratee, context);
	        _.each(obj, function (value, index) {
	          var key = iteratee(value, index, obj);
	          behavior(result, value, key);
	        });
	        return result;
	      };
	    };

	    // Groups the object's values by a criterion. Pass either a string attribute
	    // to group by, or a function that returns the criterion.
	    _.groupBy = group(function (result, value, key) {
	      if (has(result, key)) result[key].push(value);else result[key] = [value];
	    });

	    // Indexes the object's values by a criterion, similar to `groupBy`, but for
	    // when you know that your index values will be unique.
	    _.indexBy = group(function (result, value, key) {
	      result[key] = value;
	    });

	    // Counts instances of an object that group by a certain criterion. Pass
	    // either a string attribute to count by, or a function that returns the
	    // criterion.
	    _.countBy = group(function (result, value, key) {
	      if (has(result, key)) result[key]++;else result[key] = 1;
	    });

	    var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
	    // Safely create a real, live array from anything iterable.
	    _.toArray = function (obj) {
	      if (!obj) return [];
	      if (_.isArray(obj)) return slice.call(obj);
	      if (_.isString(obj)) {
	        // Keep surrogate pair characters together
	        return obj.match(reStrSymbol);
	      }
	      if (isArrayLike(obj)) return _.map(obj, _.identity);
	      return _.values(obj);
	    };

	    // Return the number of elements in an object.
	    _.size = function (obj) {
	      if (obj == null) return 0;
	      return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	    };

	    // Split a collection into two arrays: one whose elements all satisfy the given
	    // predicate, and one whose elements all do not satisfy the predicate.
	    _.partition = group(function (result, value, pass) {
	      result[pass ? 0 : 1].push(value);
	    }, true);

	    // Array Functions
	    // ---------------

	    // Get the first element of an array. Passing **n** will return the first N
	    // values in the array. Aliased as `head` and `take`. The **guard** check
	    // allows it to work with `_.map`.
	    _.first = _.head = _.take = function (array, n, guard) {
	      if (array == null || array.length < 1) return n == null ? void 0 : [];
	      if (n == null || guard) return array[0];
	      return _.initial(array, array.length - n);
	    };

	    // Returns everything but the last entry of the array. Especially useful on
	    // the arguments object. Passing **n** will return all the values in
	    // the array, excluding the last N.
	    _.initial = function (array, n, guard) {
	      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	    };

	    // Get the last element of an array. Passing **n** will return the last N
	    // values in the array.
	    _.last = function (array, n, guard) {
	      if (array == null || array.length < 1) return n == null ? void 0 : [];
	      if (n == null || guard) return array[array.length - 1];
	      return _.rest(array, Math.max(0, array.length - n));
	    };

	    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	    // Especially useful on the arguments object. Passing an **n** will return
	    // the rest N values in the array.
	    _.rest = _.tail = _.drop = function (array, n, guard) {
	      return slice.call(array, n == null || guard ? 1 : n);
	    };

	    // Trim out all falsy values from an array.
	    _.compact = function (array) {
	      return _.filter(array, Boolean);
	    };

	    // Internal implementation of a recursive `flatten` function.
	    var flatten = function flatten(input, shallow, strict, output) {
	      output = output || [];
	      var idx = output.length;
	      for (var i = 0, length = getLength(input); i < length; i++) {
	        var value = input[i];
	        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	          // Flatten current level of array or arguments object.
	          if (shallow) {
	            var j = 0,
	                len = value.length;
	            while (j < len) {
	              output[idx++] = value[j++];
	            }
	          } else {
	            flatten(value, shallow, strict, output);
	            idx = output.length;
	          }
	        } else if (!strict) {
	          output[idx++] = value;
	        }
	      }
	      return output;
	    };

	    // Flatten out an array, either recursively (by default), or just one level.
	    _.flatten = function (array, shallow) {
	      return flatten(array, shallow, false);
	    };

	    // Return a version of the array that does not contain the specified value(s).
	    _.without = restArguments(function (array, otherArrays) {
	      return _.difference(array, otherArrays);
	    });

	    // Produce a duplicate-free version of the array. If the array has already
	    // been sorted, you have the option of using a faster algorithm.
	    // The faster algorithm will not work with an iteratee if the iteratee
	    // is not a one-to-one function, so providing an iteratee will disable
	    // the faster algorithm.
	    // Aliased as `unique`.
	    _.uniq = _.unique = function (array, isSorted, iteratee, context) {
	      if (!_.isBoolean(isSorted)) {
	        context = iteratee;
	        iteratee = isSorted;
	        isSorted = false;
	      }
	      if (iteratee != null) iteratee = cb(iteratee, context);
	      var result = [];
	      var seen = [];
	      for (var i = 0, length = getLength(array); i < length; i++) {
	        var value = array[i],
	            computed = iteratee ? iteratee(value, i, array) : value;
	        if (isSorted && !iteratee) {
	          if (!i || seen !== computed) result.push(value);
	          seen = computed;
	        } else if (iteratee) {
	          if (!_.contains(seen, computed)) {
	            seen.push(computed);
	            result.push(value);
	          }
	        } else if (!_.contains(result, value)) {
	          result.push(value);
	        }
	      }
	      return result;
	    };

	    // Produce an array that contains the union: each distinct element from all of
	    // the passed-in arrays.
	    _.union = restArguments(function (arrays) {
	      return _.uniq(flatten(arrays, true, true));
	    });

	    // Produce an array that contains every item shared between all the
	    // passed-in arrays.
	    _.intersection = function (array) {
	      var result = [];
	      var argsLength = arguments.length;
	      for (var i = 0, length = getLength(array); i < length; i++) {
	        var item = array[i];
	        if (_.contains(result, item)) continue;
	        var j;
	        for (j = 1; j < argsLength; j++) {
	          if (!_.contains(arguments[j], item)) break;
	        }
	        if (j === argsLength) result.push(item);
	      }
	      return result;
	    };

	    // Take the difference between one array and a number of other arrays.
	    // Only the elements present in just the first array will remain.
	    _.difference = restArguments(function (array, rest) {
	      rest = flatten(rest, true, true);
	      return _.filter(array, function (value) {
	        return !_.contains(rest, value);
	      });
	    });

	    // Complement of _.zip. Unzip accepts an array of arrays and groups
	    // each array's elements on shared indices.
	    _.unzip = function (array) {
	      var length = array && _.max(array, getLength).length || 0;
	      var result = Array(length);

	      for (var index = 0; index < length; index++) {
	        result[index] = _.pluck(array, index);
	      }
	      return result;
	    };

	    // Zip together multiple lists into a single array -- elements that share
	    // an index go together.
	    _.zip = restArguments(_.unzip);

	    // Converts lists into objects. Pass either a single array of `[key, value]`
	    // pairs, or two parallel arrays of the same length -- one of keys, and one of
	    // the corresponding values. Passing by pairs is the reverse of _.pairs.
	    _.object = function (list, values) {
	      var result = {};
	      for (var i = 0, length = getLength(list); i < length; i++) {
	        if (values) {
	          result[list[i]] = values[i];
	        } else {
	          result[list[i][0]] = list[i][1];
	        }
	      }
	      return result;
	    };

	    // Generator function to create the findIndex and findLastIndex functions.
	    var createPredicateIndexFinder = function createPredicateIndexFinder(dir) {
	      return function (array, predicate, context) {
	        predicate = cb(predicate, context);
	        var length = getLength(array);
	        var index = dir > 0 ? 0 : length - 1;
	        for (; index >= 0 && index < length; index += dir) {
	          if (predicate(array[index], index, array)) return index;
	        }
	        return -1;
	      };
	    };

	    // Returns the first index on an array-like that passes a predicate test.
	    _.findIndex = createPredicateIndexFinder(1);
	    _.findLastIndex = createPredicateIndexFinder(-1);

	    // Use a comparator function to figure out the smallest index at which
	    // an object should be inserted so as to maintain order. Uses binary search.
	    _.sortedIndex = function (array, obj, iteratee, context) {
	      iteratee = cb(iteratee, context, 1);
	      var value = iteratee(obj);
	      var low = 0,
	          high = getLength(array);
	      while (low < high) {
	        var mid = Math.floor((low + high) / 2);
	        if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;
	      }
	      return low;
	    };

	    // Generator function to create the indexOf and lastIndexOf functions.
	    var createIndexFinder = function createIndexFinder(dir, predicateFind, sortedIndex) {
	      return function (array, item, idx) {
	        var i = 0,
	            length = getLength(array);
	        if (typeof idx == 'number') {
	          if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	          } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	          }
	        } else if (sortedIndex && idx && length) {
	          idx = sortedIndex(array, item);
	          return array[idx] === item ? idx : -1;
	        }
	        if (item !== item) {
	          idx = predicateFind(slice.call(array, i, length), _.isNaN);
	          return idx >= 0 ? idx + i : -1;
	        }
	        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	          if (array[idx] === item) return idx;
	        }
	        return -1;
	      };
	    };

	    // Return the position of the first occurrence of an item in an array,
	    // or -1 if the item is not included in the array.
	    // If the array is large and already in sort order, pass `true`
	    // for **isSorted** to use binary search.
	    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	    // Generate an integer Array containing an arithmetic progression. A port of
	    // the native Python `range()` function. See
	    // [the Python documentation](http://docs.python.org/library/functions.html#range).
	    _.range = function (start, stop, step) {
	      if (stop == null) {
	        stop = start || 0;
	        start = 0;
	      }
	      if (!step) {
	        step = stop < start ? -1 : 1;
	      }

	      var length = Math.max(Math.ceil((stop - start) / step), 0);
	      var range = Array(length);

	      for (var idx = 0; idx < length; idx++, start += step) {
	        range[idx] = start;
	      }

	      return range;
	    };

	    // Chunk a single array into multiple arrays, each containing `count` or fewer
	    // items.
	    _.chunk = function (array, count) {
	      if (count == null || count < 1) return [];
	      var result = [];
	      var i = 0,
	          length = array.length;
	      while (i < length) {
	        result.push(slice.call(array, i, i += count));
	      }
	      return result;
	    };

	    // Function (ahem) Functions
	    // ------------------

	    // Determines whether to execute a function as a constructor
	    // or a normal function with the provided arguments.
	    var executeBound = function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
	      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	      var self = baseCreate(sourceFunc.prototype);
	      var result = sourceFunc.apply(self, args);
	      if (_.isObject(result)) return result;
	      return self;
	    };

	    // Create a function bound to a given object (assigning `this`, and arguments,
	    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	    // available.
	    _.bind = restArguments(function (func, context, args) {
	      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	      var bound = restArguments(function (callArgs) {
	        return executeBound(func, bound, context, this, args.concat(callArgs));
	      });
	      return bound;
	    });

	    // Partially apply a function by creating a version that has had some of its
	    // arguments pre-filled, without changing its dynamic `this` context. _ acts
	    // as a placeholder by default, allowing any combination of arguments to be
	    // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
	    _.partial = restArguments(function (func, boundArgs) {
	      var placeholder = _.partial.placeholder;
	      var bound = function bound() {
	        var position = 0,
	            length = boundArgs.length;
	        var args = Array(length);
	        for (var i = 0; i < length; i++) {
	          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
	        }
	        while (position < arguments.length) {
	          args.push(arguments[position++]);
	        }return executeBound(func, bound, this, this, args);
	      };
	      return bound;
	    });

	    _.partial.placeholder = _;

	    // Bind a number of an object's methods to that object. Remaining arguments
	    // are the method names to be bound. Useful for ensuring that all callbacks
	    // defined on an object belong to it.
	    _.bindAll = restArguments(function (obj, keys) {
	      keys = flatten(keys, false, false);
	      var index = keys.length;
	      if (index < 1) throw new Error('bindAll must be passed function names');
	      while (index--) {
	        var key = keys[index];
	        obj[key] = _.bind(obj[key], obj);
	      }
	    });

	    // Memoize an expensive function by storing its results.
	    _.memoize = function (func, hasher) {
	      var memoize = function memoize(key) {
	        var cache = memoize.cache;
	        var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	        if (!has(cache, address)) cache[address] = func.apply(this, arguments);
	        return cache[address];
	      };
	      memoize.cache = {};
	      return memoize;
	    };

	    // Delays a function for the given number of milliseconds, and then calls
	    // it with the arguments supplied.
	    _.delay = restArguments(function (func, wait, args) {
	      return setTimeout(function () {
	        return func.apply(null, args);
	      }, wait);
	    });

	    // Defers a function, scheduling it to run after the current call stack has
	    // cleared.
	    _.defer = _.partial(_.delay, _, 1);

	    // Returns a function, that, when invoked, will only be triggered at most once
	    // during a given window of time. Normally, the throttled function will run
	    // as much as it can, without ever going more than once per `wait` duration;
	    // but if you'd like to disable the execution on the leading edge, pass
	    // `{leading: false}`. To disable execution on the trailing edge, ditto.
	    _.throttle = function (func, wait, options) {
	      var timeout, context, args, result;
	      var previous = 0;
	      if (!options) options = {};

	      var later = function later() {
	        previous = options.leading === false ? 0 : _.now();
	        timeout = null;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      };

	      var throttled = function throttled() {
	        var now = _.now();
	        if (!previous && options.leading === false) previous = now;
	        var remaining = wait - (now - previous);
	        context = this;
	        args = arguments;
	        if (remaining <= 0 || remaining > wait) {
	          if (timeout) {
	            clearTimeout(timeout);
	            timeout = null;
	          }
	          previous = now;
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        } else if (!timeout && options.trailing !== false) {
	          timeout = setTimeout(later, remaining);
	        }
	        return result;
	      };

	      throttled.cancel = function () {
	        clearTimeout(timeout);
	        previous = 0;
	        timeout = context = args = null;
	      };

	      return throttled;
	    };

	    // Returns a function, that, as long as it continues to be invoked, will not
	    // be triggered. The function will be called after it stops being called for
	    // N milliseconds. If `immediate` is passed, trigger the function on the
	    // leading edge, instead of the trailing.
	    _.debounce = function (func, wait, immediate) {
	      var timeout, result;

	      var later = function later(context, args) {
	        timeout = null;
	        if (args) result = func.apply(context, args);
	      };

	      var debounced = restArguments(function (args) {
	        if (timeout) clearTimeout(timeout);
	        if (immediate) {
	          var callNow = !timeout;
	          timeout = setTimeout(later, wait);
	          if (callNow) result = func.apply(this, args);
	        } else {
	          timeout = _.delay(later, wait, this, args);
	        }

	        return result;
	      });

	      debounced.cancel = function () {
	        clearTimeout(timeout);
	        timeout = null;
	      };

	      return debounced;
	    };

	    // Returns the first function passed as an argument to the second,
	    // allowing you to adjust arguments, run code before and after, and
	    // conditionally execute the original function.
	    _.wrap = function (func, wrapper) {
	      return _.partial(wrapper, func);
	    };

	    // Returns a negated version of the passed-in predicate.
	    _.negate = function (predicate) {
	      return function () {
	        return !predicate.apply(this, arguments);
	      };
	    };

	    // Returns a function that is the composition of a list of functions, each
	    // consuming the return value of the function that follows.
	    _.compose = function () {
	      var args = arguments;
	      var start = args.length - 1;
	      return function () {
	        var i = start;
	        var result = args[start].apply(this, arguments);
	        while (i--) {
	          result = args[i].call(this, result);
	        }return result;
	      };
	    };

	    // Returns a function that will only be executed on and after the Nth call.
	    _.after = function (times, func) {
	      return function () {
	        if (--times < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    };

	    // Returns a function that will only be executed up to (but not including) the Nth call.
	    _.before = function (times, func) {
	      var memo;
	      return function () {
	        if (--times > 0) {
	          memo = func.apply(this, arguments);
	        }
	        if (times <= 1) func = null;
	        return memo;
	      };
	    };

	    // Returns a function that will be executed at most one time, no matter how
	    // often you call it. Useful for lazy initialization.
	    _.once = _.partial(_.before, 2);

	    _.restArguments = restArguments;

	    // Object Functions
	    // ----------------

	    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	    var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
	    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	    var collectNonEnumProps = function collectNonEnumProps(obj, keys) {
	      var nonEnumIdx = nonEnumerableProps.length;
	      var constructor = obj.constructor;
	      var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

	      // Constructor is a special case.
	      var prop = 'constructor';
	      if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	      while (nonEnumIdx--) {
	        prop = nonEnumerableProps[nonEnumIdx];
	        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	          keys.push(prop);
	        }
	      }
	    };

	    // Retrieve the names of an object's own properties.
	    // Delegates to **ECMAScript 5**'s native `Object.keys`.
	    _.keys = function (obj) {
	      if (!_.isObject(obj)) return [];
	      if (nativeKeys) return nativeKeys(obj);
	      var keys = [];
	      for (var key in obj) {
	        if (has(obj, key)) keys.push(key);
	      } // Ahem, IE < 9.
	      if (hasEnumBug) collectNonEnumProps(obj, keys);
	      return keys;
	    };

	    // Retrieve all the property names of an object.
	    _.allKeys = function (obj) {
	      if (!_.isObject(obj)) return [];
	      var keys = [];
	      for (var key in obj) {
	        keys.push(key);
	      } // Ahem, IE < 9.
	      if (hasEnumBug) collectNonEnumProps(obj, keys);
	      return keys;
	    };

	    // Retrieve the values of an object's properties.
	    _.values = function (obj) {
	      var keys = _.keys(obj);
	      var length = keys.length;
	      var values = Array(length);
	      for (var i = 0; i < length; i++) {
	        values[i] = obj[keys[i]];
	      }
	      return values;
	    };

	    // Returns the results of applying the iteratee to each element of the object.
	    // In contrast to _.map it returns an object.
	    _.mapObject = function (obj, iteratee, context) {
	      iteratee = cb(iteratee, context);
	      var keys = _.keys(obj),
	          length = keys.length,
	          results = {};
	      for (var index = 0; index < length; index++) {
	        var currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	    };

	    // Convert an object into a list of `[key, value]` pairs.
	    // The opposite of _.object.
	    _.pairs = function (obj) {
	      var keys = _.keys(obj);
	      var length = keys.length;
	      var pairs = Array(length);
	      for (var i = 0; i < length; i++) {
	        pairs[i] = [keys[i], obj[keys[i]]];
	      }
	      return pairs;
	    };

	    // Invert the keys and values of an object. The values must be serializable.
	    _.invert = function (obj) {
	      var result = {};
	      var keys = _.keys(obj);
	      for (var i = 0, length = keys.length; i < length; i++) {
	        result[obj[keys[i]]] = keys[i];
	      }
	      return result;
	    };

	    // Return a sorted list of the function names available on the object.
	    // Aliased as `methods`.
	    _.functions = _.methods = function (obj) {
	      var names = [];
	      for (var key in obj) {
	        if (_.isFunction(obj[key])) names.push(key);
	      }
	      return names.sort();
	    };

	    // An internal function for creating assigner functions.
	    var createAssigner = function createAssigner(keysFunc, defaults$$1) {
	      return function (obj) {
	        var length = arguments.length;
	        if (defaults$$1) obj = Object(obj);
	        if (length < 2 || obj == null) return obj;
	        for (var index = 1; index < length; index++) {
	          var source = arguments[index],
	              keys = keysFunc(source),
	              l = keys.length;
	          for (var i = 0; i < l; i++) {
	            var key = keys[i];
	            if (!defaults$$1 || obj[key] === void 0) obj[key] = source[key];
	          }
	        }
	        return obj;
	      };
	    };

	    // Extend a given object with all the properties in passed-in object(s).
	    _.extend = createAssigner(_.allKeys);

	    // Assigns a given object with all the own properties in the passed-in object(s).
	    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	    _.extendOwn = _.assign = createAssigner(_.keys);

	    // Returns the first key on an object that passes a predicate test.
	    _.findKey = function (obj, predicate, context) {
	      predicate = cb(predicate, context);
	      var keys = _.keys(obj),
	          key;
	      for (var i = 0, length = keys.length; i < length; i++) {
	        key = keys[i];
	        if (predicate(obj[key], key, obj)) return key;
	      }
	    };

	    // Internal pick helper function to determine if `obj` has key `key`.
	    var keyInObj = function keyInObj(value, key, obj) {
	      return key in obj;
	    };

	    // Return a copy of the object only containing the whitelisted properties.
	    _.pick = restArguments(function (obj, keys) {
	      var result = {},
	          iteratee = keys[0];
	      if (obj == null) return result;
	      if (_.isFunction(iteratee)) {
	        if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
	        keys = _.allKeys(obj);
	      } else {
	        iteratee = keyInObj;
	        keys = flatten(keys, false, false);
	        obj = Object(obj);
	      }
	      for (var i = 0, length = keys.length; i < length; i++) {
	        var key = keys[i];
	        var value = obj[key];
	        if (iteratee(value, key, obj)) result[key] = value;
	      }
	      return result;
	    });

	    // Return a copy of the object without the blacklisted properties.
	    _.omit = restArguments(function (obj, keys) {
	      var iteratee = keys[0],
	          context;
	      if (_.isFunction(iteratee)) {
	        iteratee = _.negate(iteratee);
	        if (keys.length > 1) context = keys[1];
	      } else {
	        keys = _.map(flatten(keys, false, false), String);
	        iteratee = function iteratee(value, key) {
	          return !_.contains(keys, key);
	        };
	      }
	      return _.pick(obj, iteratee, context);
	    });

	    // Fill in a given object with default properties.
	    _.defaults = createAssigner(_.allKeys, true);

	    // Creates an object that inherits from the given prototype object.
	    // If additional properties are provided then they will be added to the
	    // created object.
	    _.create = function (prototype, props) {
	      var result = baseCreate(prototype);
	      if (props) _.extendOwn(result, props);
	      return result;
	    };

	    // Create a (shallow-cloned) duplicate of an object.
	    _.clone = function (obj) {
	      if (!_.isObject(obj)) return obj;
	      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	    };

	    // Invokes interceptor with the obj, and then returns obj.
	    // The primary purpose of this method is to "tap into" a method chain, in
	    // order to perform operations on intermediate results within the chain.
	    _.tap = function (obj, interceptor) {
	      interceptor(obj);
	      return obj;
	    };

	    // Returns whether an object has a given set of `key:value` pairs.
	    _.isMatch = function (object, attrs) {
	      var keys = _.keys(attrs),
	          length = keys.length;
	      if (object == null) return !length;
	      var obj = Object(object);
	      for (var i = 0; i < length; i++) {
	        var key = keys[i];
	        if (attrs[key] !== obj[key] || !(key in obj)) return false;
	      }
	      return true;
	    };

	    // Internal recursive comparison function for `isEqual`.
	    var eq, deepEq;
	    eq = function eq(a, b, aStack, bStack) {
	      // Identical objects are equal. `0 === -0`, but they aren't identical.
	      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	      if (a === b) return a !== 0 || 1 / a === 1 / b;
	      // `null` or `undefined` only equal to itself (strict comparison).
	      if (a == null || b == null) return false;
	      // `NaN`s are equivalent, but non-reflexive.
	      if (a !== a) return b !== b;
	      // Exhaust primitive checks
	      var type = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	      if (type !== 'function' && type !== 'object' && (typeof b === 'undefined' ? 'undefined' : _typeof(b)) != 'object') return false;
	      return deepEq(a, b, aStack, bStack);
	    };

	    // Internal recursive comparison function for `isEqual`.
	    deepEq = function deepEq(a, b, aStack, bStack) {
	      // Unwrap any wrapped objects.
	      if (a instanceof _) a = a._wrapped;
	      if (b instanceof _) b = b._wrapped;
	      // Compare `[[Class]]` names.
	      var className = toString.call(a);
	      if (className !== toString.call(b)) return false;
	      switch (className) {
	        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	        case '[object RegExp]':
	        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	        case '[object String]':
	          // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	          // equivalent to `new String("5")`.
	          return '' + a === '' + b;
	        case '[object Number]':
	          // `NaN`s are equivalent, but non-reflexive.
	          // Object(NaN) is equivalent to NaN.
	          if (+a !== +a) return +b !== +b;
	          // An `egal` comparison is performed for other numeric values.
	          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	        case '[object Date]':
	        case '[object Boolean]':
	          // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	          // millisecond representations. Note that invalid dates with millisecond representations
	          // of `NaN` are not equivalent.
	          return +a === +b;
	        case '[object Symbol]':
	          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
	      }

	      var areArrays = className === '[object Array]';
	      if (!areArrays) {
	        if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) != 'object' || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) != 'object') return false;

	        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	        // from different frames are.
	        var aCtor = a.constructor,
	            bCtor = b.constructor;
	        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {
	          return false;
	        }
	      }
	      // Assume equality for cyclic structures. The algorithm for detecting cyclic
	      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	      // Initializing stack of traversed objects.
	      // It's done here since we only need them for objects and arrays comparison.
	      aStack = aStack || [];
	      bStack = bStack || [];
	      var length = aStack.length;
	      while (length--) {
	        // Linear search. Performance is inversely proportional to the number of
	        // unique nested structures.
	        if (aStack[length] === a) return bStack[length] === b;
	      }

	      // Add the first object to the stack of traversed objects.
	      aStack.push(a);
	      bStack.push(b);

	      // Recursively compare objects and arrays.
	      if (areArrays) {
	        // Compare array lengths to determine if a deep comparison is necessary.
	        length = a.length;
	        if (length !== b.length) return false;
	        // Deep compare the contents, ignoring non-numeric properties.
	        while (length--) {
	          if (!eq(a[length], b[length], aStack, bStack)) return false;
	        }
	      } else {
	        // Deep compare objects.
	        var keys = _.keys(a),
	            key;
	        length = keys.length;
	        // Ensure that both objects contain the same number of properties before comparing deep equality.
	        if (_.keys(b).length !== length) return false;
	        while (length--) {
	          // Deep compare each member
	          key = keys[length];
	          if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	        }
	      }
	      // Remove the first object from the stack of traversed objects.
	      aStack.pop();
	      bStack.pop();
	      return true;
	    };

	    // Perform a deep comparison to check if two objects are equal.
	    _.isEqual = function (a, b) {
	      return eq(a, b);
	    };

	    // Is a given array, string, or object empty?
	    // An "empty" object has no enumerable own-properties.
	    _.isEmpty = function (obj) {
	      if (obj == null) return true;
	      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	      return _.keys(obj).length === 0;
	    };

	    // Is a given value a DOM element?
	    _.isElement = function (obj) {
	      return !!(obj && obj.nodeType === 1);
	    };

	    // Is a given value an array?
	    // Delegates to ECMA5's native Array.isArray
	    _.isArray = nativeIsArray || function (obj) {
	      return toString.call(obj) === '[object Array]';
	    };

	    // Is a given variable an object?
	    _.isObject = function (obj) {
	      var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
	      return type === 'function' || type === 'object' && !!obj;
	    };

	    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
	    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function (name) {
	      _['is' + name] = function (obj) {
	        return toString.call(obj) === '[object ' + name + ']';
	      };
	    });

	    // Define a fallback version of the method in browsers (ahem, IE < 9), where
	    // there isn't any inspectable "Arguments" type.
	    if (!_.isArguments(arguments)) {
	      _.isArguments = function (obj) {
	        return has(obj, 'callee');
	      };
	    }

	    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	    // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
	    var nodelist = root.document && root.document.childNodes;
	    if ((typeof Int8Array === 'undefined' ? 'undefined' : _typeof(Int8Array)) != 'object' && typeof nodelist != 'function') {
	      _.isFunction = function (obj) {
	        return typeof obj == 'function' || false;
	      };
	    }

	    // Is a given object a finite number?
	    _.isFinite = function (obj) {
	      return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
	    };

	    // Is the given value `NaN`?
	    _.isNaN = function (obj) {
	      return _.isNumber(obj) && isNaN(obj);
	    };

	    // Is a given value a boolean?
	    _.isBoolean = function (obj) {
	      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	    };

	    // Is a given value equal to null?
	    _.isNull = function (obj) {
	      return obj === null;
	    };

	    // Is a given variable undefined?
	    _.isUndefined = function (obj) {
	      return obj === void 0;
	    };

	    // Shortcut function for checking if an object has a given property directly
	    // on itself (in other words, not on a prototype).
	    _.has = function (obj, path) {
	      if (!_.isArray(path)) {
	        return has(obj, path);
	      }
	      var length = path.length;
	      for (var i = 0; i < length; i++) {
	        var key = path[i];
	        if (obj == null || !hasOwnProperty.call(obj, key)) {
	          return false;
	        }
	        obj = obj[key];
	      }
	      return !!length;
	    };

	    // Utility Functions
	    // -----------------

	    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	    // previous owner. Returns a reference to the Underscore object.
	    _.noConflict = function () {
	      root._ = previousUnderscore;
	      return this;
	    };

	    // Keep the identity function around for default iteratees.
	    _.identity = function (value) {
	      return value;
	    };

	    // Predicate-generating functions. Often useful outside of Underscore.
	    _.constant = function (value) {
	      return function () {
	        return value;
	      };
	    };

	    _.noop = function () {};

	    // Creates a function that, when passed an object, will traverse that object’s
	    // properties down the given `path`, specified as an array of keys or indexes.
	    _.property = function (path) {
	      if (!_.isArray(path)) {
	        return shallowProperty(path);
	      }
	      return function (obj) {
	        return deepGet(obj, path);
	      };
	    };

	    // Generates a function for a given object that returns a given property.
	    _.propertyOf = function (obj) {
	      if (obj == null) {
	        return function () {};
	      }
	      return function (path) {
	        return !_.isArray(path) ? obj[path] : deepGet(obj, path);
	      };
	    };

	    // Returns a predicate for checking whether an object has a given set of
	    // `key:value` pairs.
	    _.matcher = _.matches = function (attrs) {
	      attrs = _.extendOwn({}, attrs);
	      return function (obj) {
	        return _.isMatch(obj, attrs);
	      };
	    };

	    // Run a function **n** times.
	    _.times = function (n, iteratee, context) {
	      var accum = Array(Math.max(0, n));
	      iteratee = optimizeCb(iteratee, context, 1);
	      for (var i = 0; i < n; i++) {
	        accum[i] = iteratee(i);
	      }return accum;
	    };

	    // Return a random integer between min and max (inclusive).
	    _.random = function (min, max) {
	      if (max == null) {
	        max = min;
	        min = 0;
	      }
	      return min + Math.floor(Math.random() * (max - min + 1));
	    };

	    // A (possibly faster) way to get the current timestamp as an integer.
	    _.now = Date.now || function () {
	      return new Date().getTime();
	    };

	    // List of HTML entities for escaping.
	    var escapeMap = {
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      "'": '&#x27;',
	      '`': '&#x60;'
	    };
	    var unescapeMap = _.invert(escapeMap);

	    // Functions for escaping and unescaping strings to/from HTML interpolation.
	    var createEscaper = function createEscaper(map) {
	      var escaper = function escaper(match) {
	        return map[match];
	      };
	      // Regexes for identifying a key that needs to be escaped.
	      var source = '(?:' + _.keys(map).join('|') + ')';
	      var testRegexp = RegExp(source);
	      var replaceRegexp = RegExp(source, 'g');
	      return function (string) {
	        string = string == null ? '' : '' + string;
	        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	      };
	    };
	    _.escape = createEscaper(escapeMap);
	    _.unescape = createEscaper(unescapeMap);

	    // Traverses the children of `obj` along `path`. If a child is a function, it
	    // is invoked with its parent as context. Returns the value of the final
	    // child, or `fallback` if any child is undefined.
	    _.result = function (obj, path, fallback) {
	      if (!_.isArray(path)) path = [path];
	      var length = path.length;
	      if (!length) {
	        return _.isFunction(fallback) ? fallback.call(obj) : fallback;
	      }
	      for (var i = 0; i < length; i++) {
	        var prop = obj == null ? void 0 : obj[path[i]];
	        if (prop === void 0) {
	          prop = fallback;
	          i = length; // Ensure we don't continue iterating.
	        }
	        obj = _.isFunction(prop) ? prop.call(obj) : prop;
	      }
	      return obj;
	    };

	    // Generate a unique integer id (unique within the entire client session).
	    // Useful for temporary DOM ids.
	    var idCounter = 0;
	    _.uniqueId = function (prefix) {
	      var id = ++idCounter + '';
	      return prefix ? prefix + id : id;
	    };

	    // By default, Underscore uses ERB-style template delimiters, change the
	    // following template settings to use alternative delimiters.
	    _.templateSettings = {
	      evaluate: /<%([\s\S]+?)%>/g,
	      interpolate: /<%=([\s\S]+?)%>/g,
	      escape: /<%-([\s\S]+?)%>/g
	    };

	    // When customizing `templateSettings`, if you don't want to define an
	    // interpolation, evaluation or escaping regex, we need one that is
	    // guaranteed not to match.
	    var noMatch = /(.)^/;

	    // Certain characters need to be escaped so that they can be put into a
	    // string literal.
	    var escapes = {
	      "'": "'",
	      '\\': '\\',
	      '\r': 'r',
	      '\n': 'n',
	      '\u2028': 'u2028',
	      '\u2029': 'u2029'
	    };

	    var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

	    var escapeChar = function escapeChar(match) {
	      return '\\' + escapes[match];
	    };

	    // JavaScript micro-templating, similar to John Resig's implementation.
	    // Underscore templating handles arbitrary delimiters, preserves whitespace,
	    // and correctly escapes quotes within interpolated code.
	    // NB: `oldSettings` only exists for backwards compatibility.
	    _.template = function (text, settings, oldSettings) {
	      if (!settings && oldSettings) settings = oldSettings;
	      settings = _.defaults({}, settings, _.templateSettings);

	      // Combine delimiters into one regular expression via alternation.
	      var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');

	      // Compile the template source, escaping string literals appropriately.
	      var index = 0;
	      var source = "__p+='";
	      text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
	        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
	        index = offset + match.length;

	        if (escape) {
	          source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	        } else if (interpolate) {
	          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	        } else if (evaluate) {
	          source += "';\n" + evaluate + "\n__p+='";
	        }

	        // Adobe VMs need the match returned to produce the correct offset.
	        return match;
	      });
	      source += "';\n";

	      // If a variable is not specified, place data values in local scope.
	      if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	      source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';

	      var render;
	      try {
	        render = new Function(settings.variable || 'obj', '_', source);
	      } catch (e) {
	        e.source = source;
	        throw e;
	      }

	      var template = function template(data) {
	        return render.call(this, data, _);
	      };

	      // Provide the compiled source as a convenience for precompilation.
	      var argument = settings.variable || 'obj';
	      template.source = 'function(' + argument + '){\n' + source + '}';

	      return template;
	    };

	    // Add a "chain" function. Start chaining a wrapped Underscore object.
	    _.chain = function (obj) {
	      var instance = _(obj);
	      instance._chain = true;
	      return instance;
	    };

	    // OOP
	    // ---------------
	    // If Underscore is called as a function, it returns a wrapped object that
	    // can be used OO-style. This wrapper holds altered versions of all the
	    // underscore functions. Wrapped objects may be chained.

	    // Helper function to continue chaining intermediate results.
	    var chainResult = function chainResult(instance, obj) {
	      return instance._chain ? _(obj).chain() : obj;
	    };

	    // Add your own custom functions to the Underscore object.
	    _.mixin = function (obj) {
	      _.each(_.functions(obj), function (name) {
	        var func = _[name] = obj[name];
	        _.prototype[name] = function () {
	          var args = [this._wrapped];
	          push.apply(args, arguments);
	          return chainResult(this, func.apply(_, args));
	        };
	      });
	      return _;
	    };

	    // Add all of the Underscore functions to the wrapper object.
	    _.mixin(_);

	    // Add all mutator Array functions to the wrapper.
	    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
	      var method = ArrayProto[name];
	      _.prototype[name] = function () {
	        var obj = this._wrapped;
	        method.apply(obj, arguments);
	        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	        return chainResult(this, obj);
	      };
	    });

	    // Add all accessor Array functions to the wrapper.
	    _.each(['concat', 'join', 'slice'], function (name) {
	      var method = ArrayProto[name];
	      _.prototype[name] = function () {
	        return chainResult(this, method.apply(this._wrapped, arguments));
	      };
	    });

	    // Extracts the result from a wrapped and chained object.
	    _.prototype.value = function () {
	      return this._wrapped;
	    };

	    // Provide unwrapping proxy for some methods used in engine operations
	    // such as arithmetic and JSON stringification.
	    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	    _.prototype.toString = function () {
	      return String(this._wrapped);
	    };
	  })();
	});
	var underscore_1 = underscore._;

	var slice$1 = Array.prototype.slice;
	var eventSplitter = /\s+/;

	var listenMethods = {
	    listenTo: 'on',
	    listenToOnce: 'once'
	};

	var eventsApi = function eventsApi(obj, action, name, rest) {

	    if (!name) {
	        return true;
	    }

	    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	        for (var key in name) {
	            if (name.hasOwnProperty(key)) {
	                obj[action].apply(obj, [key, name[key]].concat(rest));
	            }
	        }
	        return false;
	    }

	    if (eventSplitter.test(name)) {
	        var names = name.split(eventSplitter);
	        for (var i = 0, l = names.length; i < l; i++) {
	            obj[action].apply(obj, [names[i]].concat(rest));
	        }
	        return false;
	    }

	    return true;
	};

	var triggerEvents = function triggerEvents(events, args) {

	    var ev = void 0;
	    var i = -1;
	    var l = events.length;
	    var a1 = args[0];
	    var a2 = args[1];
	    var a3 = args[2];

	    switch (args.length) {
	        case 0:
	            {
	                while (++i < l) {
	                    (ev = events[i]).callback.call(ev.ctx);
	                }
	            }return;
	        case 1:
	            {
	                while (++i < l) {
	                    (ev = events[i]).callback.call(ev.ctx, a1);
	                }
	            }return;
	        case 2:
	            {
	                while (++i < l) {
	                    (ev = events[i]).callback.call(ev.ctx, a1, a2);
	                }
	            }return;
	        case 3:
	            {
	                while (++i < l) {
	                    (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
	                }
	            }return;
	        default:
	            {
	                while (++i < l) {
	                    (ev = events[i]).callback.apply(ev.ctx, args);
	                }
	            }return;
	    }
	};

	var Events = function Events() {
	    this._events = [];
	};

	Events.prototype.on = function (name, callback, context) {
	    if (!eventsApi(this, 'on', name, [callback, context]) || !callback) {
	        return this;
	    }
	    if (!this._events) {
	        this._events = {};
	    }
	    //let debugCallback = (...args) => {console.log(name);callback(...args)}
	    var events = this._events[name] || (this._events[name] = []);
	    events.push({ callback: callback, context: context, ctx: context || this });
	    return this;
	};

	Events.prototype.once = function (name, callback, context) {
	    if (!eventsApi(this, 'once', name, [callback, context]) || !callback) {
	        return this;
	    }
	    var self = this;
	    var once = underscore.once(function () {
	        self.off(name, once);
	        callback.apply(this, arguments);
	    });
	    once._callback = callback;
	    return this.on(name, once, context);
	};

	Events.prototype.off = function (name, callback, context) {
	    var retain = void 0,
	        ev = void 0,
	        events = void 0,
	        names = void 0,
	        i = void 0,
	        l = void 0,
	        j = void 0,
	        k = void 0;
	    if (!this._events || !eventsApi(this, 'off', name, [callback, context])) {
	        return this;
	    }
	    if (!name && !callback && !context) {
	        this._events = void 0;
	        return this;
	    }
	    names = name ? [name] : underscore.keys(this._events);
	    for (i = 0, l = names.length; i < l; i++) {
	        name = names[i];
	        events = this._events[name];
	        if (events) {
	            this._events[name] = retain = [];
	            if (callback || context) {
	                for (j = 0, k = events.length; j < k; j++) {
	                    ev = events[j];
	                    if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) {
	                        retain.push(ev);
	                    }
	                }
	            }
	            if (!retain.length) {
	                delete this._events[name];
	            }
	        }
	    }

	    return this;
	};

	Events.prototype.trigger = function (name) {

	    if (!this._events) {
	        return this;
	    }

	    var args = slice$1.call(arguments, 1);

	    if (!eventsApi(this, 'trigger', name, args)) {
	        return this;
	    }

	    var events = this._events[name];
	    var allEvents = this._events.all;

	    if (events) {
	        triggerEvents(events, args);
	    }
	    if (allEvents) {
	        triggerEvents(allEvents, arguments);
	    }

	    return this;
	};

	Events.prototype.stopListening = function (obj, name, callback) {

	    var listeningTo = this._listeningTo;

	    if (!listeningTo) {
	        return this;
	    }

	    var remove = !name && !callback;

	    if (!callback && (typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	        callback = this;
	    }
	    if (obj) {
	        (listeningTo = {})[obj._listenId] = obj;
	    }

	    for (var id in listeningTo) {
	        if (listeningTo.hasOwnProperty(id)) {
	            obj = listeningTo[id];
	            obj.off(name, callback, this);
	            if (remove || underscore.isempty(obj._events)) {
	                delete this._listeningTo[id];
	            }
	        }
	    }

	    return this;
	};

	Events.prototype.createEmitter = function (obj) {
	    return underscore.assign(obj || {}, Events);
	};

	underscore.forEach(listenMethods, function (implementation, method) {
	    Events.prototype[method] = function (obj, name, callback) {

	        if (!obj) {
	            throw new Error('Trying to listenTo event: \'' + name + '\' but the target object is undefined');
	        }

	        var listeningTo = this._listeningTo || (this._listeningTo = {});
	        var id = obj._listenId || (obj._listenId = underscore.uniqueId('l'));

	        listeningTo[id] = obj;

	        if (!callback && (typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	            callback = this;
	        }
	        if (typeof obj[implementation] !== 'function') {
	            throw new Error('Trying to listenTo event: \'' + name + '\' on object: ' + obj.toString() + ' but it does not have an \'on\' method so is unbindable');
	        }

	        obj[implementation](name, callback, this);

	        return this;
	    };
	});

	Events.listenToAndRun = function (obj, name, callback) {

	    Events.prototype.listenTo.apply(this, arguments);

	    if (!callback && (typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	        callback = this;
	    }

	    callback.apply(this);

	    return this;
	};

	var DataStore = function () {
	    function DataStore() {
	        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        classCallCheck(this, DataStore);


	        this._data = [];

	        this._events = new Events();

	        this._applyConfig(config);
	    }

	    createClass(DataStore, [{
	        key: '_applyConfig',
	        value: function _applyConfig(config) {
	            var name = config.name,
	                data = config.data;


	            this._setName(name);

	            this._createConainers(data);
	        }
	    }, {
	        key: '_setName',
	        value: function _setName(name) {

	            this._name = name;
	        }
	    }, {
	        key: '_createConainers',
	        value: function _createConainers() {
	            var _this = this;

	            var changeable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];


	            changeable.forEach(function (item) {
	                return _this._createContainer(item);
	            });
	        }
	    }, {
	        key: '_createContainer',
	        value: function _createContainer(item) {
	            var key = item.key,
	                _item$isTable = item.isTable,
	                isTable = _item$isTable === undefined ? false : _item$isTable,
	                _item$defaultValue = item.defaultValue,
	                defaultValue = _item$defaultValue === undefined ? null : _item$defaultValue,
	                _item$indexBy = item.indexBy,
	                indexBy = _item$indexBy === undefined ? '' : _item$indexBy;

	            var defaultData = defaultValue ? defaultValue : isTable ? {} : null;

	            this._data[key] = {
	                data: defaultData,
	                config: {
	                    indexBy: indexBy,
	                    isTable: isTable
	                }
	            };
	        }
	    }, {
	        key: '_fireEvents',
	        value: function _fireEvents() {
	            var _this2 = this;

	            var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	            var rowIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];


	            events.forEach(function (eventName) {
	                return _this2._events.trigger(eventName, rowIds);
	            });
	        }
	    }, {
	        key: 'getData',
	        value: function getData(key) {
	            var rowId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


	            var keySegment = this._data[key] || {};
	            var data = keySegment.data;


	            if (!rowId) {
	                return data;
	            } else {
	                return data[rowId];
	            }
	        }
	    }, {
	        key: 'getSerializedData',
	        value: function getSerializedData(key) {

	            var keySegment = this._data[key] || {};
	            var data = keySegment.data,
	                isTable = keySegment.config.isTable;


	            if (!isTable) {
	                return data;
	            } else {
	                return Object.keys(data).map(function (id) {
	                    return data[id];
	                });
	            }
	        }
	    }, {
	        key: 'addData',
	        value: function addData(key) {
	            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	            var events = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];


	            var currentSegment = this._data[key] || {};
	            var prevData = currentSegment.data;


	            var options = void 0;

	            if (Array.isArray(data)) {

	                options = [];

	                data.forEach(function (dataItem) {
	                    var id = dataItem.id,
	                        content = dataItem.content;

	                    prevData[id] = content;
	                    options.push(id);
	                });

	                this._data[key]['data'] = prevData;
	            } else {
	                var id = data.id,
	                    content = data.content;

	                prevData[id] = content;
	                options = id;
	            }

	            this._fireEvents(events, options);
	        }
	    }, {
	        key: 'updateData',
	        value: function updateData(key) {
	            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	            var events = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];


	            var currentSegment = this._data[key] || {};
	            var prevData = currentSegment.data;


	            var options = void 0;

	            if (Array.isArray(data)) {

	                options = [];

	                data.forEach(function (dataItem) {
	                    var id = dataItem.id,
	                        content = dataItem.content;

	                    prevData[id] = content;
	                    options.push(id);
	                });

	                this._data[key]['data'] = prevData;
	            } else {
	                var id = data.id,
	                    content = data.content;

	                prevData[id] = content;
	                options = id;
	            }

	            this._fireEvents(events, options);
	        }
	    }, {
	        key: 'rewriteData',
	        value: function rewriteData(key) {
	            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	            var events = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	            var isTable = this._data[key].config.isTable;


	            if (!isTable) {
	                this._data[key]['data'] = data;
	            } else {
	                this.clear(key);
	                this.addData(key, data);
	            }

	            this._fireEvents(events);
	        }
	    }, {
	        key: 'removeData',
	        value: function removeData(key) {
	            var _this3 = this;

	            var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	            var events = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];


	            var options = void 0;

	            if (Array.isArray(ids)) {

	                options = [];

	                ids.forEach(function (id) {
	                    delete _this3._data[key]['data'][id];
	                    options.push(id);
	                });
	            } else {

	                var id = ids;

	                delete this._data[key]['data'][id];
	                options = id;
	            }

	            this._fireEvents(events, options);
	        }
	    }, {
	        key: 'clear',
	        value: function clear(key) {
	            var events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];


	            var currentSegment = this._data[key] || {};
	            var isTable = currentSegment.config.isTable;


	            var emptyValue = isTable ? {} : null;

	            this._data[key]['data'] = emptyValue;

	            this._fireEvents(events);
	        }
	    }, {
	        key: 'on',
	        value: function on() {
	            var _events;

	            (_events = this._events).on.apply(_events, arguments);
	        }
	    }, {
	        key: 'trigger',
	        value: function trigger() {
	            var _events2;

	            (_events2 = this._events).trigger.apply(_events2, arguments);
	        }
	    }]);
	    return DataStore;
	}();

	var CONTOUR_ITEM_ATTRIBUTES = ["hover", "selected", "visible", "clip_coords", "result", "cart", "sceneid", "acqdate", "acqtime", "cloudness", "tilt", "sunelev", "stereo", "url", "x1", "y1", "x2", "y2", "x3", "y3", "x4", "y4", "volume", "platform", "spot5_a_exists", "spot5_b_exists", "islocal", "product", "gmx_id", "sensor", "local_exists", "spot5id", "stidx"];

	var CONTOUR_ITEM_ATTR_TYPES = ["boolean", "boolean", "string", "object", "boolean", "boolean", "string", "date", "time", "float", "float", "float", "string", "string", "float", "float", "float", "float", "float", "float", "float", "float", "string", "string", "boolean", "boolean", "boolean", "boolean", "integer", "string", "boolean", "string", "integer"];

	var fieldsList = ['x1', 'gmx_id', 'result', 'cart', 'visible', 'hover', 'selected', 'acqdate', 'tilt', 'cloudness', 'platform', 'sceneid', 'clip_coords'];
	var preparedIndexes = [];

	fieldsList.forEach(function (field) {
	    preparedIndexes[field] = getCorrectIndex(field);
	});

	function getCorrectIndex(index) {

	    return CONTOUR_ITEM_ATTRIBUTES.indexOf(index) + 1;
	}
	function propertiesX1Slice(item) {

	    var x1Index = getCorrectIndex('x1');
	    var _item$properties = item.properties,
	        properties = _item$properties === undefined ? [] : _item$properties;


	    return properties.slice(x1Index, x1Index + 8);
	}

	function getProperty(item, fieldName) {

	    var fieldIndex = preparedIndexes[fieldName];
	    var _item$properties2 = item.properties,
	        properties = _item$properties2 === undefined ? [] : _item$properties2;


	    return properties[fieldIndex];
	}

	function setProperty(item) {
	    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


	    var indexes = preparedIndexes;
	    var _item$properties3 = item.properties,
	        properties = _item$properties3 === undefined ? [] : _item$properties3;


	    for (var key in data) {
	        var currentValue = data[key];
	        var fieldIndex = indexes[key];
	        properties[fieldIndex] = currentValue;
	    }

	    item['properties'] = properties;

	    return item;
	}

	function propertiesToItem(properties) {

	    if (!properties) {
	        return null;
	    }

	    var lastPropertyIndex = properties ? properties.length - 1 : 0;

	    return properties.slice(1, lastPropertyIndex).reduce(function (propertyObject, value, index) {

	        var attrKey = CONTOUR_ITEM_ATTRIBUTES[index];

	        switch (CONTOUR_ITEM_ATTR_TYPES[index]) {
	            case 'date':
	                if (typeof value === 'string') {
	                    propertyObject[attrKey] = new Date(value);
	                } else if (typeof value === 'number') {
	                    propertyObject[attrKey] = new Date(value * 1000);
	                }
	                break;
	            default:
	                propertyObject[attrKey] = value;
	                break;
	        }
	        return propertyObject;
	    }, {});
	}
	function isVisibleChanged(item, show) {

	    var visibleValue = getProperty(item, 'visible');

	    var isChanged = false;

	    if (show) {
	        switch (visibleValue) {
	            case 'hidden':
	            case 'failed':
	                isChanged = true;
	                break;
	            case 'loading':
	                isChanged = true;
	                break;
	            case 'visible':
	            default:
	                break;
	        }
	    } else {
	        switch (visibleValue) {
	            case 'failed':
	            case 'loading':
	            case 'visible':
	                isChanged = true;
	                break;
	            case 'hidden':
	            default:
	                break;
	        }
	    }

	    return isChanged;
	}

	function getChangedVisibleState(item, show) {

	    var visibleValue = getProperty(item, 'visible');

	    if (show) {
	        switch (visibleValue) {
	            case 'hidden':
	            case 'failed':
	                visibleValue = 'loading';
	                break;
	            case 'loading':
	                visibleValue = 'visible';
	                break;
	            case 'visible':
	            default:
	                break;
	        }
	    } else {
	        switch (visibleValue) {
	            case 'failed':
	            case 'loading':
	            case 'visible':
	                visibleValue = 'hidden';
	                break;
	            case 'hidden':
	            default:
	                break;
	        }
	    }

	    return visibleValue;
	}
	function mergeResults(old, data) {

	    var resultIndex = getCorrectIndex('result');

	    var cache = Object.keys(old).reduce(function (a, id) {
	        a[id] = a[id] || { properties: [], quicklook: null };
	        a[id].properties = old[id].properties;
	        return a;
	    }, {});

	    return data.reduce(function (a, value) {
	        var id = value[0];
	        if (cache[id]) {
	            cache[id].properties[resultIndex] = true;
	        } else {
	            a[id] = a[id] || { properties: [], quicklook: null };
	            a[id].properties = value;
	        }
	        return a;
	    }, cache);
	}
	function isClientFilterChanged(searchCriteria, clientFilter) {
	    var _clientFilter$unCheck = clientFilter.unChecked,
	        unChecked = _clientFilter$unCheck === undefined ? [] : _clientFilter$unCheck;

	    var _searchCriteria$cloud = slicedToArray(searchCriteria.clouds, 2),
	        criteriaMinCloud = _searchCriteria$cloud[0],
	        criteriaMaxCloud = _searchCriteria$cloud[1];

	    var _clientFilter$clouds = slicedToArray(clientFilter.clouds, 2),
	        filterMinCloud = _clientFilter$clouds[0],
	        filterMaxCloud = _clientFilter$clouds[1];

	    var _searchCriteria$angle = slicedToArray(searchCriteria.angle, 2),
	        criteriaMinAngle = _searchCriteria$angle[0],
	        criteriaMaxAngle = _searchCriteria$angle[1];

	    var _clientFilter$angle = slicedToArray(clientFilter.angle, 2),
	        filterMinAngle = _clientFilter$angle[0],
	        filterMaxAngle = _clientFilter$angle[1];

	    var _searchCriteria$date = slicedToArray(searchCriteria.date, 2),
	        criteriaMinDate = _searchCriteria$date[0],
	        criteriaMaxDate = _searchCriteria$date[1];

	    var _clientFilter$date = slicedToArray(clientFilter.date, 2),
	        filterMinDate = _clientFilter$date[0],
	        filterMaxDate = _clientFilter$date[1];

	    if (unChecked.length > 0) {
	        return true;
	    }

	    if (filterMinCloud !== criteriaMinCloud || filterMaxCloud !== criteriaMaxCloud) {
	        return true;
	    }

	    if (filterMinAngle !== criteriaMinAngle || filterMaxAngle !== criteriaMaxAngle) {
	        return true;
	    }

	    if (!compareDates(criteriaMinDate, filterMinDate) || !compareDates(criteriaMaxDate, filterMaxDate)) {
	        return true;
	    }

	    return false;
	}

	function createFilterConditions(item, isChanged, unChecked, clouds, angle, date) {

	    var platformValue = getProperty(item, 'platform');
	    var cloudValue = getProperty(item, 'cloudness');
	    var tiltValue = getProperty(item, 'tilt');
	    var dateValue = getProperty(item, 'acqdate');

	    var acqDate = typeof dateValue === 'string' ? new Date(dateValue) : new Date(dateValue * 1000);
	    var preparedDate = prepareDate(acqDate);
	    var angleValue = Math.abs(tiltValue);

	    var platformsCondition = unChecked.indexOf(platformValue) === -1;
	    var cloudsCondition = isChanged ? isNumeric(cloudValue) ? clouds[0] <= cloudValue && cloudValue <= clouds[1] : true : true;
	    var angleCondition = isChanged ? angle[0] <= angleValue && angleValue <= angle[1] : true;
	    var dateCondition = isChanged ? date[0].getTime() <= preparedDate.getTime() && preparedDate.getTime() <= date[1].getTime() : true;

	    return platformsCondition && cloudsCondition && angleCondition && dateCondition;
	}

	var SearchDataStore = function (_BaseDataStore) {
	    inherits(SearchDataStore, _BaseDataStore);

	    function SearchDataStore() {
	        classCallCheck(this, SearchDataStore);
	        return possibleConstructorReturn(this, (SearchDataStore.__proto__ || Object.getPrototypeOf(SearchDataStore)).apply(this, arguments));
	    }

	    createClass(SearchDataStore, [{
	        key: 'hasResults',
	        value: function hasResults() {

	            var contours = this.getSerializedData('contours');
	            var resultIndex = getCorrectIndex('result');

	            var hasResults = contours.some(function (item) {
	                var _item$properties4 = item.properties,
	                    properties = _item$properties4 === undefined ? [] : _item$properties4;

	                return properties[resultIndex];
	            });

	            return hasResults;
	        }
	    }, {
	        key: 'hasFavorites',
	        value: function hasFavorites() {

	            var contours = this.getSerializedData('contours');
	            var cartIndex = getCorrectIndex('cart');

	            var hasFavorites = contours.some(function (item) {
	                var _item$properties5 = item.properties,
	                    properties = _item$properties5 === undefined ? [] : _item$properties5;

	                return properties[cartIndex];
	            });

	            return hasFavorites;
	        }
	    }, {
	        key: 'hasSelectedFavorites',
	        value: function hasSelectedFavorites() {

	            var contours = this.getSerializedData('contours');
	            var cartIndex = getCorrectIndex('cart');
	            var selectedIndex = getCorrectIndex('selected');

	            var hasFavorites = contours.some(function (item) {
	                var _item$properties6 = item.properties,
	                    properties = _item$properties6 === undefined ? [] : _item$properties6;

	                return properties[cartIndex] && properties[selectedIndex];
	            });

	            return hasFavorites;
	        }
	    }, {
	        key: 'hasDrawings',
	        value: function hasDrawings() {

	            var drawings = this.getSerializedData('drawings');
	            var hasDrawings = drawings.length > 0;

	            return hasDrawings;
	        }
	    }, {
	        key: 'getResults',
	        value: function getResults() {
	            var forGrid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


	            var resultIndex = getCorrectIndex('result');
	            var contourItems = this.getSerializedData('contours');

	            var filteredData = contourItems.reduce(function (preparedData, item) {
	                var properties = item.properties;


	                if (properties[resultIndex]) {
	                    if (forGrid) {
	                        preparedData.push(propertiesToItem(properties));
	                    } else {
	                        preparedData.push(item);
	                    }
	                }

	                return preparedData;
	            }, []);

	            return filteredData;
	        }
	    }, {
	        key: 'getFilteredResults',
	        value: function getFilteredResults() {
	            var forGrid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


	            var contourItems = this.getSerializedData('contours');
	            var clientFilter = this.getData('clientFilter');
	            var _clientFilter$isChang = clientFilter.isChanged,
	                isChanged = _clientFilter$isChang === undefined ? false : _clientFilter$isChang,
	                _clientFilter$filterD = clientFilter.filterData,
	                _clientFilter$filterD2 = _clientFilter$filterD.unChecked,
	                unChecked = _clientFilter$filterD2 === undefined ? [] : _clientFilter$filterD2,
	                _clientFilter$filterD3 = _clientFilter$filterD.clouds,
	                clouds = _clientFilter$filterD3 === undefined ? [0, 100] : _clientFilter$filterD3,
	                _clientFilter$filterD4 = _clientFilter$filterD.angle,
	                angle = _clientFilter$filterD4 === undefined ? [0, 80] : _clientFilter$filterD4,
	                _clientFilter$filterD5 = _clientFilter$filterD.date,
	                date = _clientFilter$filterD5 === undefined ? [0, 0] : _clientFilter$filterD5;

	            var resultIndex = getCorrectIndex('result');
	            var cartIndex = getCorrectIndex('cart');

	            var filteredData = contourItems.reduce(function (preparedData, item) {
	                var properties = item.properties;

	                var isInFilterCriteria = createFilterConditions(item, isChanged, unChecked, clouds, angle, date);

	                if (properties[resultIndex] && (properties[cartIndex] || isInFilterCriteria)) {
	                    if (forGrid) {
	                        preparedData.push(propertiesToItem(properties));
	                    } else {
	                        preparedData.push(item);
	                    }
	                }

	                return preparedData;
	            }, []);

	            return filteredData;
	        }
	    }, {
	        key: 'getFavorites',
	        value: function getFavorites() {
	            var forGrid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


	            var cartIndex = getCorrectIndex('cart');
	            var contourItems = this.getSerializedData('contours');

	            var filteredData = contourItems.reduce(function (preparedData, item) {
	                var properties = item.properties;


	                if (properties[cartIndex]) {
	                    if (forGrid) {
	                        preparedData.push(propertiesToItem(properties));
	                    } else {
	                        preparedData.push(item);
	                    }
	                }

	                return preparedData;
	            }, []);

	            return filteredData;
	        }
	    }, {
	        key: 'getSelectedFavorites',
	        value: function getSelectedFavorites() {

	            var selectedIndex = getCorrectIndex('selected');
	            var cartIndex = getCorrectIndex('cart');
	            var contours = this.getSerializedData('contours');

	            var selectedFavorites = contours.filter(function (item) {
	                var properties = item.properties;

	                if (!properties) {
	                    return false;
	                }
	                if (properties[selectedIndex] && properties[cartIndex]) {
	                    return true;
	                }
	                return false;
	            });

	            return selectedFavorites;
	        }
	    }, {
	        key: 'getDrawings',
	        value: function getDrawings() {

	            return this.getSerializedData('drawings');
	        }
	    }, {
	        key: 'setDownloadCache',
	        value: function setDownloadCache(data) {

	            if (Array.isArray[data] && data.length < 1) {
	                this.rewriteData('downloadCache', []);
	            }

	            var fields = data.fields,
	                values = data.values,
	                types = data.types;

	            var downloadCache = fromGmx({ fields: fields, values: values, types: types });

	            this.rewriteData('downloadCache', downloadCache);
	        }
	    }, {
	        key: 'getMetaItem',
	        value: function getMetaItem(key) {

	            var metaData = this.getData('meta');

	            return metaData[key] || null;
	        }
	    }, {
	        key: 'setMetaItem',
	        value: function setMetaItem(key, value) {
	            var events = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];


	            var metaData = this.getData('meta');
	            var dataToRewrite = _extends({}, metaData, defineProperty({}, key, value));

	            this.rewriteData('meta', dataToRewrite, events);
	        }
	    }]);
	    return SearchDataStore;
	}(DataStore);

	var Map = function () {
	    function Map(config) {
	        classCallCheck(this, Map);
	        var application = config.application;


	        var mapContainer = document.getElementById(MAP_CONTAINER_ID);

	        var map = L.map(mapContainer, MAP_INIT_SETTINGS);

	        map.options.svgSprite = MAP_SVG_SPRITE;

	        this._mapContainer = mapContainer;
	        this._map = map;

	        this._application = application;

	        this._bindEvents();
	    }

	    createClass(Map, [{
	        key: 'loadMap',
	        value: function () {
	            var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                var gmxMap;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return L.gmx.loadMap(LOAD_MAP_ID, _extends({}, LOAD_MAP_PARAMS, { leafletMap: this._map }));

	                            case 2:
	                                gmxMap = _context.sent;


	                                this._gmxMap = gmxMap;

	                                this._map.invalidateSize();

	                                _context.next = 7;
	                                return this._initBaseLayerManager();

	                            case 7:

	                                this._setActiveLayer();

	                                this._mapControlsPrepare();

	                            case 9:
	                            case 'end':
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));

	            function loadMap() {
	                return _ref.apply(this, arguments);
	            }

	            return loadMap;
	        }()
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this = this;

	            var application = this.getApplication();
	            var globalEvents = application.getAppEvents();

	            globalEvents.on('system:uiElements:created', function () {
	                return _this._resizeMap();
	            });
	            globalEvents.on('system:uiElements:created', function () {
	                return _this._setMapPaggingTop();
	            });
	            globalEvents.on('system:window:resize', function () {
	                return _this._resizeMap();
	            });
	        }
	    }, {
	        key: '_initBaseLayerManager',
	        value: function () {
	            var _ref2 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:

	                                this._map.gmxBaseLayersManager = new window.L.gmxBaseLayersManager(this._map);
	                                _context2.next = 3;
	                                return this._map.gmxBaseLayersManager.initDefaults({
	                                    srs: 3857,
	                                    skipTiles: 'All',
	                                    ftc: 'osm'
	                                });

	                            case 3:
	                            case 'end':
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));

	            function _initBaseLayerManager() {
	                return _ref2.apply(this, arguments);
	            }

	            return _initBaseLayerManager;
	        }()
	    }, {
	        key: '_setActiveLayer',
	        value: function _setActiveLayer() {

	            var gmxMap = this._gmxMap;
	            var baseLayers = gmxMap.properties.BaseLayers;
	            var currentID = baseLayers[0];

	            this._map.gmxBaseLayersManager.setActiveIDs(baseLayers).setCurrentID(currentID);
	            this._map.addControl(new window.L.Control.gmxLayers(this._map.gmxBaseLayersManager, {
	                hideBaseLayers: true
	            }));
	        }
	    }, {
	        key: '_mapControlsPrepare',
	        value: function _mapControlsPrepare() {

	            this._map._controlCorners.searchControls = document.querySelector('#search-controls');
	            this._map._controlCorners.drawControls = document.querySelector('#draw-controls');

	            this._map.gmxControlsManager.init({
	                gmxHide: null,
	                gmxLogo: null,
	                gmxZoom: null,
	                gmxDrawing: null,
	                svgSprite: false
	            });
	        }
	    }, {
	        key: '_resizeMap',
	        value: function _resizeMap() {

	            var bodyHeight = document.body.getBoundingClientRect().height;
	            var headerHeight = document.getElementById('header').getBoundingClientRect().height;

	            var heightDiff = bodyHeight - headerHeight;

	            this._mapContainer.style.height = heightDiff + 'px';
	            this._map.invalidateSize();
	        }
	    }, {
	        key: '_setMapPaggingTop',
	        value: function _setMapPaggingTop() {

	            var application = this.getApplication();
	            var sideBarComponent = application.getUiElement('sidebar');
	            var sidebarView = sideBarComponent.getView();
	            var sidebarContainer = sidebarView.getContainer();

	            var sidebarWidth = sidebarContainer.getBoundingClientRect().width;
	            this._map.options.paddingTopLeft = [sidebarWidth, 0];
	        }
	    }, {
	        key: 'getApplication',
	        value: function getApplication() {

	            return this._application;
	        }
	    }, {
	        key: 'getMap',
	        value: function getMap() {

	            return this._map;
	        }
	    }, {
	        key: 'getMapContainer',
	        value: function getMapContainer() {

	            return this._mapContainer;
	        }
	    }]);
	    return Map;
	}();

	var tingle_min = createCommonjsModule(function (module, exports) {
	  !function (t, o) {
	    module.exports = o();
	  }(commonjsGlobal, function () {
	    function t(t) {
	      var o = { onClose: null, onOpen: null, beforeOpen: null, beforeClose: null, stickyFooter: !1, footer: !1, cssClass: [], closeLabel: "Close", closeMethods: ["overlay", "button", "escape"] };this.opts = r({}, o, t), this.init();
	    }function o() {
	      this.modalBoxFooter && (this.modalBoxFooter.style.width = this.modalBox.clientWidth + "px", this.modalBoxFooter.style.left = this.modalBox.offsetLeft + "px");
	    }function e() {
	      this.modal = document.createElement("div"), this.modal.classList.add("tingle-modal"), 0 !== this.opts.closeMethods.length && this.opts.closeMethods.indexOf("overlay") !== -1 || this.modal.classList.add("tingle-modal--noOverlayClose"), this.modal.style.display = "none", this.opts.cssClass.forEach(function (t) {
	        "string" == typeof t && this.modal.classList.add(t);
	      }, this), this.opts.closeMethods.indexOf("button") !== -1 && (this.modalCloseBtn = document.createElement("button"), this.modalCloseBtn.classList.add("tingle-modal__close"), this.modalCloseBtnIcon = document.createElement("span"), this.modalCloseBtnIcon.classList.add("tingle-modal__closeIcon"), this.modalCloseBtnIcon.innerHTML = "×", this.modalCloseBtnLabel = document.createElement("span"), this.modalCloseBtnLabel.classList.add("tingle-modal__closeLabel"), this.modalCloseBtnLabel.innerHTML = this.opts.closeLabel, this.modalCloseBtn.appendChild(this.modalCloseBtnIcon), this.modalCloseBtn.appendChild(this.modalCloseBtnLabel)), this.modalBox = document.createElement("div"), this.modalBox.classList.add("tingle-modal-box"), this.modalBoxContent = document.createElement("div"), this.modalBoxContent.classList.add("tingle-modal-box__content"), this.modalBox.appendChild(this.modalBoxContent), this.opts.closeMethods.indexOf("button") !== -1 && this.modal.appendChild(this.modalCloseBtn), this.modal.appendChild(this.modalBox);
	    }function s() {
	      this.modalBoxFooter = document.createElement("div"), this.modalBoxFooter.classList.add("tingle-modal-box__footer"), this.modalBox.appendChild(this.modalBoxFooter);
	    }function i() {
	      this._events = { clickCloseBtn: this.close.bind(this), clickOverlay: l.bind(this), resize: this.checkOverflow.bind(this), keyboardNav: n.bind(this) }, this.opts.closeMethods.indexOf("button") !== -1 && this.modalCloseBtn.addEventListener("click", this._events.clickCloseBtn), this.modal.addEventListener("mousedown", this._events.clickOverlay), window.addEventListener("resize", this._events.resize), document.addEventListener("keydown", this._events.keyboardNav);
	    }function n(t) {
	      this.opts.closeMethods.indexOf("escape") !== -1 && 27 === t.which && this.isOpen() && this.close();
	    }function l(t) {
	      this.opts.closeMethods.indexOf("overlay") !== -1 && !d(t.target, "tingle-modal") && t.clientX < this.modal.clientWidth && this.close();
	    }function d(t, o) {
	      for (; (t = t.parentElement) && !t.classList.contains(o);) {}return t;
	    }function a() {
	      this.opts.closeMethods.indexOf("button") !== -1 && this.modalCloseBtn.removeEventListener("click", this._events.clickCloseBtn), this.modal.removeEventListener("mousedown", this._events.clickOverlay), window.removeEventListener("resize", this._events.resize), document.removeEventListener("keydown", this._events.keyboardNav);
	    }function r() {
	      for (var t = 1; t < arguments.length; t++) {
	        for (var o in arguments[t]) {
	          arguments[t].hasOwnProperty(o) && (arguments[0][o] = arguments[t][o]);
	        }
	      }return arguments[0];
	    }function h() {
	      var t,
	          o = document.createElement("tingle-test-transition"),
	          e = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (t in e) {
	        if (void 0 !== o.style[t]) return e[t];
	      }
	    }var c = h();return t.prototype.init = function () {
	      this.modal || (e.call(this), i.call(this), document.body.insertBefore(this.modal, document.body.firstChild), this.opts.footer && this.addFooter());
	    }, t.prototype.destroy = function () {
	      null !== this.modal && (a.call(this), this.modal.parentNode.removeChild(this.modal), this.modal = null);
	    }, t.prototype.open = function () {
	      var t = this;"function" == typeof t.opts.beforeOpen && t.opts.beforeOpen(), this.modal.style.removeProperty ? this.modal.style.removeProperty("display") : this.modal.style.removeAttribute("display"), this._scrollPosition = window.pageYOffset, document.body.classList.add("tingle-enabled"), document.body.style.top = -this._scrollPosition + "px", this.setStickyFooter(this.opts.stickyFooter), this.modal.classList.add("tingle-modal--visible"), c ? this.modal.addEventListener(c, function o() {
	        "function" == typeof t.opts.onOpen && t.opts.onOpen.call(t), t.modal.removeEventListener(c, o, !1);
	      }, !1) : "function" == typeof t.opts.onOpen && t.opts.onOpen.call(t), this.checkOverflow();
	    }, t.prototype.isOpen = function () {
	      return !!this.modal.classList.contains("tingle-modal--visible");
	    }, t.prototype.close = function () {
	      if ("function" == typeof this.opts.beforeClose) {
	        var t = this.opts.beforeClose.call(this);if (!t) return;
	      }document.body.classList.remove("tingle-enabled"), window.scrollTo(0, this._scrollPosition), document.body.style.top = null, this.modal.classList.remove("tingle-modal--visible");var o = this;c ? this.modal.addEventListener(c, function t() {
	        o.modal.removeEventListener(c, t, !1), o.modal.style.display = "none", "function" == typeof o.opts.onClose && o.opts.onClose.call(this);
	      }, !1) : (o.modal.style.display = "none", "function" == typeof o.opts.onClose && o.opts.onClose.call(this));
	    }, t.prototype.setContent = function (t) {
	      "string" == typeof t ? this.modalBoxContent.innerHTML = t : (this.modalBoxContent.innerHTML = "", this.modalBoxContent.appendChild(t));
	    }, t.prototype.getContent = function () {
	      return this.modalBoxContent;
	    }, t.prototype.addFooter = function () {
	      s.call(this);
	    }, t.prototype.setFooterContent = function (t) {
	      this.modalBoxFooter.innerHTML = t;
	    }, t.prototype.getFooterContent = function () {
	      return this.modalBoxFooter;
	    }, t.prototype.setStickyFooter = function (t) {
	      this.isOverflow() || (t = !1), t ? this.modalBox.contains(this.modalBoxFooter) && (this.modalBox.removeChild(this.modalBoxFooter), this.modal.appendChild(this.modalBoxFooter), this.modalBoxFooter.classList.add("tingle-modal-box__footer--sticky"), o.call(this), this.modalBoxContent.style["padding-bottom"] = this.modalBoxFooter.clientHeight + 20 + "px") : this.modalBoxFooter && (this.modalBox.contains(this.modalBoxFooter) || (this.modal.removeChild(this.modalBoxFooter), this.modalBox.appendChild(this.modalBoxFooter), this.modalBoxFooter.style.width = "auto", this.modalBoxFooter.style.left = "", this.modalBoxContent.style["padding-bottom"] = "", this.modalBoxFooter.classList.remove("tingle-modal-box__footer--sticky")));
	    }, t.prototype.addFooterBtn = function (t, o, e) {
	      var s = document.createElement("button");return s.innerHTML = t, s.addEventListener("click", e), "string" == typeof o && o.length && o.split(" ").forEach(function (t) {
	        s.classList.add(t);
	      }), this.modalBoxFooter.appendChild(s), s;
	    }, t.prototype.resize = function () {
	      console.warn("Resize is deprecated and will be removed in version 1.0");
	    }, t.prototype.isOverflow = function () {
	      var t = window.innerHeight,
	          o = this.modalBox.clientHeight;return o >= t;
	    }, t.prototype.checkOverflow = function () {
	      this.modal.classList.contains("tingle-modal--visible") && (this.isOverflow() ? this.modal.classList.add("tingle-modal--overflow") : this.modal.classList.remove("tingle-modal--overflow"), !this.isOverflow() && this.opts.stickyFooter ? this.setStickyFooter(!1) : this.isOverflow() && this.opts.stickyFooter && (o.call(this), this.setStickyFooter(!0)));
	    }, { modal: t };
	  });
	});

	var BaseComponent = function () {
	    function BaseComponent() {
	        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        classCallCheck(this, BaseComponent);


	        this.events = new Events();

	        this._props = config;

	        this._application = config['application'];
	        this._map = config['map'];

	        this._parent = config['parent'];
	    }

	    createClass(BaseComponent, [{
	        key: 'getMap',
	        value: function getMap() {

	            return this._map;
	        }
	    }, {
	        key: 'getApplication',
	        value: function getApplication() {

	            return this._application;
	        }
	    }, {
	        key: 'getParentComponent',
	        value: function getParentComponent() {

	            return this['_parent'];
	        }
	    }, {
	        key: 'getConfig',
	        value: function getConfig() {

	            return this._props;
	        }
	    }, {
	        key: 'isSimple',
	        value: function isSimple() {

	            return true;
	        }
	    }, {
	        key: 'getView',
	        value: function getView() {

	            return this._view;
	        }
	    }]);
	    return BaseComponent;
	}();

	function noop() {}

	function assign(tar, src) {
		for (var k in src) {
			tar[k] = src[k];
		}return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) {
			tar[k] = 1;
		}return tar;
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function detachBetween(before, after) {
		while (before.nextSibling && before.nextSibling !== after) {
			before.parentNode.removeChild(before.nextSibling);
		}
	}

	function reinsertChildren(parent, target) {
		while (parent.firstChild) {
			target.appendChild(parent.firstChild);
		}
	}

	function reinsertBefore(after, target) {
		var parent = after.parentNode;
		while (parent.firstChild !== after) {
			target.appendChild(parent.firstChild);
		}
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createFragment() {
		return document.createDocumentFragment();
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function addListener(node, event, handler, options) {
		node.addEventListener(event, handler, options);
	}

	function removeListener(node, event, handler, options) {
		node.removeEventListener(event, handler, options);
	}

	function setAttribute(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);else node.setAttribute(attribute, value);
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function selectOption(select, value) {
		for (var i = 0; i < select.options.length; i += 1) {
			var option = select.options[i];

			if (option.__value === value) {
				option.selected = true;
				return;
			}
		}
	}

	function selectValue(select) {
		var selectedOption = select.querySelector(':checked') || select.options[0];
		return selectedOption && selectedOption.__value;
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || a && (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' || typeof a === 'function';
	}

	function fire(eventName, data) {
		var handlers = eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function get$2() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function cancel() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set$2(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
		    changed = {},
		    dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) {
			fns.shift()();
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var proto$4 = {
		destroy: destroy,
		get: get$2,
		fire: fire,
		on: on,
		set: set$2,
		_recompute: noop,
		_set: _set,
		_stage: _stage,
		_mount: _mount,
		_differs: _differs
	};

	/* src\js\application\modal\Message.html generated by Svelte v2.16.1 */

	function data$1() {
		return {
			mode: 'alert',
			headerText: '',
			messageText: ''

		};
	}
	function translate(text) {
		return Translations$2.getText(text);
	}
	var methods = {
		onCloseHandler: function onCloseHandler() {
			this.fire('close');
		}
	};

	function create_main_fragment(component, ctx) {
		var if_block_anchor;

		function select_block_type(ctx) {
			if (ctx.mode === 'alert') return create_if_block;
			if (ctx.mode === 'warning') return create_if_block_1;
			if (ctx.mode === 'error') return create_if_block_2;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type && current_block_type(component, ctx);

		return {
			c: function c() {
				if (if_block) if_block.c();
				if_block_anchor = createComment();
			},
			m: function m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p: function p(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(component, ctx);
					if (if_block) if_block.c();
					if (if_block) if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			d: function d(detach) {
				if (if_block) if_block.d(detach);
				if (detach) {
					detachNode(if_block_anchor);
				}
			}
		};
	}

	// (21:26) 
	function create_if_block_2(component, ctx) {
		var div2,
		    div0,
		    text0,
		    text1,
		    text2,
		    div1,
		    button,
		    text3_value = translate('alerts.close'),
		    text3;

		var if_block = ctx.headerText && create_if_block_3(component, ctx);

		function click_handler(event) {
			component.onCloseHandler();
		}

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				if (if_block) if_block.c();
				text0 = createText("\r\n        ");
				text1 = createText(ctx.messageText);
				text2 = createText("\r\n    ");
				div1 = createElement("div");
				button = createElement("button");
				text3 = createText(text3_value);
				div0.className = "dialog-content";
				addListener(button, "click", click_handler);
				button.className = "dialog-primary-button";
				div1.className = "dialog-footer";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				if (if_block) if_block.m(div0, null);
				append(div0, text0);
				append(div0, text1);
				append(div2, text2);
				append(div2, div1);
				append(div1, button);
				append(button, text3);
			},
			p: function p(changed, ctx) {
				if (ctx.headerText) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block_3(component, ctx);
						if_block.c();
						if_block.m(div0, text0);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (changed.messageText) {
					setData(text1, ctx.messageText);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				if (if_block) if_block.d();
				removeListener(button, "click", click_handler);
			}
		};
	}

	// (11:28) 
	function create_if_block_1(component, ctx) {
		var div2,
		    div0,
		    text0,
		    text1,
		    div1,
		    button,
		    text2_value = translate('alerts.close'),
		    text2;

		function click_handler(event) {
			component.onCloseHandler();
		}

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				text0 = createText(ctx.messageText);
				text1 = createText("\r\n    ");
				div1 = createElement("div");
				button = createElement("button");
				text2 = createText(text2_value);
				div0.className = "dialog-content";
				addListener(button, "click", click_handler);
				button.className = "dialog-primary-button";
				div1.className = "dialog-footer";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				append(div0, text0);
				append(div2, text1);
				append(div2, div1);
				append(div1, button);
				append(button, text2);
			},
			p: function p(changed, ctx) {
				if (changed.messageText) {
					setData(text0, ctx.messageText);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	// (1:0) {#if mode === 'alert'}
	function create_if_block(component, ctx) {
		var div2,
		    div0,
		    text0,
		    text1,
		    div1,
		    button,
		    text2_value = translate('alerts.close'),
		    text2;

		function click_handler(event) {
			component.onCloseHandler();
		}

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				text0 = createText(ctx.messageText);
				text1 = createText("\r\n    ");
				div1 = createElement("div");
				button = createElement("button");
				text2 = createText(text2_value);
				div0.className = "dialog-content";
				addListener(button, "click", click_handler);
				button.className = "dialog-primary-button";
				div1.className = "dialog-footer";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				append(div0, text0);
				append(div2, text1);
				append(div2, div1);
				append(div1, button);
				append(button, text2);
			},
			p: function p(changed, ctx) {
				if (changed.messageText) {
					setData(text0, ctx.messageText);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	// (24:8) {#if headerText}
	function create_if_block_3(component, ctx) {
		var text, br;

		return {
			c: function c() {
				text = createText(ctx.headerText);
				br = createElement("br");
			},
			m: function m(target, anchor) {
				insert(target, text, anchor);
				insert(target, br, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.headerText) {
					setData(text, ctx.headerText);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(text);
					detachNode(br);
				}
			}
		};
	}

	function Message(options) {
		init(this, options);
		this._state = assign(data$1(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Message.prototype, proto$4);
	assign(Message.prototype, methods);

	var ModalComponent = function (_BaseComponent) {
	    inherits(ModalComponent, _BaseComponent);

	    function ModalComponent() {
	        classCallCheck(this, ModalComponent);
	        return possibleConstructorReturn(this, (ModalComponent.__proto__ || Object.getPrototypeOf(ModalComponent)).apply(this, arguments));
	    }

	    createClass(ModalComponent, [{
	        key: 'init',
	        value: function init() {

	            var modal = new tingle_min.modal({
	                footer: false,
	                stickyFooter: false,
	                closeMethods: []
	            });

	            modal.setContent('<div id="search-modal-container">' + '<i title="' + Translations$2.getText('alerts.close') + '" class="panel-icon-close" style="display:none;"></i>' + '</div>');

	            this._modal = modal;

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var closeIcon = this._getCloseIcon();

	            closeIcon.addEventListener('click', function () {
	                return _this2.hide();
	            });
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            var _this3 = this;

	            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            var closeIcon = this._getCloseIcon();
	            var _options$component = options.component,
	                component = _options$component === undefined ? 'error' : _options$component,
	                _options$headerText = options.headerText,
	                headerText = _options$headerText === undefined ? '' : _options$headerText,
	                _options$messageText = options.messageText,
	                messageText = _options$messageText === undefined ? '' : _options$messageText,
	                _options$events = options.events,
	                events = _options$events === undefined ? {} : _options$events,
	                _options$data = options.data,
	                data = _options$data === undefined ? {} : _options$data,
	                _options$showClose = options.showClose,
	                showClose = _options$showClose === undefined ? false : _options$showClose;


	            var contentParams = {};

	            if (typeof component === 'string') {

	                if (component === 'alert') {
	                    contentParams['mode'] = 'alert';
	                    contentParams['messageText'] = messageText;
	                } else if (component === 'warning') {
	                    contentParams['mode'] = 'warning';
	                    contentParams['messageText'] = messageText;
	                } else if (component === 'error') {
	                    contentParams['mode'] = 'error';
	                    contentParams['headerText'] = headerText;
	                    contentParams['messageText'] = messageText;
	                }

	                var content = new Message({
	                    target: this._getModalContainer(),
	                    data: contentParams
	                });

	                content.on('close', function () {
	                    return _this3.hide();
	                });

	                this._content = content;
	            } else {
	                var _content = new component({
	                    target: this._getModalContainer(),
	                    data: data
	                });

	                for (var index in events) {
	                    _content.on(index, events[index]);
	                }

	                this._content = _content;
	            }

	            var closeState = 'none';
	            if (showClose) {
	                closeState = 'block';
	            }
	            closeIcon.style.display = closeState;

	            this._modal.open();
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {

	            if (this._content) {
	                this._content.destroy();
	            }

	            this._content = null;

	            this._modal.close();
	        }
	    }, {
	        key: '_getModalContainer',
	        value: function _getModalContainer() {

	            return document.querySelector('#search-modal-container');
	        }
	    }, {
	        key: '_getCloseIcon',
	        value: function _getCloseIcon() {

	            var container = this._getModalContainer();
	            return container.querySelector('i.panel-icon-close');
	        }
	    }]);
	    return ModalComponent;
	}(BaseComponent);

	var Application = function () {
	    function Application(config) {
	        classCallCheck(this, Application);


	        this._config = config;

	        this._appEvents = new Events();

	        this._serviceEvents = new Events();
	    }

	    createClass(Application, [{
	        key: 'start',
	        value: function () {
	            var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:

	                                this._initRequestManager();

	                                this._initStore();

	                                this._setLocale();

	                                _context.next = 5;
	                                return this._loadCommonData();

	                            case 5:
	                                _context.next = 7;
	                                return this._initMap();

	                            case 7:

	                                this._initBridgeControllers();

	                                this._initMapManagers();

	                                this._initAddons();

	                                this._initDialogComponent();

	                                this._initUiElements();

	                                this._bindEvents();

	                                this._applyAddonsAfterIniting();

	                            case 14:
	                            case 'end':
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));

	            function start() {
	                return _ref.apply(this, arguments);
	            }

	            return start;
	        }()
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            var events = this.getAppEvents();

	            window.addEventListener('resize', function () {
	                return events.trigger('system:window:resize');
	            });
	        }
	    }, {
	        key: '_initRequestManager',
	        value: function _initRequestManager() {

	            this._requestManager = new RequestManager({
	                application: this
	            });
	        }
	    }, {
	        key: '_initStore',
	        value: function _initStore() {
	            var store = this._config.store;


	            var dataStore = new SearchDataStore(store);
	            this._dataStore = dataStore;
	            window.CatalogStore = dataStore;
	        }
	    }, {
	        key: '_setLocale',
	        value: function _setLocale() {

	            var storedState = localStorage.getItem(LOCAL_STORAGE_KEY);
	            var viewState = JSON.parse(storedState) || {};

	            Translations$2.setLanguage(viewState.lang || DEFAULT_LANGUAGE$1);
	            L.gmxLocale.setLanguage(viewState.lang || DEFAULT_LANGUAGE$1);
	        }
	    }, {
	        key: '_loadCommonData',
	        value: function () {
	            var _ref2 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return this._getUserInfo();

	                            case 2:
	                                _context2.next = 4;
	                                return this._checkAccess();

	                            case 4:
	                                _context2.next = 6;
	                                return this._loadVersion();

	                            case 6:
	                            case 'end':
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));

	            function _loadCommonData() {
	                return _ref2.apply(this, arguments);
	            }

	            return _loadCommonData;
	        }()
	    }, {
	        key: '_getUserInfo',
	        value: function () {
	            var _ref3 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	                var requestManager, userInfo, response, _response$Result, ID, FullName, Email, Phone, Organization, store;

	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                requestManager = this.getRequestManager();
	                                userInfo = {};
	                                _context3.prev = 2;
	                                _context3.next = 5;
	                                return requestManager.requestGetUserInfo();

	                            case 5:
	                                response = _context3.sent;
	                                _response$Result = response.Result, ID = _response$Result.ID, FullName = _response$Result.FullName, Email = _response$Result.Email, Phone = _response$Result.Phone, Organization = _response$Result.Organization;

	                                userInfo = {
	                                    IsAuthenticated: true,
	                                    ID: ID,
	                                    FullName: FullName,
	                                    Email: Email,
	                                    Phone: Phone,
	                                    Organization: Organization
	                                };
	                                _context3.next = 14;
	                                break;

	                            case 10:
	                                _context3.prev = 10;
	                                _context3.t0 = _context3['catch'](2);

	                                console.log('userInfoExcept', _context3.t0);
	                                userInfo = { IsAuthenticated: false };

	                            case 14:
	                                store = this.getStore();

	                                store.rewriteData('userInfo', userInfo);

	                            case 16:
	                            case 'end':
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this, [[2, 10]]);
	            }));

	            function _getUserInfo() {
	                return _ref3.apply(this, arguments);
	            }

	            return _getUserInfo;
	        }()
	    }, {
	        key: '_checkAccess',
	        value: function () {
	            var _ref4 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
	                var store, userInfo, requestManager, response, Status, _response$Result2, Result, LayerID;

	                return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                store = this.getStore();
	                                userInfo = store.getData('userInfo');
	                                requestManager = this.getRequestManager();
	                                _context4.prev = 3;
	                                _context4.next = 6;
	                                return requestManager.requestGetLayerId({
	                                    layerID: ACCESS_LAYER_ID
	                                });

	                            case 6:
	                                response = _context4.sent;
	                                Status = response.Status, _response$Result2 = response.Result, Result = _response$Result2 === undefined ? {} : _response$Result2;
	                                LayerID = Result === null ? null : Result['LayerID'];


	                                if (Status === 'ok' && Result && LayerID === ACCESS_LAYER_ID) {
	                                    userInfo['Role'] = ACCESS_USER_ROLE;
	                                    store.rewriteData('userInfo', userInfo);
	                                }
	                                _context4.next = 15;
	                                break;

	                            case 12:
	                                _context4.prev = 12;
	                                _context4.t0 = _context4['catch'](3);

	                                console.log('checkAccessExcept', _context4.t0);

	                            case 15:
	                            case 'end':
	                                return _context4.stop();
	                        }
	                    }
	                }, _callee4, this, [[3, 12]]);
	            }));

	            function _checkAccess() {
	                return _ref4.apply(this, arguments);
	            }

	            return _checkAccess;
	        }()
	    }, {
	        key: '_loadVersion',
	        value: function () {
	            var _ref5 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
	                var language, versionPath, response, text, store;
	                return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                language = Translations$2.getLanguage();
	                                versionPath = VERSION_PATH + language + '.txt';
	                                _context5.next = 4;
	                                return fetch(versionPath);

	                            case 4:
	                                response = _context5.sent;
	                                _context5.next = 7;
	                                return response.text();

	                            case 7:
	                                text = _context5.sent;
	                                store = this.getStore();

	                                store.setMetaItem('about', text);

	                            case 10:
	                            case 'end':
	                                return _context5.stop();
	                        }
	                    }
	                }, _callee5, this);
	            }));

	            function _loadVersion() {
	                return _ref5.apply(this, arguments);
	            }

	            return _loadVersion;
	        }()
	    }, {
	        key: '_initMap',
	        value: function () {
	            var _ref6 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	                var mapComponent;
	                return regeneratorRuntime.wrap(function _callee6$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                mapComponent = new Map({
	                                    application: this
	                                });
	                                _context6.next = 3;
	                                return mapComponent.loadMap();

	                            case 3:

	                                this._mapComponent = mapComponent;

	                            case 4:
	                            case 'end':
	                                return _context6.stop();
	                        }
	                    }
	                }, _callee6, this);
	            }));

	            function _initMap() {
	                return _ref6.apply(this, arguments);
	            }

	            return _initMap;
	        }()
	    }, {
	        key: '_initBridgeControllers',
	        value: function _initBridgeControllers() {
	            var _config$bridgeControl = this._config.bridgeControllers,
	                bridgeControllers = _config$bridgeControl === undefined ? [] : _config$bridgeControl;


	            this._bridgeControllers = {};

	            for (var i = 0; i < bridgeControllers.length; i++) {

	                var currentController = bridgeControllers[i];
	                var index = currentController.index,
	                    _constructor = currentController.constructor;


	                this._bridgeControllers[index] = new _constructor({
	                    map: this.getMap(),
	                    application: this
	                });
	            }
	        }
	    }, {
	        key: '_initMapManagers',
	        value: function _initMapManagers() {
	            var _config$mapManagers = this._config.mapManagers,
	                mapManagers = _config$mapManagers === undefined ? [] : _config$mapManagers;


	            this._mapManagers = {};

	            for (var i = 0; i < mapManagers.length; i++) {

	                var currentManager = mapManagers[i];
	                var index = currentManager.index,
	                    _constructor2 = currentManager.constructor;


	                this._mapManagers[index] = new _constructor2({
	                    map: this.getMap(),
	                    application: this,
	                    store: this._dataStore
	                });
	            }
	        }
	    }, {
	        key: '_initAddons',
	        value: function _initAddons() {

	            var appEvents = this.getAppEvents();
	            var _config$addons = this._config.addons,
	                addons = _config$addons === undefined ? [] : _config$addons;


	            this._addons = {};

	            for (var i = 0; i < addons.length; i++) {

	                var currentAddon = addons[i];
	                var index = currentAddon.index,
	                    _constructor3 = currentAddon.constructor;


	                this._addons[index] = new _constructor3({
	                    name: index,
	                    application: this
	                });

	                appEvents.trigger('system:addon:' + index + ':created');
	            }
	        }
	    }, {
	        key: '_initDialogComponent',
	        value: function _initDialogComponent() {

	            var modalComponent = new ModalComponent({
	                application: this,
	                map: this.getMap()
	            });

	            modalComponent.init();

	            this._modalComponent = modalComponent;
	        }
	    }, {
	        key: '_initUiElements',
	        value: function _initUiElements() {

	            var isMobileGadget = isMobile();
	            var _config$uiElements = this._config.uiElements,
	                uiElements = _config$uiElements === undefined ? [] : _config$uiElements;

	            var appEvents = this.getAppEvents();

	            this._uiElements = {};

	            for (var i = 0; i < uiElements.length; i++) {

	                var currentElement = uiElements[i];
	                var index = currentElement.index,
	                    _constructor4 = currentElement.constructor,
	                    _currentElement$mobil = currentElement.mobile,
	                    mobile = _currentElement$mobil === undefined ? true : _currentElement$mobil;


	                if (isMobileGadget && mobile || !isMobileGadget) {

	                    this._uiElements[index] = new _constructor4({
	                        name: index,
	                        application: this,
	                        map: this.getMap()
	                    });

	                    this._uiElements[index].init();

	                    appEvents.trigger('system:ui:' + index + ':created');
	                }
	            }

	            appEvents.trigger('system:uiElements:created');
	        }
	    }, {
	        key: '_applyAddonsAfterIniting',
	        value: function _applyAddonsAfterIniting() {
	            var _addons = this._addons;


	            for (var addonKey in _addons) {
	                var addon = _addons[addonKey];
	                addon['globalApply'] && addon.globalApply();
	            }
	        }
	    }, {
	        key: '_errorHandle',
	        value: function _errorHandle(e) {

	            window.console.error(e);
	        }
	    }, {
	        key: 'showLoader',
	        value: function showLoader() {
	            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


	            var loaderWidget = this.getUiElement('loadingIndicator');

	            loaderWidget.show(state);
	        }
	    }, {
	        key: 'showNotification',
	        value: function showNotification() {
	            var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';


	            var notificationWidget = this.getUiElement('popupNotificator');

	            notificationWidget.show(message);
	        }
	    }, {
	        key: 'showError',
	        value: function showError() {
	            var errorText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	            var errorHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';


	            var modalComponent = this.getModal();

	            modalComponent.show({
	                component: 'error',
	                headerText: errorHeader,
	                messageText: errorText
	            });
	        }
	    }, {
	        key: 'getRequestManager',
	        value: function getRequestManager() {

	            return this._requestManager;
	        }
	    }, {
	        key: 'getBridgeController',
	        value: function getBridgeController(name) {

	            return this._bridgeControllers[name];
	        }
	    }, {
	        key: 'getMapManager',
	        value: function getMapManager(name) {

	            return this._mapManagers[name];
	        }
	    }, {
	        key: 'getAddon',
	        value: function getAddon(index) {

	            return this._addons[index];
	        }
	    }, {
	        key: 'getModal',
	        value: function getModal() {

	            return this._modalComponent;
	        }
	    }, {
	        key: 'getUiElement',
	        value: function getUiElement(index) {

	            return this._uiElements[index];
	        }
	    }, {
	        key: 'getStore',
	        value: function getStore() {

	            return this._dataStore;
	        }
	    }, {
	        key: 'getMap',
	        value: function getMap() {

	            return this._mapComponent.getMap();
	        }
	    }, {
	        key: 'getMapContainer',
	        value: function getMapContainer() {

	            return this._mapComponent.getMapContainer();
	        }
	    }, {
	        key: 'getMapComponent',
	        value: function getMapComponent() {

	            return this._mapComponent;
	        }
	    }, {
	        key: 'getAppEvents',
	        value: function getAppEvents() {

	            return this._appEvents;
	        }
	    }, {
	        key: 'getServiceEvents',
	        value: function getServiceEvents() {

	            return this._serviceEvents;
	        }
	    }]);
	    return Application;
	}();

	var BaseBridgeController = function () {
	    function BaseBridgeController(config) {
	        classCallCheck(this, BaseBridgeController);
	        var map = config.map,
	            application = config.application,
	            store = config.store;


	        this._map = map;
	        this._application = application;
	        this._store = store;
	    }

	    createClass(BaseBridgeController, [{
	        key: "getMap",
	        value: function getMap() {

	            return this._map;
	        }
	    }, {
	        key: "getStore",
	        value: function getStore() {

	            return this._store;
	        }
	    }, {
	        key: "getApplication",
	        value: function getApplication() {

	            return this._application;
	        }
	    }]);
	    return BaseBridgeController;
	}();

	var DrawingBridgeController = function (_BaseBridgeController) {
	    inherits(DrawingBridgeController, _BaseBridgeController);

	    function DrawingBridgeController() {
	        classCallCheck(this, DrawingBridgeController);
	        return possibleConstructorReturn(this, (DrawingBridgeController.__proto__ || Object.getPrototypeOf(DrawingBridgeController)).apply(this, arguments));
	    }

	    createClass(DrawingBridgeController, [{
	        key: 'addDrawingOnList',


	        /* Add drawing start */
	        value: function addDrawingOnList(rawItem) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var object = rawItem.object,
	                geoJSON = rawItem.geoJSON;

	            var drawingId = object.options.uuid || L.gmxUtil.newId();
	            var drawing = store.getData('drawings', drawingId);

	            if (!drawing) {

	                object.options.uuid = drawingId;

	                var color = L.GmxDrawing.utils.defaultStyles.lineStyle.color;

	                switch (object.options.type) {
	                    case 'Polygon':
	                    case 'Polyline':
	                    case 'Rectangle':
	                        color = object.options.lineStyle.color;
	                        break;
	                    default:
	                        break;
	                }

	                var GeoJSON = geoJSON || object.toGeoJSON();

	                var drawingObject = getDrawingObject({
	                    id: object.options.uuid,
	                    name: null,
	                    geoJSON: GeoJSON,
	                    color: color,
	                    visible: true
	                });
	                drawingObject['drawing'] = object;

	                store.addData('drawings', { id: drawingId, content: drawingObject }, ['drawings:updateList']);
	            }
	        }
	    }, {
	        key: 'addDrawingOnMapAndList',
	        value: function addDrawingOnMapAndList(item) {
	            var returnId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


	            var application = this.getApplication();
	            var store = application.getStore();

	            var name = item.name,
	                color = item.color,
	                geoJSON = item.geoJSON,
	                visible = item.visible;


	            if (isGeojsonFeature(geoJSON)) {

	                var drawingId = L.gmxUtil.newId();
	                var editable = typeof geoJSON.properties.editable === 'undefined' ? true : geoJSON.properties.editable;

	                var currentDrawing = getDrawingObject({ id: drawingId, name: name, geoJSON: geoJSON, color: color, visible: visible, editable: editable });

	                // add drawing on list
	                store.addData('drawings', { id: drawingId, content: currentDrawing }, ['drawings:updateList']);

	                // add drawing on map
	                this.toggleDrawingOnMap(drawingId, visible);

	                if (returnId) {
	                    return drawingId;
	                }
	            } else {
	                return null;
	            }
	        }
	    }, {
	        key: 'addDrawingsOnListAndMapFromUploading',
	        value: function addDrawingsOnListAndMapFromUploading() {
	            var _this2 = this;

	            var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];


	            var application = this.getApplication();
	            var store = application.getStore();
	            var map = this.getMap();

	            var idsList = [];

	            items.forEach(function (item) {
	                var name = item.name,
	                    selectedName = item.selectedName,
	                    color = item.color,
	                    editable = item.editable,
	                    visible = item.visible,
	                    _item$geoJSON = item.geoJSON,
	                    geometry = _item$geoJSON.geometry,
	                    properties = _item$geoJSON.properties;

	                var itemId = _this2.addDrawingOnMapAndList({
	                    name: selectedName ? selectedName : name,
	                    color: color,
	                    geoJSON: { type: 'Feature', properties: properties, geometry: geometry },
	                    visible: visible,
	                    editable: editable
	                }, true);
	                idsList.push(itemId);
	            });

	            var drawings = store.getData('drawings');
	            var addedDrawings = idsList.map(function (itemId) {
	                return drawings[itemId];
	            });

	            var bounds = null;

	            addedDrawings.forEach(function (item) {
	                var drawing = item.drawing;

	                if (drawing) {
	                    if (bounds) {
	                        bounds.extend(drawing.getBounds());
	                    } else {
	                        bounds = drawing.getBounds();
	                    }
	                }
	            });

	            bounds && map.fitBounds(bounds, { animate: false });
	        }
	    }, {
	        key: 'addDrawingOnMapAndListFromOsm',
	        value: function addDrawingOnMapAndListFromOsm() {
	            var _this3 = this;

	            var results = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];


	            var map = this.getMap();

	            var features = results.map(function (x) {
	                x.feature.properties.editable = false;
	                x.feature.properties.name = x.feature.properties.ObjName;
	                return x.feature;
	            });

	            var fill = NON_EDIT_LINE_STYLE.fill,
	                weight = NON_EDIT_LINE_STYLE.weight,
	                opacity = NON_EDIT_LINE_STYLE.opacity;


	            if (features && features.length) {

	                features.map(function (geoJSON) {

	                    // create map drawing object
	                    normalizeGeometry(geoJSON.geometry);

	                    var _map$gmxDrawing$addGe = map.gmxDrawing.addGeoJSON(geoJSON, {
	                        editable: false,
	                        lineStyle: { fill: fill, weight: weight, opacity: opacity },
	                        className: 'osm-layer'
	                    }),
	                        _map$gmxDrawing$addGe2 = slicedToArray(_map$gmxDrawing$addGe, 1),
	                        object = _map$gmxDrawing$addGe2[0];

	                    // show drawing on map
	                    //object.bringToBack();


	                    object.bringToFront();

	                    // adding drawing object on list
	                    _this3.addDrawingOnList({ object: object, geoJSON: geoJSON });
	                });

	                // zooming ??? !!!
	                var json = features.reduce(function (a, geojson) {
	                    a.addData(geojson.geometry);
	                    return a;
	                }, L.geoJson());

	                var bounds = json.getBounds();

	                bounds && map.fitBounds(bounds);
	            }
	        }
	        /* Add drawing end */

	        /* Edit drawing start */

	    }, {
	        key: 'editDrawingOnList',
	        value: function editDrawingOnList(rawItem) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var object = rawItem.object;

	            var drawingId = object.options.uuid;

	            var currentDrawing = store.getData('drawings', drawingId);

	            if (currentDrawing) {

	                var geoJSON = object.toGeoJSON();

	                var geometry = geoJSON.geometry;
	                var coordinates = geometry.coordinates;


	                if (typeof coordinates !== 'undefined') {

	                    currentDrawing.drawing = object;
	                    currentDrawing.geoJSON = geoJSON;
	                    currentDrawing.area = getDrawingObjectArea(geoJSON);

	                    store.updateData('drawings', { id: drawingId, content: currentDrawing }, ['drawings:redrawItem']);
	                } else {

	                    if (currentDrawing.drawing) {
	                        currentDrawing.drawing.remove();
	                        currentDrawing.drawing = null;

	                        store.removeData('drawings', drawingId, ['drawings:updateList']);
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'editDrawingOnMapAndList',
	        value: function editDrawingOnMapAndList(e) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var _e$detail = e.detail,
	                drawingId = _e$detail.id,
	                drawingName = _e$detail.name,
	                drawingColor = _e$detail.color;


	            var currentDrawing = store.getData('drawings', drawingId);

	            // editing drawing object on map
	            var drawing = currentDrawing.drawing;


	            var options = {
	                lineStyle: {
	                    fill: false,
	                    weight: 2,
	                    opacity: 1,
	                    color: drawingColor
	                },
	                pointStyle: { color: drawingColor }
	            };
	            if (drawing) {
	                if (drawing.options.editable) {
	                    drawing.setOptions(options);
	                } else {
	                    drawing.enableEdit();
	                    options.className = 'osm-layer';
	                    drawing.setOptions(options);
	                    drawing.disableEdit();
	                }
	            }

	            // editing drawing object on list
	            currentDrawing['name'] = drawingName;
	            currentDrawing['color'] = drawingColor;
	            currentDrawing['drawing'] = drawing;

	            // setting drawing object in store
	            store.updateData('drawings', { id: drawingId, content: currentDrawing }, ['drawings:redrawItem']);
	        }
	        /* Edit drawing end */

	        /* Toggle drawing start */

	    }, {
	        key: 'toggleDrawingOnMap',
	        value: function toggleDrawingOnMap(drawingId, visible) {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var object = store.getData('drawings', drawingId);

	            if (visible) {
	                var color = object.color;
	                var editable = typeof object.geoJSON.properties.editable === 'undefined' ? true : object.geoJSON.properties.editable;
	                var options = {
	                    editable: editable,
	                    lineStyle: {
	                        fill: false,
	                        weight: 2,
	                        opacity: 1,
	                        color: color
	                    },
	                    pointStyle: {
	                        color: color
	                    }
	                };

	                var _map$gmxDrawing$addGe3 = this._map.gmxDrawing.addGeoJSON(object.geoJSON, options),
	                    _map$gmxDrawing$addGe4 = slicedToArray(_map$gmxDrawing$addGe3, 1),
	                    drawing = _map$gmxDrawing$addGe4[0];

	                if (!editable) {
	                    options.className = 'osm-layer';
	                    // drawing.enableEdit();
	                    drawing.setOptions({
	                        editable: editable,
	                        lineStyle: {
	                            fill: false,
	                            weight: 2,
	                            opacity: 1,
	                            color: color
	                        },
	                        pointStyle: { color: color }
	                    });
	                    // drawing.disableEdit();
	                }
	                drawing.options.uuid = drawingId;
	                object.drawing = drawing;
	                //drawing.bringToBack();
	                drawing.bringToFront();
	                drawing.visible = true;
	            } else {
	                if (object.drawing) {
	                    var _drawing = object.drawing;
	                    _drawing.remove();
	                    object.drawing = null;
	                }
	            }

	            store.updateData('drawings', { id: drawingId, content: object });
	        }
	    }, {
	        key: 'toggleDrawingsOnMapAndList',
	        value: function toggleDrawingsOnMapAndList(e, mode) {

	            var map = this.getMap();
	            var application = this.getApplication();
	            var store = application.getStore();
	            var commonVisible = mode === 'all' ? e.detail : e.detail.visible;

	            var drawnObjects = this._getDrawingObjects(store, mode, e);

	            var contentForStore = [];

	            drawnObjects.forEach(function (currentDrawing) {
	                var drawingId = currentDrawing.id;


	                if (commonVisible) {

	                    // getting drawing from currentDrawing
	                    var drawingOptions = {};

	                    drawingOptions['color'] = currentDrawing.color;
	                    drawingOptions['editable'] = typeof currentDrawing.geoJSON.properties.editable === 'undefined' ? true : currentDrawing.geoJSON.properties.editable;
	                    drawingOptions['lineStyle'] = { fill: false, weight: 2, opacity: 1, color: currentDrawing.color };
	                    drawingOptions['pointStyle'] = { color: currentDrawing.color };

	                    var _map$gmxDrawing$addGe5 = map.gmxDrawing.addGeoJSON(currentDrawing.geoJSON, drawingOptions),
	                        _map$gmxDrawing$addGe6 = slicedToArray(_map$gmxDrawing$addGe5, 1),
	                        drawing = _map$gmxDrawing$addGe6[0];

	                    if (!drawingOptions['editable']) {

	                        drawingOptions['className'] = 'osm-layer';
	                        drawing.setOptions(drawingOptions);
	                    }

	                    drawing.options.uuid = drawingId;
	                    currentDrawing.drawing = drawing;

	                    currentDrawing.visible = true;

	                    if (currentDrawing.drawing) {
	                        //drawing.bringToBack();
	                        drawing.bringToFront();
	                        drawing.visible = true;
	                    }
	                } else {
	                    currentDrawing.visible = false;

	                    if (currentDrawing.drawing) {
	                        currentDrawing.drawing.remove();
	                        currentDrawing.drawing = null;
	                    }
	                }

	                contentForStore.push({ id: drawingId, content: currentDrawing });
	            });

	            store.updateData('drawings', contentForStore, ['drawings:updateList']);
	        }
	        /* Toggle drawing end */

	        /* Delete drawing start */

	    }, {
	        key: 'deleteDrawingsOnMapAndList',
	        value: function deleteDrawingsOnMapAndList(e, mode) {

	            var deleteDrawingFromMap = function deleteDrawingFromMap(drawing) {
	                if (drawing) {
	                    drawing.remove();
	                }
	            };
	            var application = this.getApplication();
	            var store = application.getStore();

	            var drawnObjects = this._getDrawingObjects(store, mode, e);

	            drawnObjects.forEach(function (currentDrawn) {
	                var drawingObject = currentDrawn.drawing;

	                deleteDrawingFromMap(drawingObject);
	            });

	            if (mode === 'row') {
	                store.removeData('drawings', [e.detail['id']], ['drawings:updateList']);
	            } else {
	                store.clear('drawings', ['drawings:updateList']);
	            }
	        }
	        /* Delete drawing end */

	        /* Zoom to drawing start */

	    }, {
	        key: 'zoomToDrawingOnMap',
	        value: function zoomToDrawingOnMap(e) {

	            var map = this._map;
	            var application = this.getApplication();
	            var store = application.getStore();

	            var _e$detail2 = e.detail,
	                id = _e$detail2.id,
	                visible = _e$detail2.visible;


	            var item = store.getData('drawings', id);

	            if (visible && item) {
	                var _item$geoJSON$geometr = item.geoJSON.geometry,
	                    type = _item$geoJSON$geometr.type,
	                    coordinates = _item$geoJSON$geometr.coordinates;

	                if (type === 'Point') {
	                    var center = L.latLng(coordinates[1], coordinates[0]);
	                    map.setView(center);
	                } else {
	                    var bounds = item.drawing.getBounds();
	                    map.fitBounds(bounds, { animate: false });
	                }
	            }
	        }
	        /* Zoom to drawing end */

	    }, {
	        key: '_getDrawingObjects',
	        value: function _getDrawingObjects(store, mode) {
	            var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


	            var drawnObjects = void 0;

	            if (mode === 'row') {
	                var drawingId = e.detail.id;

	                drawnObjects = [store.getData('drawings', drawingId)];
	            } else {
	                var rawDrawnObjects = store.getData('drawings');
	                drawnObjects = Object.keys(rawDrawnObjects).map(function (id) {
	                    return rawDrawnObjects[id];
	                });
	            }

	            return drawnObjects;
	        }
	    }]);
	    return DrawingBridgeController;
	}(BaseBridgeController);

	var ContourBridgeController = function (_BaseBridgeController) {
	    inherits(ContourBridgeController, _BaseBridgeController);

	    function ContourBridgeController() {
	        classCallCheck(this, ContourBridgeController);
	        return possibleConstructorReturn(this, (ContourBridgeController.__proto__ || Object.getPrototypeOf(ContourBridgeController)).apply(this, arguments));
	    }

	    createClass(ContourBridgeController, [{
	        key: 'hoverContour',
	        value: function hoverContour(e, state) {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var detail = e.detail;


	            var gmxId = void 0;
	            var mode = void 0;

	            if (detail === undefined) {
	                var _id = e.gmx.id;

	                gmxId = _id;
	                mode = 'fromMap';
	            } else {
	                var gmx_id = detail.item.gmx_id;

	                gmxId = gmx_id;
	                mode = 'fromList';
	            }

	            var contour = store.getData('contours', gmxId);

	            if (contour) {
	                var changedContour = setProperty(contour, { 'hover': state });

	                var events = [];

	                if (mode === 'fromMap') {
	                    events.push('contours:setHoveredList');
	                }
	                events.push('contours:setHoveredMap');

	                store.updateData('contours', { id: gmxId, content: changedContour }, events);
	            } else {
	                window.console.warn(gmxId + ' - undefined');
	            }
	        }
	    }, {
	        key: 'zoomToContourOnMap',
	        value: function zoomToContourOnMap(e) {
	            var gmxId = e.detail.item.gmx_id;


	            var application = this.getApplication();
	            var events = application.getServiceEvents();

	            events.trigger('contours:zoomMap', gmxId);

	            //const event = {detail: {gmx_id: gmxId}};
	            //this.showQuicklookOnListAndMap(event);
	        }
	    }, {
	        key: 'setSelectedOnListAndMap',
	        value: function setSelectedOnListAndMap(e) {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var gmxId = e.detail.gmx_id;

	            var item = store.getData('contours', gmxId);
	            var changedItem = setProperty(item, { 'selected': !getProperty(item, 'selected') });

	            store.updateData('contours', { id: gmxId, content: changedItem }, ['contours:setSelected', 'contours:setSelectedMap']);
	        }
	    }, {
	        key: 'setAllSelectedOnListAndMap',
	        value: function setAllSelectedOnListAndMap() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var data = store.getSerializedData('contours');
	            var cartData = data.filter(function (item) {
	                return getProperty(item, 'cart');
	            });

	            var selectedState = !cartData.every(function (item) {
	                return getProperty(item, 'selected');
	            });

	            var dataToUpdate = cartData.map(function (item) {
	                return {
	                    id: getProperty(item, 'gmx_id'),
	                    content: setProperty(item, { 'selected': selectedState })
	                };
	            });

	            store.updateData('contours', dataToUpdate, ['contours:setAllSelectedList', 'contours:setAllSelectedMap']);
	        }
	    }, {
	        key: 'addToCartOnListAndMap',
	        value: function addToCartOnListAndMap(e) {

	            var application = this.getApplication();
	            var events = application.getServiceEvents();
	            var store = application.getStore();

	            var allData = store.getSerializedData('contours');
	            var filteredAllData = allData.filter(function (item) {
	                return getProperty(item, 'cart');
	            });

	            var gmxId = e.detail.gmx_id;

	            var item = store.getData('contours', gmxId);

	            var isCart = getProperty(item, 'cart');

	            if (filteredAllData.length + 1 > MAX_CART_SIZE && !isCart) {
	                events.trigger('sidebar:cart:limit');
	                return;
	            }

	            var changedItem = setProperty(item, { 'cart': !isCart, 'selected': true });

	            store.updateData('contours', { id: gmxId, content: changedItem }, ['contours:addToCartList', 'contours:addToCartMap', 'contours:addToCartHeader']);
	        }
	    }, {
	        key: 'addAllToCartOnListAndMap',
	        value: function addAllToCartOnListAndMap() {

	            var application = this.getApplication();
	            var events = application.getServiceEvents();
	            var store = application.getStore();

	            var _store$getData = store.getData('clientFilter'),
	                isChanged = _store$getData.isChanged;

	            var filteredResults = store[isChanged ? 'getFilteredResults' : 'getResults']();
	            var notInCartResults = filteredResults.filter(function (item) {
	                return !getProperty(item, 'cart');
	            });
	            var areSomeNotInCart = notInCartResults.length > 0;
	            var favorites = store.getFavorites();

	            if (areSomeNotInCart && notInCartResults.length + favorites.length > MAX_CART_SIZE) {
	                events.trigger('sidebar:cart:limit');
	                return;
	            }

	            var dataToRewrite = filteredResults.map(function (item) {
	                var gmxId = getProperty(item, 'gmx_id');
	                var changedItem = setProperty(item, {
	                    'cart': areSomeNotInCart,
	                    'selected': areSomeNotInCart
	                });
	                return { id: gmxId, content: changedItem };
	            });

	            store.updateData('contours', dataToRewrite, ['contours:addAllToCartList', 'contours:addAllToCartMap', 'contours:addAllToCartHeader']);
	        }
	    }, {
	        key: 'removeSelectedFavoritesFromListAndMap',
	        value: function removeSelectedFavoritesFromListAndMap() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var data = store.getSerializedData('contours');
	            var cartData = data.filter(function (item) {
	                return getProperty(item, 'cart') && getProperty(item, 'selected');
	            });

	            if (cartData.length < 1) {
	                return;
	            }

	            var dataToUpdate = cartData.map(function (item) {
	                var gmxId = getProperty(item, 'gmx_id');
	                var changedItem = setProperty(item, {
	                    'cart': false,
	                    'selected': false
	                });
	                return { id: gmxId, content: changedItem };
	            });

	            store.updateData('contours', dataToUpdate, ['contours:removeSelectedFavoritesList', 'contours:removeSelectedFavoritesMap']);
	        }
	    }, {
	        key: 'setVisibleToCart',
	        value: function setVisibleToCart() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var allResults = store.getResults();
	            var cartResults = allResults.filter(function (item) {
	                return getProperty(item, 'cart');
	            });
	            var visibleResults = allResults.filter(function (item) {
	                return getProperty(item, 'visible') === 'visible' && !getProperty(item, 'cart');
	            });

	            if (visibleResults.length < 1) {
	                return;
	            }

	            if (cartResults.length + visibleResults.length > MAX_CART_SIZE) {
	                appEvents.trigger('sidebar:cart:limit');
	                return;
	            }

	            var dataToUpdate = visibleResults.map(function (item) {
	                var gmxId = getProperty(item, 'gmx_id');
	                var changedItem = setProperty(item, {
	                    'cart': true,
	                    'selected': true
	                });
	                return { id: gmxId, content: changedItem };
	            });

	            store.updateData('contours', dataToUpdate, ['contours:addVisibleToFavoritesList', 'contours:addVisibleToFavoritesMap']);
	        }
	    }, {
	        key: 'clearContoursOnResults',
	        value: function clearContoursOnResults() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var store = application.getStore();

	            var snapShotsData = store.getData('contours');
	            var keysToRemove = Object.keys(snapShotsData);

	            if (keysToRemove.length < 1) {
	                return;
	            }

	            // remove only results, not favourites
	            var dataToRemove = keysToRemove.reduce(function (data, gmxId) {
	                var item = snapShotsData[gmxId];
	                if (getProperty(item, 'cart')) {
	                    var changedItem = setProperty(item, { 'result': false });
	                    store.updateData('contours', { id: gmxId, content: changedItem });
	                } else {
	                    data.push([gmxId]);
	                }
	                return data;
	            }, []);

	            var idsToRemove = [];
	            dataToRemove.forEach(function (_ref) {
	                var _ref2 = slicedToArray(_ref, 1),
	                    id = _ref2[0];

	                var numberId = parseInt(id);
	                _this2.toggleQuicklook(numberId, false, true);
	                idsToRemove.push(id);
	            });

	            store.removeData('contours', idsToRemove, ['contours:researchedList', 'contours:researchedMap']);
	        }
	    }, {
	        key: 'addContoursOnMapAndList',
	        value: function addContoursOnMapAndList(result) {
	            var fromApplyingState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


	            var application = this.getApplication();
	            var store = application.getStore();

	            var fields = result.fields,
	                _result$values = result.values,
	                values = _result$values === undefined ? [] : _result$values;


	            var gmxIdPosition = fields.indexOf('gmx_id');

	            var contours = values.reduce(function (preparedContours, properties) {

	                var propertiesLastIndex = properties.length - 1;

	                var geometryToGeoJson = L.gmxUtil.geometryToGeoJSON(properties[propertiesLastIndex], true, true);
	                var clipCoords = normalizeGeometry(geometryToGeoJson);

	                var value = CONTOUR_ITEM_ATTRIBUTES.reduce(function (contourData, attrKey) {

	                    var index = fields.indexOf(attrKey);

	                    if (index < 0) {
	                        switch (attrKey) {
	                            case 'hover':
	                            case 'selected':
	                            case 'cart':
	                                contourData.push(false);
	                                break;
	                            case 'result':
	                                contourData.push(true);
	                                break;
	                            case 'acqtime':
	                                contourData.push(null);
	                                break;
	                            case 'visible':
	                                contourData.push('hidden');
	                                break;
	                            case 'clip_coords':
	                                contourData.push(clipCoords);
	                                break;
	                            default:
	                                break;
	                        }
	                    } else {
	                        switch (attrKey) {
	                            case 'visible':
	                                if (typeof properties[index] === 'boolean') {
	                                    contourData.push(properties[index] ? 'visible' : 'hidden');
	                                } else {
	                                    contourData.push(properties[index]);
	                                }
	                                break;
	                            case 'clip_coords':
	                                contourData.push(clipCoords);
	                                break;
	                            default:
	                                contourData.push(properties[index]);
	                                break;
	                        }
	                    }
	                    return contourData;
	                }, []);

	                value.unshift(properties[gmxIdPosition]);
	                value.push(properties[propertiesLastIndex]);

	                preparedContours.push(value);

	                return preparedContours;
	            }, []);

	            var oldData = store.getData('contours');
	            var mergedData = mergeResults(oldData, contours);

	            var resultsForAdding = Object.keys(mergedData).map(function (gmxId) {

	                var item = mergedData[gmxId];

	                return {
	                    id: gmxId,
	                    content: item
	                };
	            });

	            var eventList = [];
	            if (!fromApplyingState) {
	                eventList.push('contours:researchedMap');
	                eventList.push('contours:researchedList');
	                eventList.push('contours:researchedListHeader');
	            } else {
	                eventList.push('contours:startResearchedMap');
	                eventList.push('contours:startResearchedList');
	                eventList.push('contours:startResearchedListHeader');
	            }

	            store.rewriteData('contours', resultsForAdding, eventList);
	        }
	    }, {
	        key: 'clearClientFilter',
	        value: function clearClientFilter() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var searchCriteria = store.getData('searchCriteria');
	            var clouds = searchCriteria.clouds,
	                angle = searchCriteria.angle,
	                date = searchCriteria.date;


	            var dataToRewrite = {
	                isChanged: false,
	                filterData: {
	                    unChecked: [],
	                    clouds: clouds,
	                    angle: angle,
	                    date: date
	                }
	            };

	            store.rewriteData('clientFilter', dataToRewrite, ['clientFilter:changeList', 'clientFilter:changeMap', 'clientFilter:clear']);
	        }
	    }, {
	        key: 'changeClientFilter',
	        value: function changeClientFilter(e) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var searchCriteria = store.getData('searchCriteria');
	            var clientFilter = store.getData('clientFilter');
	            var clientFilterData = clientFilter.filterData;
	            var _e$detail = e.detail,
	                name = _e$detail.name,
	                value = _e$detail.value;


	            var filterData = _extends({}, clientFilterData, defineProperty({}, name, value));
	            var isChanged = isClientFilterChanged(searchCriteria, filterData);

	            var dataToRewrite = {
	                isChanged: isChanged,
	                filterData: filterData
	            };

	            store.rewriteData('clientFilter', dataToRewrite, ['clientFilter:changeList', 'clientFilter:changeMap']);
	        }
	    }, {
	        key: 'showQuicklookOnListAndMap',
	        value: function showQuicklookOnListAndMap(e) {
	            var _this3 = this;

	            var fromMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


	            var application = this.getApplication();
	            var store = application.getStore();
	            var events = application.getServiceEvents();
	            var currentTab = store.getMetaItem('currentTab');

	            var gmxId = void 0;
	            if (!fromMap) {
	                var gmx_id = e.detail.gmx_id;

	                gmxId = gmx_id;
	            } else {
	                var activeIcon = store.getMetaItem('activeIcon');
	                if (activeIcon) {
	                    return;
	                }
	                var _id2 = e.gmx.id;

	                gmxId = _id2;
	            }

	            var currentContour = store.getData('contours', gmxId);
	            var visible = getProperty(currentContour, 'visible');
	            var showState = ['visible', 'loading'].indexOf(visible) !== -1 ? false : true;
	            var isChanged = isVisibleChanged(currentContour, showState);

	            if (!currentContour || visible === 'loading' || !isChanged) {
	                !currentContour && window.console.warn('contour with id =', id, ' not found.');
	                return;
	            }

	            visible = getChangedVisibleState(currentContour, showState);
	            currentContour = setProperty(currentContour, { visible: visible });

	            store.updateData('contours', {
	                id: gmxId,
	                content: currentContour
	            }, ['contours:showQuicklookList']);

	            fromMap && events.trigger('contours:scrollToRow', gmxId, currentTab);

	            this.toggleQuicklook(gmxId, showState).then(function () {
	                return events.trigger('contours:showQuicklookList', gmxId);
	            }).catch(function (e) {
	                return _this3._errorHandler(e);
	            });
	        }
	    }, {
	        key: 'showAllQuicklooksOnListAndMap',
	        value: function showAllQuicklooksOnListAndMap() {
	            var _this4 = this;

	            var application = this.getApplication();
	            var store = application.getStore();
	            var events = application.getServiceEvents();
	            var favoritesData = store.getFavorites();
	            var visibleState = favoritesData.some(function (item) {
	                return getProperty(item, 'visible') === 'hidden';
	            });

	            store.setMetaItem('updateResults', true);

	            var gmxIdList = [];
	            favoritesData.forEach(function (item) {
	                return gmxIdList.push(getProperty(item, 'gmx_id'));
	            });

	            gmxIdList.forEach(function (gmxId) {
	                var contour = store.getData('contours', gmxId);
	                if (!isVisibleChanged(contour, visibleState)) {
	                    return;
	                }
	                var visible = getChangedVisibleState(contour, visibleState);
	                contour = setProperty(contour, { visible: visible });
	                store.updateData('contours', { id: gmxId, content: contour }, ['contours:allQuicklooksList']);
	                _this4.toggleQuicklook(gmxId, visibleState).then(function () {
	                    return events.trigger('contours:allQuicklooksList', gmxId);
	                }).catch(function (e) {
	                    return _this4._errorHandler(e);
	                });
	            });
	        }
	    }, {
	        key: 'toggleQuicklook',
	        value: function toggleQuicklook(id, isVisible) {
	            var _this5 = this;

	            var removeQuicklook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


	            return new Promise(function (redrawItemResolve) {

	                var map = _this5.getMap();
	                var application = _this5.getApplication();
	                var serviceEvents = application.getServiceEvents();
	                var store = application.getStore();
	                var currentContour = store.getData('contours', id);
	                var _currentContour = currentContour,
	                    quicklook = _currentContour.quicklook;


	                if (isVisible) {

	                    if (!quicklook) {
	                        var _quicklook = _this5._createQuicklook(currentContour);

	                        _quicklook.addTo(map);

	                        currentContour = _extends({}, currentContour, { quicklook: _quicklook });
	                        store.updateData('contours', { id: id, content: currentContour });
	                    } else {
	                        var changedContour = setProperty(currentContour, { 'visible': 'visible' });
	                        currentContour = _extends({}, changedContour, { quicklook: quicklook });
	                        store.updateData('contours', { id: id, content: currentContour }, ['contours:bringToTop']);

	                        quicklook.addTo(map);

	                        redrawItemResolve();
	                    }
	                } else {
	                    if (quicklook) {
	                        map.removeLayer(quicklook);
	                        if (removeQuicklook) {
	                            currentContour.quicklook = null;
	                        }
	                        store.updateData('contours', { id: id, content: currentContour });
	                    }

	                    serviceEvents.trigger('contours:bringToBottom', id);
	                    redrawItemResolve();
	                }
	            });
	        }
	    }, {
	        key: '_createQuicklook',
	        value: function _createQuicklook(contourData) {

	            var contour = contourData;

	            var application = this.getApplication();
	            var map = application.getMap();
	            var store = application.getStore();

	            var gmxId = getProperty(contour, 'gmx_id');
	            var sceneIdValue = getProperty(contour, 'sceneid');
	            var sceneid = splitComplexId(sceneIdValue).id;
	            var platform = getProperty(contour, 'platform');
	            var url = QUICKLOOK.url,
	                width = QUICKLOOK.width,
	                height = QUICKLOOK.height;

	            var imageUrl = url + '?sceneid=' + sceneid + '&platform=' + platform + '&width=' + width + '&height=' + height;

	            var _map$getCenter = map.getCenter(),
	                lng = _map$getCenter.lng;

	            var clipCoordsValue = getProperty(contour, 'clip_coords');
	            var clipCoords = normalizeGeometry(clipCoordsValue, lng);

	            var _propertiesX1Slice = propertiesX1Slice(contour),
	                _propertiesX1Slice2 = slicedToArray(_propertiesX1Slice, 8),
	                x1 = _propertiesX1Slice2[0],
	                y1 = _propertiesX1Slice2[1],
	                x2 = _propertiesX1Slice2[2],
	                y2 = _propertiesX1Slice2[3],
	                x3 = _propertiesX1Slice2[4],
	                y3 = _propertiesX1Slice2[5],
	                x4 = _propertiesX1Slice2[6],
	                y4 = _propertiesX1Slice2[7];

	            var anchors = [[makeCloseTo(lng, x1), y1], [makeCloseTo(lng, x2), y2], [makeCloseTo(lng, x3), y3], [makeCloseTo(lng, x4), y4]];

	            var quicklook = L.imageTransform(imageUrl, flatten(anchors, true), {
	                clip: clipCoords,
	                disableSetClip: true,
	                pane: 'tilePane'
	            });

	            quicklook.on('load', function () {
	                contour = setProperty(contour, { visible: 'visible' });
	                store.updateData('contours', {
	                    id: gmxId,
	                    content: _extends({}, contour, { quicklook: quicklook })
	                }, ['contours:bringToTop', 'contours:showQuicklookList']);
	            });

	            quicklook.on('error', function () {
	                contour = setProperty(contour, { visible: 'failed' });
	                map.removeLayer(quicklook);
	                if (contour) {
	                    contour = _extends({}, contour, { quicklook: null });
	                    store.updateData('contours', {
	                        id: gmxId, content: contour
	                    }, ['contours:showQuicklookList']);
	                }
	            });

	            return quicklook;
	        }
	    }, {
	        key: '_errorHandler',
	        value: function _errorHandler(e) {

	            window.console.error(e);
	        }
	    }]);
	    return ContourBridgeController;
	}(BaseBridgeController);

	var BaseMapManager = function () {
	    function BaseMapManager(config) {
	        classCallCheck(this, BaseMapManager);
	        var map = config.map,
	            application = config.application,
	            store = config.store;


	        this._map = map;
	        this._application = application;
	        this._store = store;
	    }

	    createClass(BaseMapManager, [{
	        key: "getStore",
	        value: function getStore() {

	            return this._store;
	        }
	    }, {
	        key: "getApplication",
	        value: function getApplication() {

	            return this._application;
	        }
	    }]);
	    return BaseMapManager;
	}();

	var DrawingsMapManager = function (_BaseMapManager) {
	        inherits(DrawingsMapManager, _BaseMapManager);

	        function DrawingsMapManager(props) {
	                classCallCheck(this, DrawingsMapManager);

	                var _this = possibleConstructorReturn(this, (DrawingsMapManager.__proto__ || Object.getPrototypeOf(DrawingsMapManager)).call(this, props));

	                _this._bindEvents();
	                return _this;
	        }

	        createClass(DrawingsMapManager, [{
	                key: '_bindEvents',
	                value: function _bindEvents() {
	                        var gmxDrawing = this._map.gmxDrawing;

	                        var application = this.getApplication();

	                        var DrawingController = application.getBridgeController('drawing');

	                        gmxDrawing.on('drawstop', function (rawItem) {
	                                return DrawingController.addDrawingOnList(rawItem);
	                        });
	                        gmxDrawing.on('editstop', function (rawItem) {
	                                return DrawingController.editDrawingOnList(rawItem);
	                        });
	                        gmxDrawing.on('dragend', function (rawItem) {
	                                return DrawingController.editDrawingOnList(rawItem);
	                        });
	                }
	        }]);
	        return DrawingsMapManager;
	}(BaseMapManager);

	var Colors = {
	    Default: 0x23a5cc,
	    Hilite: 0x23a5cc,
	    Cart: 0xef4e70,
	    CartHilite: 0xef4e70
	};

	var DrawingsMapManager$1 = function (_BaseMapManager) {
	    inherits(DrawingsMapManager, _BaseMapManager);

	    function DrawingsMapManager(props) {
	        classCallCheck(this, DrawingsMapManager);

	        var _this = possibleConstructorReturn(this, (DrawingsMapManager.__proto__ || Object.getPrototypeOf(DrawingsMapManager)).call(this, props));

	        _this._initVectorLayer();

	        _this._bindEvents();
	        return _this;
	    }

	    createClass(DrawingsMapManager, [{
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var events = application.getServiceEvents();
	            var store = application.getStore();
	            var layer = this._vectorLayer;
	            var ContoursController = application.getBridgeController('contour');

	            events.on('contours:zoomMap', this._zoomToContourOnMap.bind(this));
	            events.on('contours:bringToTop', function (id) {
	                return _this2._vectorLayer.bringToTopItem(id);
	            });
	            events.on('contours:bringToBottom', function (id) {
	                return _this2._vectorLayer.bringToBottomItem(id);
	            });

	            layer.on('click', function (e) {
	                var fromMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	                return ContoursController.showQuicklookOnListAndMap(e, fromMap);
	            });
	            layer.on('mouseover', function (e) {
	                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	                return ContoursController.hoverContour(e, state);
	            });
	            layer.on('mouseout', function (e) {
	                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	                return ContoursController.hoverContour(e, state);
	            });

	            store.on('currentTab:changeMap', this._redrawContours.bind(this));
	            store.on('currentTab:changeMap', this._toggleQuicklooks.bind(this));
	            store.on('contours:researchedMap', this._addContoursOnMap.bind(this));
	            store.on('contours:researchedMap', this._zoomToContoursOnMap.bind(this));
	            store.on('contours:startResearchedMap', this._addContoursOnMap.bind(this));
	            store.on('contours:startResearchedMap', this._zoomToContoursOnMap.bind(this));
	            store.on('contours:addToCartMap', this._redrawContour.bind(this));
	            store.on('contours:addAllToCartMap', this._redrawContours.bind(this));
	            store.on('contours:setHoveredMap', this._redrawContour.bind(this));
	            store.on('contours:setSelectedMap', this._redrawContour.bind(this));
	            store.on('contours:setAllSelectedMap', this._redrawContours.bind(this));
	            store.on('contours:removeSelectedFavoritesMap', this._redrawContours.bind(this));
	            store.on('contours:addVisibleToFavoritesMap', this._redrawContours.bind(this));
	            store.on('contours:bringToTop', function (id) {
	                return _this2._vectorLayer.bringToTopItem(id);
	            });
	            store.on('contours:bringToBottom', function (id) {
	                return _this2._vectorLayer.bringToBottomItem(id);
	            });
	            store.on('clientFilter:changeMap', this._redrawContours.bind(this));
	            store.on('clientFilter:changeMap', this._toggleQuicklooks.bind(this));
	        }
	    }, {
	        key: '_addContoursOnMap',
	        value: function _addContoursOnMap() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var contours = store.getSerializedData('contours');
	            var items = contours.map(function (_ref) {
	                var properties = _ref.properties;
	                return properties;
	            });

	            this._vectorLayer.removeData();
	            this._vectorLayer.addData(items);
	        }
	    }, {
	        key: '_zoomToContourOnMap',
	        value: function _zoomToContourOnMap(gmxId) {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var item = store.getData('contours', gmxId);
	            var properties = item.properties;


	            var bounds = getBounds([properties]);
	            this._map.fitBounds(bounds, { animate: false });
	        }
	    }, {
	        key: '_zoomToContoursOnMap',
	        value: function _zoomToContoursOnMap() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = store.getMetaItem('currentTab');

	            var contours = store[currentTab === 'search' || !currentTab ? 'getResults' : 'getFavorites']();
	            var contoursProperties = contours.map(function (_ref2) {
	                var properties = _ref2.properties;
	                return properties;
	            });

	            if (contoursProperties.length < 1) {
	                return;
	            }

	            var bounds = getBounds(contoursProperties);
	            if (bounds) {
	                this._map.fitBounds(bounds, { animate: false });
	            }
	        }
	    }, {
	        key: '_redrawContour',
	        value: function _redrawContour(gmxId) {

	            this._vectorLayer.redrawItem(gmxId);
	        }
	    }, {
	        key: '_redrawContours',
	        value: function _redrawContours() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = store.getMetaItem('currentTab');

	            if (!currentTab) {
	                return;
	            }

	            this._vectorLayer.repaint();
	        }
	    }, {
	        key: '_toggleQuicklooks',
	        value: function _toggleQuicklooks() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var contours = store.getSerializedData('contours');
	            var currentTab = store.getMetaItem('currentTab');
	            var contourController = application.getBridgeController('contour');

	            var _store$getData = store.getData('clientFilter'),
	                _store$getData$filter = _store$getData.filterData,
	                _store$getData$filter2 = _store$getData$filter.unChecked,
	                unChecked = _store$getData$filter2 === undefined ? [] : _store$getData$filter2,
	                _store$getData$filter3 = _store$getData$filter.clouds,
	                clouds = _store$getData$filter3 === undefined ? [0, 100] : _store$getData$filter3,
	                _store$getData$filter4 = _store$getData$filter.angle,
	                angle = _store$getData$filter4 === undefined ? [0, 80] : _store$getData$filter4,
	                _store$getData$filter5 = _store$getData$filter.date,
	                date = _store$getData$filter5 === undefined ? [0, 0] : _store$getData$filter5,
	                _store$getData$isChan = _store$getData.isChanged,
	                isChanged = _store$getData$isChan === undefined ? false : _store$getData$isChan;

	            if (!currentTab) {
	                return;
	            }

	            contours.forEach(function (item) {

	                var resultValue = getProperty(item, 'result');
	                var cartValue = getProperty(item, 'cart');
	                var visibleValue = getProperty(item, 'visible');
	                var indexValue = getProperty(item, 'gmx_id');

	                var isVisible = void 0;

	                if (currentTab === 'search') {
	                    isVisible = false;
	                }

	                if (currentTab === 'results') {
	                    var isInFilterCriteria = createFilterConditions(item, isChanged, unChecked, clouds, angle, date);

	                    isVisible = resultValue && visibleValue === 'visible' && (cartValue || isInFilterCriteria);
	                }

	                if (currentTab === 'favorites') {
	                    isVisible = cartValue && visibleValue === 'visible';
	                }

	                contourController.toggleQuicklook(indexValue, isVisible);
	            });
	        }
	    }, {
	        key: '_initVectorLayer',
	        value: function _initVectorLayer() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var tab_filter = function tab_filter(item) {
	                var _store$getData2 = store.getData('clientFilter'),
	                    _store$getData2$filte = _store$getData2.filterData,
	                    _store$getData2$filte2 = _store$getData2$filte.unChecked,
	                    unChecked = _store$getData2$filte2 === undefined ? [] : _store$getData2$filte2,
	                    _store$getData2$filte3 = _store$getData2$filte.clouds,
	                    clouds = _store$getData2$filte3 === undefined ? [0, 100] : _store$getData2$filte3,
	                    _store$getData2$filte4 = _store$getData2$filte.angle,
	                    angle = _store$getData2$filte4 === undefined ? [0, 80] : _store$getData2$filte4,
	                    _store$getData2$filte5 = _store$getData2$filte.date,
	                    date = _store$getData2$filte5 === undefined ? [0, 0] : _store$getData2$filte5,
	                    _store$getData2$isCha = _store$getData2.isChanged,
	                    isChanged = _store$getData2$isCha === undefined ? false : _store$getData2$isCha;

	                var currentTab = store.getMetaItem('currentTab');

	                var resultValue = getProperty(item, 'result');
	                var cartValue = getProperty(item, 'cart');

	                switch (currentTab) {
	                    case 'results':
	                        var isInFilterCriteria = createFilterConditions(item, isChanged, unChecked, clouds, angle, date);
	                        return resultValue && (cartValue || isInFilterCriteria);
	                    case 'favorites':
	                        return cartValue;
	                    case 'search':
	                        return false;
	                    default:
	                        return true;
	                }
	            };

	            this._vectorLayer = L.gmx.createLayer({
	                geometry: null,
	                properties: {
	                    type: 'Vector',
	                    visible: true,
	                    identityField: 'gmx_id',
	                    GeometryType: 'polygon',
	                    srs: 3857,
	                    attributes: CONTOUR_ITEM_ATTRIBUTES,
	                    attrTypes: CONTOUR_ITEM_ATTR_TYPES,
	                    styles: [{
	                        MinZoom: 3,
	                        MaxZoom: 17,
	                        DisableBalloonOnClick: true,
	                        DisableBalloonOnMouseMove: true,
	                        RenderStyle: {
	                            outline: { color: Colors.Default, thickness: 1 },
	                            fill: { color: 0xfff, opacity: 0 }
	                        },
	                        HoverStyle: {
	                            outline: { color: Colors.Default, thickness: 1 },
	                            fill: { color: 0xfff, opacity: 0 }
	                        }
	                    }]
	                }
	            });
	            this._vectorLayer.disableFlip();
	            this._vectorLayer.setFilter(tab_filter);
	            this._vectorLayer.setStyleHook(function (item) {
	                var currentTab = store.getMetaItem('currentTab');
	                var hoverValue = getProperty(item, 'hover');
	                var cartValue = getProperty(item, 'cart');
	                var lineWidth = 1;
	                var color = Colors.Default;

	                if (currentTab === 'results' && cartValue) {
	                    lineWidth = 3;
	                }
	                if (hoverValue) {
	                    color = cartValue ? Colors.CartHilite : Colors.Hilite;
	                    lineWidth = 5;
	                } else {
	                    color = cartValue ? Colors.Cart : Colors.Default;
	                }
	                return { skipRasters: true, strokeStyle: color, lineWidth: lineWidth };
	            });
	            this._vectorLayer.addTo(this._map);
	        }
	    }]);
	    return DrawingsMapManager;
	}(BaseMapManager);

	var chain = function chain(tasks, state) {
	    return tasks.reduce(function (prev, next) {
	        return prev.then(next);
	    }, new Promise(function (resolve, reject) {
	        return resolve(state);
	    }));
	};

	var SHAPE_LOADER_URL = '//maps.kosmosnimki.ru/ShapeLoader';
	var META_DATA_URL = 'GetMetadata.ashx';
	var FILE_MAKE_URL = 'VectorFileMaker';
	var FILE_DOWNLOADER_URL = 'DownloadFile';
	var CSV_FILE_URL = 'CreateCsv.ashx';

	var PLEIADES = [{ 'Name': 'datastrip', 'Type': 'String' }, { 'Name': 'orb', 'Type': 'Float' }, { 'Name': 'satel', 'Type': 'String' }, { 'Name': 'dataq_star', 'Type': 'Date' }, { 'Name': 'dataq_end', 'Type': 'Date' }, { 'Name': 'sensor', 'Type': 'String' }, { 'Name': 'cloud_per', 'Type': 'Float' }, { 'Name': 'snow_per', 'Type': 'Float' }, { 'Name': 'incid_ang', 'Type': 'Float' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'orient_ang', 'Type': 'Float' }, { 'Name': 'across_ang', 'Type': 'Float' }, { 'Name': 'along_ang', 'Type': 'Float' }, { 'Name': 'combin_ang', 'Type': 'Float' }, { 'Name': 'roll_ang', 'Type': 'Float' }, { 'Name': 'pitch_ang', 'Type': 'Float' }, { 'Name': 'url_ql', 'Type': 'String' },
	// {'Name':'url','Type':'String'},  
	{ 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var PLEIADES_L = [{ 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'ds_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'sensor_mod', 'Type': 'String' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'pack_id', 'Type': 'String' }, { 'Name': 'del_id', 'Type': 'String' }, { 'Name': 'com_id', 'Type': 'String' }, { 'Name': 'qlurl', 'Type': 'String' }];

	var DG_products = [{ 'Name': 'catalogid', 'Type': 'String' }, { 'Name': 'acqdate', 'Type': 'Date' }, { 'Name': 'mnoffnadir', 'Type': 'Float' }, { 'Name': 'mxoffnadir', 'Type': 'Float' }, { 'Name': 'avoffnadir', 'Type': 'Float' }, { 'Name': 'mnsunazim', 'Type': 'Float' }, { 'Name': 'mxsunazim', 'Type': 'Float' }, { 'Name': 'avsunazim', 'Type': 'Float' }, { 'Name': 'mnsunelev', 'Type': 'Float' }, { 'Name': 'mxsunelev', 'Type': 'Float' }, { 'Name': 'avsunelev', 'Type': 'Float' }, { 'Name': 'mntargetaz', 'Type': 'Float' }, { 'Name': 'mxtargetaz', 'Type': 'Float' }, { 'Name': 'avtargetaz', 'Type': 'Float' }, { 'Name': 'mnpanres', 'Type': 'Float' }, { 'Name': 'mxpanres', 'Type': 'Float' }, { 'Name': 'avpanres', 'Type': 'Float' }, { 'Name': 'mnmultires', 'Type': 'Float' }, { 'Name': 'mxmultires', 'Type': 'Float' }, { 'Name': 'avmultires', 'Type': 'Float' }, { 'Name': 'stereopair', 'Type': 'String' }, { 'Name': 'browseurl', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Float' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'imagebands', 'Type': 'String' },
	// {'Name':'url','Type':'String'},    
	{ 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var DG_products_L = [{ 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'part_id', 'Type': 'String' }, { 'Name': 'cat_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'cloudsp', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'volume_lab', 'Type': 'String' }, { 'Name': 'cust_order', 'Type': 'String' }, { 'Name': 'area_desc', 'Type': 'String' }, { 'Name': 'meta_ts', 'Type': 'String' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var RAPIDEYE = [{ 'Name': 'scid', 'Type': 'String' }, { 'Name': 'sunaz', 'Type': 'Float' }, { 'Name': 'blkfill', 'Type': 'Float' }, { 'Name': 'catid', 'Type': 'Integer' }, { 'Name': 'area', 'Type': 'Float' }, { 'Name': 'cc', 'Type': 'Integer' }, { 'Name': 'acqtime', 'Type': 'Date' }, { 'Name': 'ullat', 'Type': 'Float' }, { 'Name': 'udp', 'Type': 'Integer' }, { 'Name': 'azang', 'Type': 'Float' }, { 'Name': 'tileid', 'Type': 'Float' }, { 'Name': 'sunel', 'Type': 'Float' }, { 'Name': 'ullon', 'Type': 'Float' }, { 'Name': 'imgurl', 'Type': 'String' }, { 'Name': 'vwangle', 'Type': 'Float' },
	// {'Name':'url','Type':'String'},
	{ 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var KOMPSAT$1 = [{ 'Name': 'productid', 'Type': 'String' }, { 'Name': 'platfSNm', 'Type': 'String' }, { 'Name': 'platfSer', 'Type': 'String' }, { 'Name': 'orbit', 'Type': 'Integer' }, { 'Name': 'orbitDir', 'Type': 'Integer' }, { 'Name': 'frame', 'Type': 'Integer' }, { 'Name': 'track', 'Type': 'Integer' }, { 'Name': 'resTitle', 'Type': 'String' }, { 'Name': 'begin', 'Type': 'Date' }, { 'Name': 'end', 'Type': 'Date' }, { 'Name': 'cloudCovePerc', 'Type': 'Integer' }, { 'Name': 'bgFileName', 'Type': 'String' }, { 'Name': 'offNadirAngle', 'Type': 'Float' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var EROS$1 = [{ 'Name': 'id', 'Type': 'Integer' }, { 'Name': 'row', 'Type': 'Integer' }, { 'Name': 'nbound', 'Type': 'Float' }, { 'Name': 'sbound', 'Type': 'Float' }, { 'Name': 'wbound', 'Type': 'Float' }, { 'Name': 'ebound', 'Type': 'Float' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'sceneid', 'Type': 'String' }, { 'Name': 'acdate', 'Type': 'Date' }, { 'Name': 'filename', 'Type': 'String' }, { 'Name': 'volume', 'Type': 'String' }, { 'Name': 'cld', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var GF_ZY = [{ 'Name': 'productid', 'Type': 'String' }, { 'Name': 'jh', 'Type': 'String' }, { 'Name': 'satellitei', 'Type': 'String' }, { 'Name': 'datatype', 'Type': 'String' }, { 'Name': 'sx', 'Type': 'Date' }, { 'Name': 'scenepath', 'Type': 'String' }, { 'Name': 'scenerow', 'Type': 'String' }, { 'Name': 'rasterfile', 'Type': 'String' }, { 'Name': 'pc', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var LANDSAT_8 = [{ 'Name': 'browseavailable', 'Type': 'String' }, { 'Name': 'browseurl', 'Type': 'String' }, { 'Name': 'sceneid', 'Type': 'String' }, { 'Name': 'sensor', 'Type': 'String' }, { 'Name': 'acquisitiondate', 'Type': 'Date' }, { 'Name': 'dateupdated', 'Type': 'Date' }, { 'Name': 'path', 'Type': 'Integer' }, { 'Name': 'row', 'Type': 'Integer' }, { 'Name': 'upperleftcornerlatitude', 'Type': 'Float' }, { 'Name': 'upperleftcornerlongitude', 'Type': 'Float' }, { 'Name': 'upperrightcornerlatitude', 'Type': 'Float' }, { 'Name': 'upperrightcornerlongitude', 'Type': 'Float' }, { 'Name': 'lowerleftcornerlatitude', 'Type': 'Float' }, { 'Name': 'lowerleftcornerlongitude', 'Type': 'Float' }, { 'Name': 'lowerrightcornerlatitude', 'Type': 'Float' }, { 'Name': 'lowerrightcornerlongitude', 'Type': 'Float' }, { 'Name': 'scenecenterlatitude', 'Type': 'Float' }, { 'Name': 'scenecenterlongitude', 'Type': 'Float' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'cloudcoverfull', 'Type': 'Float' }, { 'Name': 'dayornight', 'Type': 'String' }, { 'Name': 'sunelevation', 'Type': 'Float' }, { 'Name': 'sunazimuth', 'Type': 'Float' }, { 'Name': 'receivingstation', 'Type': 'String' }, { 'Name': 'scenestarttime', 'Type': 'String' }, { 'Name': 'scenestoptime', 'Type': 'String' }, { 'Name': 'imagequality1', 'Type': 'Integer' }, { 'Name': 'data_type_l1', 'Type': 'String' }, { 'Name': 'carturl', 'Type': 'String' }, { 'Name': 'geometric_rmse_model_x', 'Type': 'Integer' }, { 'Name': 'geometric_rmse_model_y', 'Type': 'Integer' }, { 'Name': 'full_partial_scene', 'Type': 'String' }, { 'Name': 'nadir_offnadir', 'Type': 'String' }, { 'Name': 'processing_software_version', 'Type': 'String' }, { 'Name': 'cpf_name', 'Type': 'String' }, { 'Name': 'rlut_file_name', 'Type': 'String' }, { 'Name': 'bpf_name_oli', 'Type': 'String' }, { 'Name': 'bpf_name_tirs', 'Type': 'String' }, { 'Name': 'id', 'Type': 'Integer' }, { 'Name': 'landsat_product_id', 'Type': 'String' },
	// {'Name':'url','Type':'String'},
	{ 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var IKONOS = [{ 'Name': 'image_id', 'Type': 'String' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'source_abr', 'Type': 'String' }, { 'Name': 'source', 'Type': 'String' }, { 'Name': 'sens_mode', 'Type': 'String' }, { 'Name': 'strip_id', 'Type': 'String' }, { 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'coll_date', 'Type': 'String' }, { 'Name': 'month', 'Type': 'Integer' }, { 'Name': 'year', 'Type': 'Integer' }, { 'Name': 'gsd', 'Type': 'Float' }, { 'Name': 'sqkm', 'Type': 'Integer' }, { 'Name': 'spatialref', 'Type': 'String' }, { 'Name': 'ranking', 'Type': 'Integer' }, { 'Name': 'elev_angle', 'Type': 'Float' }, { 'Name': 'azim_angle', 'Type': 'Float' }, { 'Name': 'clouds', 'Type': 'Integer' }, { 'Name': 'sun_elev', 'Type': 'Float' }, { 'Name': 'sun_angle', 'Type': 'Float' }, { 'Name': 'stereo_id', 'Type': 'String' }, { 'Name': 'data_owner', 'Type': 'String' }, { 'Name': 'ul_lat', 'Type': 'Float' }, { 'Name': 'ul_lon', 'Type': 'Float' }, { 'Name': 'ur_lat', 'Type': 'Float' }, { 'Name': 'ur_lon', 'Type': 'Float' }, { 'Name': 'll_lat', 'Type': 'Float' }, { 'Name': 'll_lon', 'Type': 'Float' }, { 'Name': 'lr_lat', 'Type': 'Float' }, { 'Name': 'lr_lon', 'Type': 'Float' }, { 'Name': 'georectify', 'Type': 'Integer' }, { 'Name': 'image_url', 'Type': 'String' }, { 'Name': 'world_url', 'Type': 'String' }, { 'Name': 'metadata', 'Type': 'String' }, { 'Name': 'product', 'Type': 'String' },
	// {'Name':'url','Type':'String'},
	{ 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var WV1 = [{ 'Name': 'catalogid', 'Type': 'String' }, { 'Name': 'acqdate', 'Type': 'Date' }, { 'Name': 'mnoffnadir', 'Type': 'Integer' }, { 'Name': 'mxoffnadir', 'Type': 'Integer' }, { 'Name': 'avoffnadir', 'Type': 'Integer' }, { 'Name': 'mnsunazim', 'Type': 'Float' }, { 'Name': 'mxsunazim', 'Type': 'Float' }, { 'Name': 'avsunazim', 'Type': 'Float' }, { 'Name': 'mnsunelev', 'Type': 'Float' }, { 'Name': 'mxsunelev', 'Type': 'Float' }, { 'Name': 'avsunelev', 'Type': 'Float' }, { 'Name': 'mntargetaz', 'Type': 'Float' }, { 'Name': 'mxtargetaz', 'Type': 'Float' }, { 'Name': 'avtargetaz', 'Type': 'Float' }, { 'Name': 'mnpanres', 'Type': 'Integer' }, { 'Name': 'mxpanres', 'Type': 'Integer' }, { 'Name': 'avpanres', 'Type': 'Integer' }, { 'Name': 'mnmultires', 'Type': 'Integer' }, { 'Name': 'mxmultires', 'Type': 'Integer' }, { 'Name': 'avmultires', 'Type': 'Integer' }, { 'Name': 'stereopair', 'Type': 'String' }, { 'Name': 'browseurl', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'platform', 'Type': 'String' },
	// {'Name':'url','Type':'String'},    
	{ 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'imagebands', 'Type': 'String' }];

	var BKA = [{ 'Name': 'id', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'typeinformation', 'Type': 'String' }, { 'Name': 'lastupdatedate', 'Type': 'Date' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'cyclenumber', 'Type': 'String' }, { 'Name': 'acquisitiontime', 'Type': 'Date' }, { 'Name': 'sensortype', 'Type': 'String' }, { 'Name': 'sensorresolution', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'viewingangle', 'Type': 'Float' }, { 'Name': 'sunelevation', 'Type': 'Float' }, { 'Name': 'sunazimuth', 'Type': 'Float' }];

	var SPOT5 = [{ 'Name': 'a21', 'Type': 'String' }, { 'Name': 'sc_num', 'Type': 'Integer' }, { 'Name': 'seg_num', 'Type': 'Integer' }, { 'Name': 'satel', 'Type': 'Integer' }, { 'Name': 'ang_inc', 'Type': 'Float' }, { 'Name': 'ang_acq', 'Type': 'Integer' }, { 'Name': 'date_acq', 'Type': 'String' }, { 'Name': 'month_acq', 'Type': 'String' }, { 'Name': 'cloud_quot', 'Type': 'String' }, { 'Name': 'cloud_per', 'Type': 'Integer' }, { 'Name': 'snow_quot', 'Type': 'String' }, { 'Name': 'lat_cen', 'Type': 'Float' }, { 'Name': 'lon_cen', 'Type': 'Float' }, { 'Name': 'lat_up_l', 'Type': 'Float' }, { 'Name': 'lon_up_l', 'Type': 'Float' }, { 'Name': 'lat_up_r', 'Type': 'Float' }, { 'Name': 'lon_up_r', 'Type': 'Float' }, { 'Name': 'lat_lo_l', 'Type': 'Float' }, { 'Name': 'lon_lo_l', 'Type': 'Float' }, { 'Name': 'lat_lo_r', 'Type': 'Float' }, { 'Name': 'lon_lo_r', 'Type': 'Float' }, { 'Name': 'resol', 'Type': 'Integer' }, { 'Name': 'mode', 'Type': 'String' }, { 'Name': 'type', 'Type': 'String' }, { 'Name': 'url_ql', 'Type': 'String' },
	// {'Name':'url','Type':'String'},
	{ 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

	var Formats = {
	    KOMPSAT: KOMPSAT$1,
	    DG_products: DG_products,
	    DG_products_L: DG_products_L,
	    PLEIADES: PLEIADES,
	    PLEIADES_L: PLEIADES_L,
	    RAPIDEYE: RAPIDEYE,
	    EROS: EROS$1,
	    GF_ZY: GF_ZY,
	    LANDSAT_8: LANDSAT_8,
	    IKONOS: IKONOS,
	    BKA: BKA,
	    WV1: WV1,
	    SPOT5: SPOT5,
	    'SPOT-6_7': [{ 'Name': 'datastrip', 'Type': 'String' }, { 'Name': 'orb', 'Type': 'Float' }, { 'Name': 'satel', 'Type': 'String' }, { 'Name': 'dataq_star', 'Type': 'Date' }, { 'Name': 'dataq_end', 'Type': 'Date' }, { 'Name': 'sensor', 'Type': 'String' }, { 'Name': 'cloud_per', 'Type': 'Float' }, { 'Name': 'snow_per', 'Type': 'Float' }, { 'Name': 'incid_ang', 'Type': 'Float' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'orient_ang', 'Type': 'Float' }, { 'Name': 'across_ang', 'Type': 'Float' }, { 'Name': 'along_ang', 'Type': 'Float' }, { 'Name': 'combin_ang', 'Type': 'Float' }, { 'Name': 'roll_ang', 'Type': 'Float' }, { 'Name': 'pitch_ang', 'Type': 'Float' }, { 'Name': 'sc_nb', 'Type': 'Float' }, { 'Name': 'url_ql', 'Type': 'String' },
	    // {'Name':'url','Type':'String'},
	    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
	    'SPOT-6_7_L': [{ 'Name': 'id', 'Type': 'Integer' }, { 'Name': 'row', 'Type': 'Integer' }, { 'Name': 'nbound', 'Type': 'Float' }, { 'Name': 'sbound', 'Type': 'Float' }, { 'Name': 'wbound', 'Type': 'Float' }, { 'Name': 'ebound', 'Type': 'Float' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'sceneid', 'Type': 'String' }, { 'Name': 'acdate', 'Type': 'String' }, { 'Name': 'filename', 'Type': 'String' }, { 'Name': 'volume', 'Type': 'String' }, { 'Name': 'cld', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
	    ONE_ATLAS: [{ 'Name': 'num_points', 'Type': 'String' }, { 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'ds_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'sensor_mod', 'Type': 'String' }, { 'Name': 'cloudsp', 'Type': 'String' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'azimuth', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'pack_id', 'Type': 'String' }, { 'Name': 'qlurl', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'shp_ts', 'Type': 'Date' }],
	    "SPOT-6_7_products": [{ 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'ds_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'sensor_mod', 'Type': 'String' }, { 'Name': 'cloudsp', 'Type': 'Integer' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'pack_id', 'Type': 'String' }, { 'Name': 'del_id', 'Type': 'String' }, { 'Name': 'com_id', 'Type': 'String' }, { 'Name': 'qlurl', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
	    TRIPLESAT: [{ 'Name': 'id', 'Type': 'String' }, { 'Name': 'transform', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'thumbimg', 'Type': 'String' }, { 'Name': 'rollangle', 'Type': 'Float' }, { 'Name': 'cloudcover', 'Type': 'Float' }, { 'Name': 'wkt', 'Type': 'String' }, { 'Name': 'browserimg', 'Type': 'String' }, { 'Name': 'resolution', 'Type': 'Float' }, { 'Name': 'centertime', 'Type': 'Date' }],
	    'Resurs-P': [{ 'Name': 'abstract', 'Type': 'String' }, { 'Name': 'access_open', 'Type': 'Boolean' }, { 'Name': 'access_order', 'Type': 'Boolean' }, { 'Name': 'circuit_number', 'Type': 'Integer' }, { 'Name': 'cloudiness', 'Type': 'Integer' }, { 'Name': 'date_begin', 'Type': 'Date' }, { 'Name': 'date_end', 'Type': 'Date' }, { 'Name': 'date_instant', 'Type': 'Date' }, { 'Name': 'file_identifier', 'Type': 'String' }, { 'Name': 'last_modified', 'Type': 'Date' }, { 'Name': 'metadata_full', 'Type': 'String' }, { 'Name': 'metadata_id', 'Type': 'Integer' }, { 'Name': 'metadata_xml', 'Type': 'String' }, { 'Name': 'order_url', 'Type': 'String' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'platform_id', 'Type': 'Integer' }, { 'Name': 'polygon', 'Type': 'String' }, { 'Name': 'resolution', 'Type': 'Float' }, { 'Name': 'row_count', 'Type': 'Integer' }, { 'Name': 'row_number', 'Type': 'Integer' }, { 'Name': 'scan_number', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
	    SV1: [{ 'Name': 'mirroroffnadir', 'Type': 'Float' }, { 'Name': 'productlevel', 'Type': 'String' }, { 'Name': 'cloudpercent', 'Type': 'Float' }, { 'Name': 'satelliteid', 'Type': 'String' }, { 'Name': 'bottomrightlatitude', 'Type': 'Float' }, { 'Name': 'orbitid', 'Type': 'Integer' }, { 'Name': 'stripid', 'Type': 'Integer' }, { 'Name': 'sceneid', 'Type': 'Integer' }, { 'Name': 'thumbfilelocation', 'Type': 'String' }, { 'Name': 'centerlongitude', 'Type': 'Float' }, { 'Name': 'toprightlongitude', 'Type': 'Float' }, { 'Name': 'centerlatitude', 'Type': 'Float' }, { 'Name': 'topleftlongitude', 'Type': 'Float' }, { 'Name': 'topleftlatitude', 'Type': 'Float' }, { 'Name': 'toprightlatitude', 'Type': 'Float' }, { 'Name': 'bottomleftlongitude', 'Type': 'Float' }, { 'Name': 'isrelease', 'Type': 'Boolean' }, { 'Name': 'bottomleftlatitude', 'Type': 'Float' }, { 'Name': 'instrumentmodedss', 'Type': 'Float' }, { 'Name': 'browsefilelocation', 'Type': 'String' }, { 'Name': 'scenedate', 'Type': 'Date' }, { 'Name': 'bottomrightlongitude', 'Type': 'Float' }]
	};

	var ShapeLoader = function () {
	    function ShapeLoader(config) {
	        classCallCheck(this, ShapeLoader);
	        var name = config.name,
	            application = config.application,
	            _config$shapeLoaderUr = config.shapeLoaderUrl,
	            shapeLoaderUrl = _config$shapeLoaderUr === undefined ? SHAPE_LOADER_URL : _config$shapeLoaderUr,
	            _config$metadataUrl = config.metadataUrl,
	            metadataUrl = _config$metadataUrl === undefined ? META_DATA_URL : _config$metadataUrl,
	            _config$fileMakerUrl = config.fileMakerUrl,
	            fileMakerUrl = _config$fileMakerUrl === undefined ? FILE_MAKE_URL : _config$fileMakerUrl,
	            _config$fileDownloade = config.fileDownloaderUrl,
	            fileDownloaderUrl = _config$fileDownloade === undefined ? FILE_DOWNLOADER_URL : _config$fileDownloade,
	            _config$csvFileUrl = config.csvFileUrl,
	            csvFileUrl = _config$csvFileUrl === undefined ? CSV_FILE_URL : _config$csvFileUrl;


	        this._name = name;
	        this._application = application;

	        this._csvColumns = ['sceneid', 'stereo', 'platform', 'cloudness', 'tilt', 'acqdate'];

	        this._idLoaderUrl = location.href.substr(0, location.href.lastIndexOf('/')) + '/SearchByID.ashx';
	        this._shapeLoaderUrl = shapeLoaderUrl;
	        this._fileMakerUrl = fileMakerUrl;
	        this._fileDownloaderUrl = fileDownloaderUrl;
	        this._metadataUrl = metadataUrl;
	        this._csvFileUrl = csvFileUrl;

	        this._fileInput = null;
	    }

	    createClass(ShapeLoader, [{
	        key: 'upload',
	        value: function upload() {
	            var _this = this;

	            return new Promise(function (resolve, reject) {

	                var fileInput = document.createElement('input');

	                fileInput.setAttribute('type', 'file');

	                document.body.appendChild(fileInput);

	                _this._fileInput = fileInput;

	                fileInput.click();

	                fileInput.addEventListener('change', function () {
	                    return _this._inputChangeHandler(resolve, reject);
	                });
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download(archiveName, type) {
	            var _this2 = this;

	            var application = this.getApplication();

	            application.showLoader(true);

	            var getMetaData = function getMetaData(state) {
	                return _this2._getMetaData(state, type);
	            };
	            var createFile = function createFile(state) {
	                return _this2._createFile(state, archiveName, type);
	            };
	            var downloadFile = function downloadFile(state) {
	                return _this2._downloadFile(state, archiveName, type);
	            };

	            return chain([getMetaData, createFile, downloadFile], {}).then(function (state) {
	                if (state.error) {
	                    console.log(state.error);
	                }
	            });
	        }
	    }, {
	        key: 'getApplication',
	        value: function getApplication() {

	            return this._application;
	        }
	    }, {
	        key: '_getMetaData',
	        value: function _getMetaData(state, type) {
	            var _this3 = this;

	            return new Promise(function (resolve) {

	                var csv = function csv(item) {
	                    return _this3._csvColumns.map(function (col) {
	                        return col === 'acqdate' ? moment(item[col]).format('YYYY-MM-DD') : item[col];
	                    });
	                };

	                var application = _this3.getApplication();
	                var requestManager = application.getRequestManager();
	                var store = application.getStore();
	                var downloadCache = store.getData('downloadCache') || [];
	                var idsList = [];
	                var itemsList = [];

	                switch (type) {

	                    case 'results':
	                        if (downloadCache && downloadCache.length > 0) {
	                            idsList = downloadCache.map(function (item) {
	                                return item.sceneid + ';' + item.platform + ';' + item.islocal;
	                            });
	                        } else {
	                            var resultsList = store.getResults(true);
	                            idsList = resultsList.map(function (item) {
	                                return item.sceneid + ';' + item.platform + ';' + item.islocal;
	                            });
	                        }
	                        break;

	                    case 'rcsv':
	                        if (downloadCache && downloadCache.length > 0) {
	                            itemsList = downloadCache.map(csv);
	                        } else {
	                            var _resultsList = store.getResults(true);
	                            itemsList = _resultsList.map(csv);
	                        }
	                        break;

	                    case 'cart':
	                    case 'quicklooks':
	                        if (downloadCache && downloadCache.length > 0) {
	                            idsList = downloadCache.map(function (item) {
	                                return item.sceneid + ';' + item.platform + ';' + item.islocal;
	                            });
	                        } else {
	                            var favoritesList = store.getFavorites(true);
	                            idsList = favoritesList.map(function (item) {
	                                return item.sceneid + ';' + item.platform + ';' + item.islocal;
	                            });
	                        }
	                        break;

	                    case 'ccsv':
	                        if (downloadCache && downloadCache.length > 0) {
	                            itemsList = downloadCache.map(csv);
	                        } else {
	                            var _favoritesList = store.getFavorites(true);
	                            itemsList = _favoritesList.map(csv);
	                        }
	                        break;

	                    default:
	                        break;

	                }

	                if (type === 'rcsv' || type === 'ccsv') {
	                    state.items = JSON.stringify(itemsList);
	                    resolve(state);
	                } else {
	                    if (idsList.length > 0) {
	                        requestManager.requestGetShapeMetadata(_this3._metadataUrl, { ids: idsList, WrapStyle: 'None' }).then(function (response) {
	                            if (response.Status === 'ok') {
	                                state.result = response.Result;
	                                resolve(state);
	                            } else {
	                                state.error = response;
	                                resolve(state);
	                            }
	                        }).catch(function (e) {
	                            state.error = e;
	                            resolve(state);
	                        });
	                    } else {
	                        resolve(state);
	                    }
	                }
	            });
	        }
	    }, {
	        key: '_createFile',
	        value: function _createFile(state, archiveName, type) {
	            var _this4 = this;

	            return new Promise(function (resolve) {

	                var application = _this4.getApplication();
	                var requestManager = application.getRequestManager();
	                var store = application.getStore();
	                var drawings = store.getDrawings();

	                if (type === 'rcsv' || type === 'ccsv') {
	                    resolve(state);
	                } else {

	                    var Features = drawings.filter(function (item) {
	                        return item.visible;
	                    }).map(function (_ref) {
	                        var id = _ref.id,
	                            name = _ref.name,
	                            area = _ref.area,
	                            visible = _ref.visible,
	                            editable = _ref.editable,
	                            color = _ref.color,
	                            geoJSON = _ref.geoJSON;

	                        return {
	                            type: 'Feature',
	                            geometry: geoJSON.geometry,
	                            properties: { id: id, name: name, area: area, visible: visible, editable: editable, color: color }
	                        };
	                    });

	                    var Files = Features.length ? [{
	                        Columns: [{ "Name": "id", "Type": "String" }, { "Name": "name", "Type": "String" }, { "Name": "area", "Type": "Float" }, { "Name": "editable", "Type": "Boolean" }, { "Name": "visible", "Type": "Boolean" }, { "Name": "color", "Type": "String" }],
	                        Features: Features,
	                        Filename: archiveName + '_contours',
	                        Formats: ['shape', 'tab']
	                    }] : [];

	                    switch (type) {

	                        case 'results':
	                        case 'cart':
	                        case 'quicklooks':
	                            var result = state.result;
	                            Files = Files.concat(Object.keys(result).map(function (file) {
	                                var Features = result[file].map(function (f) {
	                                    var properties = copy(f);
	                                    delete properties.geometry;
	                                    return {
	                                        type: 'Feature',
	                                        geometry: copy(f.geometry),
	                                        properties: properties
	                                    };
	                                });
	                                return {
	                                    Columns: Formats[file],
	                                    Filename: archiveName + '_' + file,
	                                    Features: Features,
	                                    Formats: ['shape', 'tab']
	                                };
	                            }));
	                            break;

	                        default:
	                            break;

	                    }

	                    var params = {
	                        Request: JSON.stringify({
	                            ArchiveName: archiveName,
	                            Files: Files,
	                            Images: type === 'quicklooks'
	                        })
	                    };

	                    requestManager.requestMakeFile(_this4._fileMakerUrl, params).then(function (response) {
	                        if (response.Status === 'ok') {
	                            state.id = response.Result;
	                            resolve(state);
	                        } else {
	                            resolve(state);
	                        }
	                    }).catch(function (e) {
	                        state.error = e;
	                        resolve(state);
	                    });
	                }
	            });
	        }
	    }, {
	        key: '_downloadFile',
	        value: function _downloadFile(state, archiveName, type) {
	            var _this5 = this;

	            var application = this.getApplication();

	            application.showLoader(false);

	            return new Promise(function (resolve) {

	                var requestManager = application.getRequestManager();

	                if (type === 'rcsv' || type === 'ccsv') {
	                    var items = state.items;

	                    var params = {
	                        items: items,
	                        file: encodeURIComponent(archiveName),
	                        columns: _this5._csvColumns, WrapStyle: 'None'
	                    };

	                    requestManager.requestDownloadCsvFile(_this5._csvFileUrl, params).then(function (response) {
	                        if (response.Status === 'ok') {
	                            state.result = response.Result;
	                            resolve(state);
	                        } else {
	                            state.error = response;
	                            resolve(state);
	                        }
	                    }).catch(function (e) {
	                        state.error = e;
	                        resolve(state);
	                    });
	                } else {

	                    var url = _this5._fileDownloaderUrl + '?id=' + state.id;

	                    requestManager.requestDownloadCommonFile(url).then(function (response) {
	                        if (response.Status === 'ok') {
	                            state.id = response.Result;
	                            resolve(state);
	                        } else {
	                            resolve(state);
	                        }
	                    }).catch(function (e) {
	                        state.error = e;
	                        resolve(state);
	                    });
	                }
	            });
	        }
	    }, {
	        key: '_inputChangeHandler',
	        value: function _inputChangeHandler(resolve, reject) {
	            var _this6 = this;

	            var application = this.getApplication();
	            var requestManager = application.getRequestManager();

	            application.showLoader(true);

	            var _fileInput$files = slicedToArray(this._fileInput.files, 1),
	                file = _fileInput$files[0];

	            if (file) {

	                var formData = new FormData();

	                formData.append('filename', file);
	                formData.append('WrapStyle', 'None');

	                requestManager.requestShapeLoader(this._shapeLoaderUrl, { method: 'POST', body: formData }).then(function (response) {
	                    _this6._removeFileInput();
	                    return response.json();
	                }).then(function (response) {
	                    var status = response.Status,
	                        result = response.Result;


	                    switch (status) {

	                        case 'ok':
	                            application.showLoader(false);
	                            resolve({
	                                type: 'shapefile',
	                                results: result
	                            });
	                            break;

	                        default:
	                            requestManager.requestIdLoader(_this6._idLoaderUrl, { method: 'POST', body: formData }).then(function (response) {
	                                application.showLoader(false);
	                                _this6._removeFileInput();
	                                return response.json();
	                            }).then(function (response) {
	                                var status = response.Status,
	                                    result = response.Result;


	                                if (status === 'ok') {
	                                    resolve({
	                                        type: 'idlist',
	                                        results: result
	                                    });
	                                } else {
	                                    reject(response);
	                                }
	                            }).catch(function (e) {
	                                application.showLoader(false);
	                                _this6._removeFileInput();
	                                reject(e);
	                            });
	                            break;
	                    }
	                }).catch(function (e) {

	                    application.showLoader(false);

	                    _this6._removeFileInput();

	                    reject(e);
	                });
	            }
	        }
	    }, {
	        key: '_removeFileInput',
	        value: function _removeFileInput() {

	            if (this._fileInput) {
	                this._fileInput.remove();
	            }
	            this._fileInput = null;
	        }
	    }]);
	    return ShapeLoader;
	}();

	var AppStateManager = function () {
	    function AppStateManager(config) {
	        classCallCheck(this, AppStateManager);
	        var application = config.application,
	            name = config.name;


	        this._name = name;
	        this._application = application;
	    }

	    createClass(AppStateManager, [{
	        key: 'globalApply',
	        value: function globalApply() {

	            var application = this.getApplication();
	            var systemEvents = application.getAppEvents();

	            this.applySavedStateToApplication();

	            systemEvents.trigger('system:' + this._name + ':applied');
	        }
	    }, {
	        key: 'applySavedStateToApplication',
	        value: function applySavedStateToApplication() {
	            var _this = this;

	            var localStorageState = this.getAppStateFromLocalStorage();

	            if (localStorageState) {
	                this._applyApplicationState(localStorageState);
	            } else {
	                var matches = /link=([^&]+)/g.exec(location.search);
	                if (Array.isArray(matches) && matches.length > 0) {
	                    var permalinkId = matches[1];
	                    this.readPermalink(permalinkId).then(function (response) {
	                        return _this._applyApplicationState(response);
	                    }).catch(function (error) {
	                        return _this._errorHandler(error);
	                    });
	                }
	            }
	        }
	    }, {
	        key: 'saveAppStateToLocalStorage',
	        value: function saveAppStateToLocalStorage(data) {

	            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));
	        }
	    }, {
	        key: 'getAppStateFromLocalStorage',
	        value: function getAppStateFromLocalStorage() {

	            var rawState = localStorage.getItem(LOCAL_STORAGE_KEY);

	            return JSON.parse(rawState);
	        }
	    }, {
	        key: 'removeAppStateFromLocalStorage',
	        value: function removeAppStateFromLocalStorage() {

	            localStorage.removeItem(LOCAL_STORAGE_KEY);
	        }
	    }, {
	        key: 'getPermalinkId',
	        value: function getPermalinkId() {
	            var _this2 = this;

	            var searchMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


	            return new Promise(function (resolve, reject) {

	                var application = _this2.getApplication();
	                var requestManager = application.getRequestManager();
	                var currentState = _this2.getCurrentApplicationState(searchMode);
	                var content = JSON.stringify(currentState);

	                requestManager.requestCreatePermalink({ content: content }).then(function (response) {
	                    var status = response.Status,
	                        result = response.Result;

	                    if (status === 'ok') {
	                        resolve(result);
	                    } else {
	                        reject(response);
	                    }
	                }).catch(function (e) {
	                    return reject(e);
	                });
	            });
	        }
	    }, {
	        key: 'readPermalink',
	        value: function readPermalink(permalinlId) {
	            var _this3 = this;

	            return new Promise(function (resolve, reject) {

	                var application = _this3.getApplication();
	                var requestManager = application.getRequestManager();

	                requestManager.requestReadPermalink({ id: permalinlId }).then(function (response) {
	                    var status = response.Status,
	                        result = response.Result;

	                    if (status == 'ok') {
	                        try {
	                            resolve(JSON.parse(result));
	                        } catch (e) {
	                            reject(e);
	                        }
	                    } else {
	                        reject(response.Result);
	                    }
	                }).catch(function (e) {
	                    return reject(e);
	                });
	            });
	        }
	    }, {
	        key: 'getCurrentApplicationState',
	        value: function getCurrentApplicationState() {
	            var searchMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


	            var serialize = function serialize(group) {
	                return group.filter(function (s) {
	                    return s.checked;
	                }).map(function (s) {
	                    return s.id;
	                });
	            };
	            var application = this.getApplication();
	            var map = application.getMap();
	            var store = application.getStore();
	            var center = map.getCenter();

	            var _L$Projection$Mercato = L.Projection.Mercator.project(center),
	                x = _L$Projection$Mercato.x,
	                y = _L$Projection$Mercato.y;

	            var searchCriteria = _extends({}, store.getData('searchCriteria'));
	            var _searchCriteria$satel = searchCriteria.satellites,
	                ms = _searchCriteria$satel.ms,
	                pc = _searchCriteria$satel.pc;

	            searchCriteria.satellites = { ms: serialize(ms), pc: serialize(pc) };

	            var language = Translations$2.getLanguage();

	            var drawings = store.getSerializedData('drawings');
	            var drawingObjects = drawings.reduce(function (prepared, _ref) {
	                var visible = _ref.visible,
	                    id = _ref.id,
	                    color = _ref.color,
	                    name = _ref.name,
	                    area = _ref.area,
	                    geoJSON = _ref.geoJSON;

	                return prepared.concat({ visible: visible, id: id, color: color, name: name, area: area, geoJSON: geoJSON });
	            }, []);

	            var results = this._getNormalizedData('results');

	            var favorites = this._getNormalizedData('favorites');

	            var activeTabId = this._getCurrentTab();

	            var cadastre = {};

	            return {
	                searchMode: searchMode,
	                lang: language,
	                drawingObjects: drawingObjects,
	                position: {
	                    x: x,
	                    y: y,
	                    z: 17 - map.getZoom()
	                },
	                activeLayer: store.getMetaItem('activeLayer'),
	                bounds: map.getBounds(),
	                searchCriteria: searchCriteria,
	                items: results,
	                cart: favorites,
	                activeTabId: activeTabId,
	                cadastre: cadastre
	            };
	        }
	    }, {
	        key: 'getApplication',
	        value: function getApplication() {

	            return this._application;
	        }
	    }, {
	        key: '_applyApplicationState',
	        value: function _applyApplicationState(state) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var map = application.getMap();
	            var serviceEvents = application.getServiceEvents();
	            var drawingController = application.getBridgeController('drawing');
	            var contourController = application.getBridgeController('contour');

	            var _state$searchMode = state.searchMode,
	                searchMode = _state$searchMode === undefined ? false : _state$searchMode;

	            // remove from local storage

	            this.removeAppStateFromLocalStorage();

	            // language
	            Translations$2.setLanguage(state.lang || DEFAULT_LANGUAGE$1);
	            L.gmxLocale.setLanguage(state.lang || DEFAULT_LANGUAGE$1);

	            // search criteria
	            var searchCriteria = store.getData('searchCriteria');
	            var stateCriteria = state['searchCriteria'];

	            var _stateCriteria$archiv = stateCriteria.archive,
	                archive = _stateCriteria$archiv === undefined ? 'global' : _stateCriteria$archiv,
	                _stateCriteria$date = slicedToArray(stateCriteria.date, 2),
	                dateStart = _stateCriteria$date[0],
	                dateEnd = _stateCriteria$date[1],
	                annually = stateCriteria.annually,
	                angle = stateCriteria.angle,
	                clouds = stateCriteria.clouds,
	                stereo = stateCriteria.stereo,
	                satellites = stateCriteria.satellites;

	            var dates = [moment(dateStart).toDate(), moment(dateEnd).toDate()];

	            var _searchCriteria$satel2 = searchCriteria.satellites,
	                ms = _searchCriteria$satel2.ms,
	                pc = _searchCriteria$satel2.pc;

	            ms.forEach(function (s) {
	                return s.checked = satellites.ms.indexOf(s.id) >= 0;
	            });
	            pc.forEach(function (s) {
	                return s.checked = satellites.pc.indexOf(s.id) >= 0;
	            });

	            store.rewriteData('searchCriteria', {
	                archive: archive,
	                date: dates,
	                annually: annually,
	                angle: angle,
	                clouds: clouds,
	                stereo: stereo,
	                satellites: { ms: ms, pc: pc }
	            }, ['searchCriteria:update']);

	            // drawings
	            var _state$drawingObjects = state.drawingObjects,
	                drawingObjects = _state$drawingObjects === undefined ? [] : _state$drawingObjects;

	            drawingController.addDrawingsOnListAndMapFromUploading(drawingObjects);

	            // results
	            var items = state.items.reduce(function (contours, item) {
	                var gmxId = item.gmx_id;

	                contours[gmxId] = item;
	                contours[gmxId]['result'] = true;

	                if (item.hasOwnProperty('visible')) {
	                    var rawVisibleValue = item['visible'];
	                    var visibleValue = ['visible', 'failed'].indexOf(rawVisibleValue) !== -1 ? 'visible' : rawVisibleValue;
	                    contours[gmxId]['visible'] = visibleValue;
	                }

	                return contours;
	            }, {});

	            // favorites
	            items = state.cart.reduce(function (contours, item) {
	                var gmxId = item.gmx_id;

	                if (contours[gmxId]) {
	                    contours[gmxId]['cart'] = true;
	                    if (item.hasOwnProperty('selected')) {
	                        contours[gmxId]['selected'] = item['selected'];
	                    }

	                    if (item.hasOwnProperty('visible')) {
	                        var rawVisibleValue = item['visible'];
	                        var visibleValue = ['visible', 'failed'].indexOf(rawVisibleValue) !== -1 ? 'visible' : rawVisibleValue;
	                        contours[gmxId]['visible'] = visibleValue;
	                    } else if (item.hasOwnProperty('quicklook')) {
	                        contours[gmxId]['visible'] = item['quicklook'];
	                    }
	                } else {
	                    contours[gmxId] = item;
	                    contours[gmxId]['cart'] = true;
	                }

	                delete contours[gmxId]['checked'];
	                delete contours[gmxId]['quicklook'];

	                return contours;
	            }, items);

	            // common

	            var _Object$keys$reduce = Object.keys(items).reduce(function (result, gmxId) {

	                var item = items[gmxId];

	                if (result.fields.length === 0) {
	                    CONTOUR_ITEM_ATTRIBUTES.forEach(function (k, i) {
	                        if (['selected', 'visible', 'result', 'cart'].indexOf(k) !== -1 || item.hasOwnProperty(k)) {
	                            result.fields.push(k);
	                            result.types.push(CONTOUR_ITEM_ATTR_TYPES[i]);
	                        }
	                    });
	                }

	                var values = result.fields.map(function (k) {
	                    if (item[k]) {
	                        if (k === 'visible') {
	                            return item[k] === 'loading' ? 'visible' : item[k];
	                        } else {
	                            return item[k];
	                        }
	                    } else {
	                        return false;
	                    }
	                });

	                values.push(L.gmxUtil.convertGeometry(item['geoJSON'], false, true));
	                result.values.push(values);

	                return result;
	            }, { fields: [], values: [], types: [] }),
	                fields = _Object$keys$reduce.fields,
	                values = _Object$keys$reduce.values,
	                types = _Object$keys$reduce.types;

	            contourController.clearClientFilter();

	            contourController.clearContoursOnResults();
	            contourController.addContoursOnMapAndList({ fields: fields, values: values, types: types }, true);

	            if (searchMode) {
	                serviceEvents.trigger('permalink:searchResults');
	            }

	            serviceEvents.trigger('sidebar:setCurrentTab', state.activeTabId);

	            // map
	            var _state$position = state.position,
	                x = _state$position.x,
	                y = _state$position.y,
	                z = _state$position.z;

	            var center = L.Projection.Mercator.unproject({ y: y, x: x });
	            map.setView(center, 17 - z);

	            // active layer
	            store.setMetaItem('activeLayer', state['activeLayer'], ['activeLayer:changeFromPermalink']);
	        }
	    }, {
	        key: '_getNormalizedData',
	        value: function _getNormalizedData(dataKey) {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var rawData = store[dataKey === 'results' ? 'getResults' : 'getFavorites'](dataKey, true);
	            return rawData.map(function (item) {
	                var gmxId = item.gmx_id;

	                var unPreparedItem = store.getData('contours', gmxId);
	                var _unPreparedItem$prope = unPreparedItem.properties,
	                    properties = _unPreparedItem$prope === undefined ? [] : _unPreparedItem$prope;

	                var rawGeoJson = properties[properties.length - 1];
	                item.geoJSON = L.gmxUtil.convertGeometry(rawGeoJson, true, true);
	                item.geoJSON = normalizeGeometryType(item.geoJSON);
	                return item;
	            });
	        }
	    }, {
	        key: '_getCurrentTab',
	        value: function _getCurrentTab() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = store.getMetaItem('currentTab');

	            return currentTab;
	        }
	    }, {
	        key: '_errorHandler',
	        value: function _errorHandler(e) {

	            var application = this.getApplication();

	            application.showError(e.toString());

	            window.console.error(e);
	        }
	    }]);
	    return AppStateManager;
	}();

	var T$1 = Translations$2;

	var LoaderWidget = function (_EventTarget) {
	    inherits(LoaderWidget, _EventTarget);

	    function LoaderWidget() {
	        classCallCheck(this, LoaderWidget);

	        var _this = possibleConstructorReturn(this, (LoaderWidget.__proto__ || Object.getPrototypeOf(LoaderWidget)).call(this));

	        _this._container = document.createElement('div');
	        document.body.appendChild(_this._container);
	        _this._container.classList.add('noselect');
	        _this._container.classList.add('loader-widget');
	        _this._container.innerHTML = '<div class="loader-icon"></div><div class="loader-button">' + T$1.getText('alerts.cancel') + '</div>';
	        _this._ovl = document.querySelector('.loader-widget-overlay');
	        _this._stopPropagation = _this._stopPropagation.bind(_this);
	        if (!_this._ovl) {
	            _this._ovl = document.createElement('div');
	            document.body.appendChild(_this._ovl);
	            _this._ovl.className = 'loader-widget-overlay';
	            _this._ovl.style.display = 'none';
	            _this._ovl.addEventListener('mousemove', _this._stopPropagation);
	            _this._ovl.addEventListener('mousewheel', _this._stopPropagation);
	            _this._ovl.addEventListener('click', _this._stopPropagation);
	        }
	        _this._container.querySelector('.loader-button').addEventListener('click', function (e) {
	            _this.hide();
	            var event = document.createEvent('Event');
	            event.initEvent('cancel', false, false);
	            _this.dispatchEvent(event);
	        });
	        _this.show = _this.show.bind(_this);
	        _this.hide = _this.hide.bind(_this);
	        return _this;
	    }

	    createClass(LoaderWidget, [{
	        key: '_stopPropagation',
	        value: function _stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            this._ovl.style.display = 'block';
	            this._container.querySelector('.loader-icon').classList.add('loader-animated');
	            this._container.style.visibility = 'visible';
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this._ovl.style.display = 'none';
	            this._container.querySelector('.loader-icon').classList.remove('loader-animated');
	            this._container.style.visibility = 'hidden';
	        }
	    }]);
	    return LoaderWidget;
	}(EventTarget);

	var BaseUIElement = function (_BaseComponent) {
	    inherits(BaseUIElement, _BaseComponent);

	    function BaseUIElement(props) {
	        classCallCheck(this, BaseUIElement);

	        var _this = possibleConstructorReturn(this, (BaseUIElement.__proto__ || Object.getPrototypeOf(BaseUIElement)).call(this, props));

	        _this._name = props['name'] || null;

	        _this._parent = _this.getApplication();
	        return _this;
	    }

	    createClass(BaseUIElement, [{
	        key: 'getChildComponent',
	        value: function getChildComponent(pathString) {

	            var pathList = pathString.split('.');

	            var currentComponent = this;

	            for (var i = 0; i < pathList.length; i++) {

	                var componentToGet = pathList[i];

	                currentComponent = currentComponent['_' + componentToGet + 'Component'];
	            }

	            return currentComponent;
	        }
	    }, {
	        key: 'getParentComponent',
	        value: function getParentComponent() {

	            return this['_parent'];
	        }
	    }, {
	        key: 'initChildren',
	        value: function initChildren() {
	            var _this2 = this;

	            var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];


	            var config = this.getConfig();
	            var preparedConfig = _extends({}, config, {
	                parent: this
	            });

	            components.forEach(function (component) {
	                var index = component.index,
	                    constructor = component.constructor,
	                    _component$config = component.config,
	                    currentConfig = _component$config === undefined ? {} : _component$config;

	                var currentPreparedConfig = _extends({}, preparedConfig, {
	                    name: index,
	                    currentConfig: currentConfig
	                });
	                var fullName = '_' + index + 'Component';

	                _this2[fullName] = new constructor(currentPreparedConfig);

	                _this2[fullName].init();
	            });
	        }
	    }, {
	        key: 'isSimple',
	        value: function isSimple() {

	            return false;
	        }
	    }]);
	    return BaseUIElement;
	}(BaseComponent);

	var LoadingIndicatorUIElement = function (_BaseUIElement) {
	    inherits(LoadingIndicatorUIElement, _BaseUIElement);

	    function LoadingIndicatorUIElement() {
	        classCallCheck(this, LoadingIndicatorUIElement);
	        return possibleConstructorReturn(this, (LoadingIndicatorUIElement.__proto__ || Object.getPrototypeOf(LoadingIndicatorUIElement)).apply(this, arguments));
	    }

	    createClass(LoadingIndicatorUIElement, [{
	        key: 'init',
	        value: function init() {

	            this._view = new LoaderWidget();

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            var view = this.getView();

	            view.addEventListener('cancel', this._onCancelClickHandler.bind(this));
	        }
	    }, {
	        key: '_onCancelClickHandler',
	        value: function _onCancelClickHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            store.setMetaItem('cancelLoading', true);
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


	            var view = this.getView();
	            var methodName = state ? 'show' : 'hide';

	            view[methodName]();
	        }
	    }]);
	    return LoadingIndicatorUIElement;
	}(BaseUIElement);

	var NotificationWidget = function () {
	    function NotificationWidget(container) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { timeout: 0 };
	        classCallCheck(this, NotificationWidget);

	        this._container = container;
	        this._options = options;
	        this._content = document.createElement('div');
	        this._container.appendChild(this._content);
	        this._content.classList.add('notification-widget');
	    }

	    createClass(NotificationWidget, [{
	        key: 'show',
	        value: function show() {
	            var _this = this;

	            if (this._options.timeout) {
	                this._content.classList.add('notification-on');
	                window.setTimeout(function () {
	                    return _this.hide();
	                }, this._options.timeout);
	            } else {
	                this._content.classList.add('notification-on');
	            }
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this._content.classList.remove('notification-on');
	        }
	    }, {
	        key: 'content',
	        get: function get$$1() {
	            return this._content;
	        }
	    }]);
	    return NotificationWidget;
	}();

	var PopupNotificationUIElement = function (_BaseUIElement) {
	    inherits(PopupNotificationUIElement, _BaseUIElement);

	    function PopupNotificationUIElement() {
	        classCallCheck(this, PopupNotificationUIElement);
	        return possibleConstructorReturn(this, (PopupNotificationUIElement.__proto__ || Object.getPrototypeOf(PopupNotificationUIElement)).apply(this, arguments));
	    }

	    createClass(PopupNotificationUIElement, [{
	        key: 'init',
	        value: function init() {

	            var map = this.getMap();

	            this._view = new NotificationWidget(map._controlCorners.right, { timeout: NOTIFICATION_HIDE_TIMEOUT });
	        }
	    }, {
	        key: 'show',
	        value: function show(message) {

	            var view = this.getView();

	            view.content.innerText = message;
	            view.show();
	        }
	    }]);
	    return PopupNotificationUIElement;
	}(BaseUIElement);

	//import ABoutDialogComponent from './components/aboutDialog/AboutDialogComponent';


	var HelpButtonUIElement = function (_BaseUIElement) {
	    inherits(HelpButtonUIElement, _BaseUIElement);

	    function HelpButtonUIElement() {
	        classCallCheck(this, HelpButtonUIElement);
	        return possibleConstructorReturn(this, (HelpButtonUIElement.__proto__ || Object.getPrototypeOf(HelpButtonUIElement)).apply(this, arguments));
	    }

	    createClass(HelpButtonUIElement, [{
	        key: 'init',
	        value: function init() {

	            this._container = document.getElementById('help');

	            this._view = createContainer();
	            this._view.classList.add('help-button');
	            this._container.appendChild(this._view);

	            /*this.initChildren([
	                {
	                    index: 'dialog',
	                    constructor: ABoutDialogComponent
	                }
	            ])*/

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            this._container.addEventListener('click', this._onClickHandler.bind(this));
	        }
	    }, {
	        key: '_onClickHandler',
	        value: function _onClickHandler() {

	            window.open('https://scanex.github.io/Documentation/Catalog/index.html', '_blank');
	        }
	    }]);
	    return HelpButtonUIElement;
	}(BaseUIElement);

	var UserInformationUIElement = function (_BaseUIElement) {
	    inherits(UserInformationUIElement, _BaseUIElement);

	    function UserInformationUIElement() {
	        classCallCheck(this, UserInformationUIElement);
	        return possibleConstructorReturn(this, (UserInformationUIElement.__proto__ || Object.getPrototypeOf(UserInformationUIElement)).apply(this, arguments));
	    }

	    createClass(UserInformationUIElement, [{
	        key: 'init',
	        value: function init() {

	            var application = this.getApplication();
	            var requestManager = application.getRequestManager();
	            var authManager = requestManager.getAuthManager();

	            this._container = document.getElementById('auth');

	            this._view = new AuthWidget({ authManager: authManager });
	            this._view.appendTo(this._container);

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            var application = this.getApplication();
	            var appStateManager = application.getAddon('appStateManager');
	            var view = this.getView();

	            view.addEventListener('logout', function () {
	                var currentAppState = appStateManager.getCurrentApplicationState();
	                appStateManager.saveAppStateToLocalStorage(currentAppState);
	                window.location.reload(true);
	            });

	            setTimeout(function () {
	                var loginButton = document.querySelector('.authWidget-loginButton');
	                loginButton && loginButton.addEventListener('click', function () {
	                    var currentAppState = appStateManager.getCurrentApplicationState();
	                    appStateManager.saveAppStateToLocalStorage(currentAppState);
	                });
	            }, 0);
	        }
	    }]);
	    return UserInformationUIElement;
	}(BaseUIElement);

	var LanguageWidget = function (_EventTarget) {
	    inherits(LanguageWidget, _EventTarget);

	    function LanguageWidget(container, _ref) {
	        var _ref$languages = _ref.languages,
	            languages = _ref$languages === undefined ? [] : _ref$languages;
	        classCallCheck(this, LanguageWidget);

	        var _this = possibleConstructorReturn(this, (LanguageWidget.__proto__ || Object.getPrototypeOf(LanguageWidget)).call(this));

	        _this._container = container;
	        _this._languages = languages;
	        _this._container.classList.add('noselect');
	        _this._container.classList.add('language-widget');
	        _this._container.innerHTML = '<select>' + Object.keys(_this._languages).map(function (id) {
	            return '<option value="' + id + '">' + _this._languages[id] + '</option>';
	        }).join('') + '</select>';
	        _this._stopPropagation = _this._stopPropagation.bind(_this);
	        _this._langSelect = _this._container.querySelector('select');
	        _this._langSelect.addEventListener('change', function (e) {
	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = _this._langSelect.value;
	            _this.dispatchEvent(event);
	        });
	        _this._container.addEventListener('click', _this._stopPropagation);
	        return _this;
	    }

	    createClass(LanguageWidget, [{
	        key: '_stopPropagation',
	        value: function _stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: 'currentLanguage',
	        set: function set$$1(value) {
	            this._langSelect.value = value;
	        },
	        get: function get$$1() {
	            return this._langSelect.value;
	        }
	    }]);
	    return LanguageWidget;
	}(EventTarget);

	var LangWidgetUIElement = function (_BaseUIElement) {
	    inherits(LangWidgetUIElement, _BaseUIElement);

	    function LangWidgetUIElement() {
	        classCallCheck(this, LangWidgetUIElement);
	        return possibleConstructorReturn(this, (LangWidgetUIElement.__proto__ || Object.getPrototypeOf(LangWidgetUIElement)).apply(this, arguments));
	    }

	    createClass(LangWidgetUIElement, [{
	        key: 'init',
	        value: function init() {

	            this._container = document.getElementById('lang');

	            this._view = new LanguageWidget(this._container, {
	                languages: {
	                    'eng': 'EN',
	                    'rus': 'RU'
	                }
	            });
	            this.getView().currentLanguage = Translations$2.getLanguage();

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            var application = this.getApplication();
	            var appStateManager = application.getAddon('appStateManager');
	            var view = this.getView();

	            view.addEventListener('change', function (e) {
	                var currentLanguage = e.detail;


	                Translations$2.setLanguage(currentLanguage);
	                L.gmxLocale.setLanguage(currentLanguage);

	                var currentAppState = appStateManager.getCurrentApplicationState();
	                appStateManager.saveAppStateToLocalStorage(currentAppState);

	                window.location.reload(true);
	            });
	        }
	    }]);
	    return LangWidgetUIElement;
	}(BaseUIElement);

	var PointUIElement = function (_BaseUIElement) {
	        inherits(PointUIElement, _BaseUIElement);

	        function PointUIElement() {
	                classCallCheck(this, PointUIElement);
	                return possibleConstructorReturn(this, (PointUIElement.__proto__ || Object.getPrototypeOf(PointUIElement)).apply(this, arguments));
	        }

	        createClass(PointUIElement, [{
	                key: 'init',
	                value: function init() {

	                        var map = this.getMap();

	                        var controlText = Translations$2.getText('controls.point');

	                        var pointControl = new L.Control.gmxIcon({
	                                id: 'point',
	                                position: 'drawControls',
	                                title: controlText,
	                                togglable: true,
	                                imagePath: './dist/'
	                        });

	                        pointControl.on('statechange', this._handleStateChange.bind(this));

	                        this._view = pointControl;

	                        map.gmxControlsManager.add(pointControl);
	                        map.addControl(pointControl);

	                        this._bindEvents();
	                }
	        }, {
	                key: '_bindEvents',
	                value: function _bindEvents() {
	                        var _this2 = this;

	                        var _getMap = this.getMap(),
	                            gmxDrawing = _getMap.gmxDrawing;

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();

	                        gmxDrawing.on('drawstop', this._omMapDrawStop.bind(this));
	                        events.on('gmxIcons:clearActive', function (id) {
	                                return id !== 'point' && _this2.getView().setActive(false);
	                        });
	                }
	        }, {
	                key: '_omMapDrawStop',
	                value: function _omMapDrawStop(e) {
	                        var object = e.object;


	                        this._setActiveIcon(object, false);
	                }
	        }, {
	                key: '_handleStateChange',
	                value: function _handleStateChange(e) {
	                        var target = e.target;
	                        var options = target.options;


	                        if (this._getActiveIcon() === 'point') {
	                                this._setActive();
	                        } else if (options.isActive) {
	                                this._setActive('point');
	                        }

	                        this._setActiveIcon(target, options.isActive);
	                }
	        }, {
	                key: '_setActiveIcon',
	                value: function _setActiveIcon(control, isActive) {

	                        var pointControl = this.getView();

	                        this._rewriteActiveIcon(null);

	                        var flag = control === pointControl && (isActive || pointControl.options.isActive);

	                        pointControl.setActive(flag);

	                        if (flag) {
	                                this._rewriteActiveIcon('point');
	                        }
	                }
	        }, {
	                key: '_setActive',
	                value: function _setActive(controlName) {
	                        var _getMap2 = this.getMap(),
	                            gmxDrawing = _getMap2.gmxDrawing;

	                        var _getView = this.getView(),
	                            isActive = _getView.options.isActive;

	                        gmxDrawing.bringToFront();

	                        if (controlName === 'point' && isActive) {
	                                gmxDrawing.create('Point');
	                        }
	                }
	        }, {
	                key: '_getActiveIcon',
	                value: function _getActiveIcon() {

	                        var application = this.getApplication();
	                        var store = application.getStore();

	                        return store.getMetaItem('activeIcon');
	                }
	        }, {
	                key: '_rewriteActiveIcon',
	                value: function _rewriteActiveIcon(value) {

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();
	                        var store = application.getStore();

	                        store.setMetaItem('activeIcon', value);
	                        events.trigger('gmxIcons:clearActive', 'point');
	                }
	        }]);
	        return PointUIElement;
	}(BaseUIElement);

	var PolylineUIElement = function (_BaseUIElement) {
	        inherits(PolylineUIElement, _BaseUIElement);

	        function PolylineUIElement() {
	                classCallCheck(this, PolylineUIElement);
	                return possibleConstructorReturn(this, (PolylineUIElement.__proto__ || Object.getPrototypeOf(PolylineUIElement)).apply(this, arguments));
	        }

	        createClass(PolylineUIElement, [{
	                key: 'init',
	                value: function init() {

	                        var map = this.getMap();

	                        var controlText = Translations$2.getText('controls.polyline');

	                        var polylineControl = new L.Control.gmxIcon({
	                                id: 'polyline',
	                                position: 'drawControls',
	                                title: controlText,
	                                togglable: true,
	                                imagePath: './dist/'
	                        });

	                        polylineControl.on('statechange', this._handleStateChange.bind(this));

	                        this._view = polylineControl;

	                        map.gmxControlsManager.add(polylineControl);
	                        map.addControl(polylineControl);

	                        this._bindEvents();
	                }
	        }, {
	                key: '_bindEvents',
	                value: function _bindEvents() {
	                        var _this2 = this;

	                        var _getMap = this.getMap(),
	                            gmxDrawing = _getMap.gmxDrawing;

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();

	                        gmxDrawing.on('drawstop', this._omMapDrawStop.bind(this));
	                        events.on('gmxIcons:clearActive', function (id) {
	                                return id !== 'polyline' && _this2.getView().setActive(false);
	                        });
	                }
	        }, {
	                key: '_omMapDrawStop',
	                value: function _omMapDrawStop(e) {
	                        var object = e.object;


	                        this._setActiveIcon(object, false);
	                }
	        }, {
	                key: '_handleStateChange',
	                value: function _handleStateChange(e) {
	                        var target = e.target;
	                        var options = target.options;


	                        if (this._getActiveIcon() === 'polyline') {
	                                this._setActive();
	                        } else if (options.isActive) {
	                                this._setActive('polyline');
	                        }

	                        this._setActiveIcon(target, options.isActive);
	                }
	        }, {
	                key: '_setActiveIcon',
	                value: function _setActiveIcon(control, isActive) {

	                        var polylineControl = this.getView();

	                        this._rewriteActiveIcon(null);

	                        var flag = control === polylineControl && (isActive || polylineControl.options.isActive);

	                        polylineControl.setActive(flag);

	                        if (flag) {
	                                this._rewriteActiveIcon('polyline');
	                        }
	                }
	        }, {
	                key: '_setActive',
	                value: function _setActive(controlName) {
	                        var _getMap2 = this.getMap(),
	                            gmxDrawing = _getMap2.gmxDrawing;

	                        var _getView = this.getView(),
	                            isActive = _getView.options.isActive;

	                        gmxDrawing.bringToFront();

	                        if (controlName === 'polyline' && isActive) {
	                                gmxDrawing.create('Polyline');
	                        }
	                }
	        }, {
	                key: '_getActiveIcon',
	                value: function _getActiveIcon() {

	                        var application = this.getApplication();
	                        var store = application.getStore();

	                        return store.getMetaItem('activeIcon');
	                }
	        }, {
	                key: '_rewriteActiveIcon',
	                value: function _rewriteActiveIcon(value) {

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();
	                        var store = application.getStore();

	                        store.setMetaItem('activeIcon', value);
	                        events.trigger('gmxIcons:clearActive', 'polyline');
	                }
	        }]);
	        return PolylineUIElement;
	}(BaseUIElement);

	var PolygonUIElement = function (_BaseUIElement) {
	        inherits(PolygonUIElement, _BaseUIElement);

	        function PolygonUIElement() {
	                classCallCheck(this, PolygonUIElement);
	                return possibleConstructorReturn(this, (PolygonUIElement.__proto__ || Object.getPrototypeOf(PolygonUIElement)).apply(this, arguments));
	        }

	        createClass(PolygonUIElement, [{
	                key: 'init',
	                value: function init() {

	                        var map = this.getMap();

	                        var controlText = Translations$2.getText('controls.polygon');

	                        var polygonControl = new L.Control.gmxIcon({
	                                id: 'polygon',
	                                position: 'drawControls',
	                                title: controlText,
	                                togglable: true,
	                                imagePath: './dist/'
	                        });

	                        polygonControl.on('statechange', this._handleStateChange.bind(this));

	                        this._view = polygonControl;

	                        map.gmxControlsManager.add(polygonControl);
	                        map.addControl(polygonControl);

	                        this._bindEvents();
	                }
	        }, {
	                key: '_bindEvents',
	                value: function _bindEvents() {
	                        var _this2 = this;

	                        var _getMap = this.getMap(),
	                            gmxDrawing = _getMap.gmxDrawing;

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();

	                        gmxDrawing.on('drawstop', this._omMapDrawStop.bind(this));
	                        events.on('gmxIcons:clearActive', function (id) {
	                                return id !== 'polygon' && _this2.getView().setActive(false);
	                        });
	                }
	        }, {
	                key: '_omMapDrawStop',
	                value: function _omMapDrawStop(e) {
	                        var object = e.object;


	                        this._setActiveIcon(object, false);
	                }
	        }, {
	                key: '_handleStateChange',
	                value: function _handleStateChange(e) {
	                        var target = e.target;
	                        var options = target.options;


	                        if (this._getActiveIcon() === 'polygon') {
	                                this._setActive();
	                        } else if (options.isActive) {
	                                this._setActive('polygon');
	                        }

	                        this._setActiveIcon(target, options.isActive);
	                }
	        }, {
	                key: '_setActiveIcon',
	                value: function _setActiveIcon(control, isActive) {

	                        var polygonControl = this.getView();

	                        this._rewriteActiveIcon(null);

	                        var flag = control === polygonControl && (isActive || polygonControl.options.isActive);

	                        polygonControl.setActive(flag);

	                        if (flag) {
	                                this._rewriteActiveIcon('polygon');
	                        }
	                }
	        }, {
	                key: '_setActive',
	                value: function _setActive(controlName) {
	                        var _getMap2 = this.getMap(),
	                            gmxDrawing = _getMap2.gmxDrawing;

	                        var _getView = this.getView(),
	                            isActive = _getView.options.isActive;

	                        gmxDrawing.bringToFront();

	                        if (controlName === 'polygon' && isActive) {
	                                gmxDrawing.create('Polygon');
	                        }
	                }
	        }, {
	                key: '_getActiveIcon',
	                value: function _getActiveIcon() {

	                        var application = this.getApplication();
	                        var store = application.getStore();

	                        return store.getMetaItem('activeIcon');
	                }
	        }, {
	                key: '_rewriteActiveIcon',
	                value: function _rewriteActiveIcon(value) {

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();
	                        var store = application.getStore();

	                        store.setMetaItem('activeIcon', value);
	                        events.trigger('gmxIcons:clearActive', 'polygon');
	                }
	        }]);
	        return PolygonUIElement;
	}(BaseUIElement);

	var RectangleUIElement = function (_BaseUIElement) {
	        inherits(RectangleUIElement, _BaseUIElement);

	        function RectangleUIElement() {
	                classCallCheck(this, RectangleUIElement);
	                return possibleConstructorReturn(this, (RectangleUIElement.__proto__ || Object.getPrototypeOf(RectangleUIElement)).apply(this, arguments));
	        }

	        createClass(RectangleUIElement, [{
	                key: 'init',
	                value: function init() {

	                        var map = this.getMap();

	                        var controlText = Translations$2.getText('controls.rectangle');

	                        var rectangleControl = new L.Control.gmxIcon({
	                                id: 'rectangle',
	                                position: 'drawControls',
	                                title: controlText,
	                                togglable: true,
	                                imagePath: './dist/'
	                        });

	                        rectangleControl.on('statechange', this._handleStateChange.bind(this));

	                        this._view = rectangleControl;

	                        map.gmxControlsManager.add(rectangleControl);
	                        map.addControl(rectangleControl);

	                        this._bindEvents();
	                }
	        }, {
	                key: '_bindEvents',
	                value: function _bindEvents() {
	                        var _this2 = this;

	                        var _getMap = this.getMap(),
	                            gmxDrawing = _getMap.gmxDrawing;

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();

	                        gmxDrawing.on('drawstop', this._omMapDrawStop.bind(this));
	                        events.on('gmxIcons:clearActive', function (id) {
	                                return id !== 'rectangle' && _this2.getView().setActive(false);
	                        });
	                }
	        }, {
	                key: '_omMapDrawStop',
	                value: function _omMapDrawStop(e) {
	                        var object = e.object;


	                        this._setActiveIcon(object, false);
	                }
	        }, {
	                key: '_handleStateChange',
	                value: function _handleStateChange(e) {
	                        var target = e.target;
	                        var options = target.options;


	                        if (this._getActiveIcon() === 'rectangle') {
	                                this._setActive();
	                        } else if (options.isActive) {
	                                this._setActive('rectangle');
	                        }

	                        this._setActiveIcon(target, options.isActive);
	                }
	        }, {
	                key: '_setActiveIcon',
	                value: function _setActiveIcon(control, isActive) {

	                        var rectangleControl = this.getView();

	                        this._rewriteActiveIcon(null);

	                        var flag = control === rectangleControl && (isActive || rectangleControl.options.isActive);

	                        rectangleControl.setActive(flag);

	                        if (flag) {
	                                this._rewriteActiveIcon('rectangle');
	                        }
	                }
	        }, {
	                key: '_setActive',
	                value: function _setActive(controlName) {
	                        var _getMap2 = this.getMap(),
	                            gmxDrawing = _getMap2.gmxDrawing;

	                        var _getView = this.getView(),
	                            isActive = _getView.options.isActive;

	                        gmxDrawing.bringToFront();

	                        if (controlName === 'rectangle' && isActive) {
	                                gmxDrawing.create('Rectangle');
	                        }
	                }
	        }, {
	                key: '_getActiveIcon',
	                value: function _getActiveIcon() {

	                        var application = this.getApplication();
	                        var store = application.getStore();

	                        return store.getMetaItem('activeIcon');
	                }
	        }, {
	                key: '_rewriteActiveIcon',
	                value: function _rewriteActiveIcon(value) {

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();
	                        var store = application.getStore();

	                        store.setMetaItem('activeIcon', value);
	                        events.trigger('gmxIcons:clearActive', 'rectangle');
	                }
	        }]);
	        return RectangleUIElement;
	}(BaseUIElement);

	var BoxZoomUIElement = function (_BaseUIElement) {
	    inherits(BoxZoomUIElement, _BaseUIElement);

	    function BoxZoomUIElement() {
	        classCallCheck(this, BoxZoomUIElement);
	        return possibleConstructorReturn(this, (BoxZoomUIElement.__proto__ || Object.getPrototypeOf(BoxZoomUIElement)).apply(this, arguments));
	    }

	    createClass(BoxZoomUIElement, [{
	        key: 'init',
	        value: function init() {

	            var map = this.getMap();

	            var zoomControl = new L.Control.gmxIcon({
	                id: 'boxzoom',
	                position: 'searchControls',
	                toggle: true,
	                title: Translations$2.getText('controls.zoom'),
	                onAdd: this._onAddHandler.bind(this),
	                stateChange: function stateChange(control) {
	                    if (control.options.isActive) {
	                        map.dragging.disable();
	                        map.boxZoom.addHooks();
	                    } else {
	                        map.dragging.enable();
	                        map.boxZoom.removeHooks();
	                    }
	                }
	            });

	            this._view = zoomControl;

	            map.gmxControlsManager.add(this._view);
	            map.addControl(this._view);
	        }
	    }, {
	        key: '_onAddHandler',
	        value: function _onAddHandler(control) {

	            var map = this.getMap();

	            var _onMouseDown = map.boxZoom._onMouseDown;

	            map.boxZoom._onMouseDown = function (e) {
	                _onMouseDown.call(map.boxZoom, {
	                    clientX: e.clientX,
	                    clientY: e.clientY,
	                    which: 1,
	                    shiftKey: true
	                });
	            };

	            map.on('boxzoomend', function () {
	                map.dragging.enable();
	                map.boxZoom.removeHooks();
	                control.setActive(false);
	            });
	        }
	    }]);
	    return BoxZoomUIElement;
	}(BaseUIElement);

	/* src\js\components\uiElements\iconElements\upload\dialogs\UploadDialog.html generated by Svelte v2.16.1 */

	function firstProp(_ref) {
		var drawingProps = _ref.drawingProps;

		return drawingProps.length > 0 ? drawingProps[0] : {};
	}

	function fullItem(_ref2) {
		var firstProp = _ref2.firstProp;
		var itemId = firstProp.itemId,
		    _firstProp$geoJSON = firstProp.geoJSON;
		_firstProp$geoJSON = _firstProp$geoJSON === undefined ? {} : _firstProp$geoJSON;
		var properties = _firstProp$geoJSON.properties,
		    name = firstProp.name;

		return _extends({ 'geometry': name }, properties);
	}

	function itemKeys(_ref3) {
		var fullItem = _ref3.fullItem;

		return Object.keys(fullItem);
	}

	function selected(_ref4) {
		var selectedIndex = _ref4.selectedIndex,
		    itemKeys = _ref4.itemKeys;

		return selectedIndex ? selectedIndex : itemKeys[0];
	}

	function preparedData(_ref5) {
		var drawingProps = _ref5.drawingProps,
		    selected = _ref5.selected;

		var correctIndex = selected === 'geometry' ? 'name' : selected;
		return drawingProps.map(function (currentItem) {
			var _currentItem$geoJSON$ = currentItem.geoJSON.properties,
			    properties = _currentItem$geoJSON$ === undefined ? {} : _currentItem$geoJSON$;

			currentItem['selectedName'] = properties[correctIndex];
			return currentItem;
		});
	}

	function data$2() {
		return {
			selectedIndex: null,
			drawingProps: []
		};
	}
	function translate$1(text) {
		return Translations$2.getText(text);
	}
	var methods$1 = {
		onApplyHandler: function onApplyHandler() {
			var _get = this.get(),
			    _get$preparedData = _get.preparedData,
			    preparedData = _get$preparedData === undefined ? [] : _get$preparedData;

			this.fire('apply', preparedData);
		},
		onCancelHandler: function onCancelHandler() {
			this.fire('cancel');
		},
		onRadioChange: function onRadioChange(selectedIndex) {
			this.set({ selectedIndex: selectedIndex });
		}
	};

	function change_handler(event) {
		var _svelte = this._svelte,
		    component = _svelte.component,
		    ctx = _svelte.ctx;


		component.onRadioChange(ctx.index);
	}

	function get_each_context(ctx, list, i) {
		var child_ctx = Object.create(ctx);
		child_ctx.index = list[i];
		return child_ctx;
	}

	function create_main_fragment$1(component, ctx) {
		var div2,
		    div0,
		    text0_value = ctx.drawingProps.length > 0 ? translate$1('alerts.addToDrawingsHeader') : translate$1('alerts.wrongDrawings'),
		    text0,
		    text1,
		    text2,
		    div1;

		var if_block0 = ctx.drawingProps.length > 0 && create_if_block_1$1(component, ctx);

		function select_block_type(ctx) {
			if (ctx.drawingProps.length > 0) return create_if_block$1;
			return create_else_block;
		}

		var current_block_type = select_block_type(ctx);
		var if_block1 = current_block_type(component, ctx);

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				text0 = createText(text0_value);
				text1 = createText("\r\n    ");
				if (if_block0) if_block0.c();
				text2 = createText("\r\n    ");
				div1 = createElement("div");
				if_block1.c();
				div0.className = "header";
				div1.className = "panel-footer";
				div2.className = "upload-dialog";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				append(div0, text0);
				append(div2, text1);
				if (if_block0) if_block0.m(div2, null);
				append(div2, text2);
				append(div2, div1);
				if_block1.m(div1, null);
			},
			p: function p(changed, ctx) {
				if (changed.drawingProps && text0_value !== (text0_value = ctx.drawingProps.length > 0 ? translate$1('alerts.addToDrawingsHeader') : translate$1('alerts.wrongDrawings'))) {
					setData(text0, text0_value);
				}

				if (ctx.drawingProps.length > 0) {
					if (if_block0) {
						if_block0.p(changed, ctx);
					} else {
						if_block0 = create_if_block_1$1(component, ctx);
						if_block0.c();
						if_block0.m(div2, text2);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if_block1.d(1);
					if_block1 = current_block_type(component, ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				if (if_block0) if_block0.d();
				if_block1.d();
			}
		};
	}

	// (5:4) {#if drawingProps.length > 0}
	function create_if_block_1$1(component, ctx) {
		var div3,
		    div2,
		    div0,
		    text0_value = ctx.firstProp['name'],
		    text0,
		    text1,
		    div1;

		var each_value = ctx.itemKeys;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		return {
			c: function c() {
				div3 = createElement("div");
				div2 = createElement("div");
				div0 = createElement("div");
				text0 = createText(text0_value);
				text1 = createText("\r\n            ");
				div1 = createElement("div");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				div0.className = "item-header";
				div1.className = "item-data";
				div2.className = "content";
				div3.className = "panel-content";
			},
			m: function m(target, anchor) {
				insert(target, div3, anchor);
				append(div3, div2);
				append(div2, div0);
				append(div0, text0);
				append(div2, text1);
				append(div2, div1);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div1, null);
				}
			},
			p: function p(changed, ctx) {
				if (changed.firstProp && text0_value !== (text0_value = ctx.firstProp['name'])) {
					setData(text0, text0_value);
				}

				if (changed.fullItem || changed.itemKeys || changed.selected) {
					each_value = ctx.itemKeys;

					for (var i = 0; i < each_value.length; i += 1) {
						var child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div1, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div3);
				}

				destroyEach(each_blocks, detach);
			}
		};
	}

	// (13:20) {#if typeof (fullItem[index]) !== 'object'}
	function create_if_block_2$1(component, ctx) {
		var div,
		    input,
		    input_checked_value,
		    input_name_value,
		    input_value_value,
		    text0,
		    span0,
		    text1_value = ctx.index,
		    text1,
		    text2,
		    text3,
		    span1,
		    text4_value = ctx.fullItem[ctx.index],
		    text4;

		return {
			c: function c() {
				div = createElement("div");
				input = createElement("input");
				text0 = createText("\r\n                            ");
				span0 = createElement("span");
				text1 = createText(text1_value);
				text2 = createText(":");
				text3 = createText("\r\n                            ");
				span1 = createElement("span");
				text4 = createText(text4_value);
				input._svelte = { component: component, ctx: ctx };

				addListener(input, "change", change_handler);
				setAttribute(input, "type", "radio");
				input.className = "item-radio";
				input.checked = input_checked_value = ctx.index === ctx.selected;
				input.name = input_name_value = "upload_radio_" + ctx.fullItem[ctx.index]['itemId'];
				input.value = input_value_value = ctx.fullItem[ctx.index];
				div.className = "item-container";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				append(div, text0);
				append(div, span0);
				append(span0, text1);
				append(span0, text2);
				append(div, text3);
				append(div, span1);
				append(span1, text4);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				input._svelte.ctx = ctx;
				if ((changed.itemKeys || changed.selected) && input_checked_value !== (input_checked_value = ctx.index === ctx.selected)) {
					input.checked = input_checked_value;
				}

				if ((changed.fullItem || changed.itemKeys) && input_name_value !== (input_name_value = "upload_radio_" + ctx.fullItem[ctx.index]['itemId'])) {
					input.name = input_name_value;
				}

				if ((changed.fullItem || changed.itemKeys) && input_value_value !== (input_value_value = ctx.fullItem[ctx.index])) {
					input.value = input_value_value;
				}

				if (changed.itemKeys && text1_value !== (text1_value = ctx.index)) {
					setData(text1, text1_value);
				}

				if ((changed.fullItem || changed.itemKeys) && text4_value !== (text4_value = ctx.fullItem[ctx.index])) {
					setData(text4, text4_value);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(input, "change", change_handler);
			}
		};
	}

	// (12:16) {#each itemKeys as index}
	function create_each_block(component, ctx) {
		var if_block_anchor;

		var if_block = _typeof(ctx.fullItem[ctx.index]) !== 'object' && create_if_block_2$1(component, ctx);

		return {
			c: function c() {
				if (if_block) if_block.c();
				if_block_anchor = createComment();
			},
			m: function m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p: function p(changed, ctx) {
				if (_typeof(ctx.fullItem[ctx.index]) !== 'object') {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block_2$1(component, ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			d: function d(detach) {
				if (if_block) if_block.d(detach);
				if (detach) {
					detachNode(if_block_anchor);
				}
			}
		};
	}

	// (42:8) {:else}
	function create_else_block(component, ctx) {
		var button,
		    text_value = translate$1('alerts.cancel'),
		    text;

		function click_handler(event) {
			component.onCancelHandler();
		}

		return {
			c: function c() {
				button = createElement("button");
				text = createText(text_value);
				addListener(button, "click", click_handler);
				button.className = "dialog-upload-button";
			},
			m: function m(target, anchor) {
				insert(target, button, anchor);
				append(button, text);
			},
			d: function d(detach) {
				if (detach) {
					detachNode(button);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	// (33:8) {#if drawingProps.length > 0}
	function create_if_block$1(component, ctx) {
		var button0,
		    text0_value = translate$1('alerts.addToDrawings'),
		    text0,
		    text1,
		    button1,
		    text2_value = translate$1('alerts.cancel'),
		    text2;

		function click_handler(event) {
			component.onApplyHandler();
		}

		function click_handler_1(event) {
			component.onCancelHandler();
		}

		return {
			c: function c() {
				button0 = createElement("button");
				text0 = createText(text0_value);
				text1 = createText("\r\n            ");
				button1 = createElement("button");
				text2 = createText(text2_value);
				addListener(button0, "click", click_handler);
				button0.className = "dialog-upload-button";
				addListener(button1, "click", click_handler_1);
				button1.className = "dialog-cancel-button";
			},
			m: function m(target, anchor) {
				insert(target, button0, anchor);
				append(button0, text0);
				insert(target, text1, anchor);
				insert(target, button1, anchor);
				append(button1, text2);
			},
			d: function d(detach) {
				if (detach) {
					detachNode(button0);
				}

				removeListener(button0, "click", click_handler);
				if (detach) {
					detachNode(text1);
					detachNode(button1);
				}

				removeListener(button1, "click", click_handler_1);
			}
		};
	}

	function UploadDialog(options) {
		init(this, options);
		this._state = assign(data$2(), options.data);

		this._recompute({ drawingProps: 1, firstProp: 1, fullItem: 1, selectedIndex: 1, itemKeys: 1, selected: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$1(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(UploadDialog.prototype, proto$4);
	assign(UploadDialog.prototype, methods$1);

	UploadDialog.prototype._recompute = function _recompute(changed, state) {
		if (changed.drawingProps) {
			if (this._differs(state.firstProp, state.firstProp = firstProp(state))) changed.firstProp = true;
		}

		if (changed.firstProp) {
			if (this._differs(state.fullItem, state.fullItem = fullItem(state))) changed.fullItem = true;
		}

		if (changed.fullItem) {
			if (this._differs(state.itemKeys, state.itemKeys = itemKeys(state))) changed.itemKeys = true;
		}

		if (changed.selectedIndex || changed.itemKeys) {
			if (this._differs(state.selected, state.selected = selected(state))) changed.selected = true;
		}

		if (changed.drawingProps || changed.selected) {
			if (this._differs(state.preparedData, state.preparedData = preparedData(state))) changed.preparedData = true;
		}
	};

	var UploadUIElement = function (_BaseUIElement) {
	    inherits(UploadUIElement, _BaseUIElement);

	    function UploadUIElement() {
	        classCallCheck(this, UploadUIElement);
	        return possibleConstructorReturn(this, (UploadUIElement.__proto__ || Object.getPrototypeOf(UploadUIElement)).apply(this, arguments));
	    }

	    createClass(UploadUIElement, [{
	        key: 'init',
	        value: function init() {

	            var map = this.getMap();

	            var uploadControl = new L.Control.gmxIcon({
	                id: 'upload',
	                position: 'searchControls',
	                title: Translations$2.getText('controls.upload'),
	                stateChange: this._onShowClick.bind(this)
	            });

	            this._view = uploadControl;

	            map.gmxControlsManager.add(this._view);
	            map.addControl(this._view);

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {}
	    }, {
	        key: '_onShowClick',
	        value: function _onShowClick() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var shapeLoader = application.getAddon('shapeLoader');

	            shapeLoader.upload().then(function (result) {
	                return _this2._uploadHandler(result);
	            }).catch(function (error) {
	                return _this2._errorHandler(error);
	            });
	        }
	    }, {
	        key: '_onApplyClick',
	        value: function _onApplyClick(data) {

	            var application = this.getApplication();
	            var drawingController = application.getBridgeController('drawing');

	            drawingController.addDrawingsOnListAndMapFromUploading(data);
	        }
	    }, {
	        key: '_uploadHandler',
	        value: function _uploadHandler(_ref) {
	            var type = _ref.type,
	                results = _ref.results;


	            var application = this.getApplication();
	            var contourController = application.getBridgeController('contour');

	            switch (type) {

	                case 'shapefile':
	                    var objectsCount = results.length;
	                    var pointsCount = getCoordinatesCount(results);

	                    if (objectsCount <= MAX_UPLOAD_OBJECTS && pointsCount < MAX_UPLOAD_POINTS) {

	                        var drawingsProperties = [];

	                        results.forEach(function (item, key) {
	                            return drawingsProperties.push(getShapefileObject(item, key));
	                        });

	                        this._showUploadDialog(drawingsProperties);
	                    } else {
	                        var errorHeader = Translations$2.getText('errors.upload');
	                        var errorText = Translations$2.getText('errors.points');
	                        application.showError(errorText, errorHeader);
	                    }
	                    break;

	                case 'idlist':
	                    var values = results.values,
	                        count = results.Count;


	                    if (count) {
	                        var geometryIndex = values[0].length - 1;
	                        values.forEach(function (item) {
	                            item[geometryIndex] = L.gmxUtil.convertGeometry(item[geometryIndex], false, true);
	                        });
	                        contourController.clearContoursOnResults();
	                        contourController.addContoursOnMapAndList(results);
	                    }
	                    break;

	                default:
	                    break;

	            }
	        }
	    }, {
	        key: '_showUploadDialog',
	        value: function _showUploadDialog() {
	            var _this3 = this;

	            var drawingProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];


	            var application = this.getApplication();
	            var modalComponent = application.getModal();

	            modalComponent.show({
	                component: UploadDialog,
	                data: { drawingProps: drawingProps },
	                events: {
	                    cancel: function cancel() {
	                        return modalComponent.hide();
	                    },
	                    apply: function apply(data) {
	                        modalComponent.hide();
	                        _this3._onApplyClick(data);
	                    }
	                }
	            });
	        }
	    }, {
	        key: '_errorHandler',
	        value: function _errorHandler(e) {

	            var application = this.getApplication();

	            application.showError(Translations$2.getText('errors.upload'));

	            window.console.error(e);
	        }
	    }]);
	    return UploadUIElement;
	}(BaseUIElement);

	/* src\js\components\uiElements\iconElements\download\components\dialog\view\View.html generated by Svelte v2.16.1 */

	function data$3() {
					return {
									isHidden: true,
									downloadType: 'borders',
									fileName: Translations$2.getText('download.noname')
					};
	}
	function translate$2(text) {
					return Translations$2.getText(text);
	}
	var methods$2 = {
					onCancelHandler: function onCancelHandler() {
									this.fire('cancel');
					},
					onApplyHandler: function onApplyHandler() {
									this.fire('apply');
					},
					getType: function getType() {
									return this.get()['downloadType'];
					},
					getName: function getName() {
									return this.get()['fileName'];
					},
					show: function show() {
									this.set({ isHidden: false });
					},
					hide: function hide() {
									this.set({ isHidden: true });
					}
	};

	function create_main_fragment$2(component, ctx) {
					var div,
					    table,
					    tbody,
					    tr0,
					    td0,
					    text0_value = translate$2('download.type'),
					    text0,
					    text1,
					    td1,
					    select,
					    option0,
					    text2_value = translate$2('download.borders'),
					    text2,
					    option1,
					    text3_value = translate$2('download.results'),
					    text3,
					    option2,
					    text4_value = translate$2('download.rcsv'),
					    text4,
					    option3,
					    text5_value = translate$2('download.cart'),
					    text5,
					    option4,
					    text6_value = translate$2('download.ccsv'),
					    text6,
					    option5,
					    text7_value = translate$2('download.quicklooks'),
					    text7,
					    select_updating = false,
					    text8,
					    tr1,
					    td2,
					    text9_value = translate$2('download.file'),
					    text9,
					    text10,
					    td3,
					    input,
					    input_updating = false,
					    text11,
					    tr2,
					    td4,
					    button0,
					    text12_value = translate$2('download.ok'),
					    text12,
					    text13,
					    button1,
					    text14_value = translate$2('download.cancel'),
					    text14;

					function select_change_handler() {
									select_updating = true;
									component.set({ downloadType: selectValue(select) });
									select_updating = false;
					}

					function input_input_handler() {
									input_updating = true;
									component.set({ fileName: input.value });
									input_updating = false;
					}

					function click_handler(event) {
									component.onApplyHandler();
					}

					function click_handler_1(event) {
									component.onCancelHandler();
					}

					return {
									c: function c() {
													div = createElement("div");
													table = createElement("table");
													tbody = createElement("tbody");
													tr0 = createElement("tr");
													td0 = createElement("td");
													text0 = createText(text0_value);
													text1 = createText("\r\n                ");
													td1 = createElement("td");
													select = createElement("select");
													option0 = createElement("option");
													text2 = createText(text2_value);
													option1 = createElement("option");
													text3 = createText(text3_value);
													option2 = createElement("option");
													text4 = createText(text4_value);
													option3 = createElement("option");
													text5 = createText(text5_value);
													option4 = createElement("option");
													text6 = createText(text6_value);
													option5 = createElement("option");
													text7 = createText(text7_value);
													text8 = createText("\r\n            ");
													tr1 = createElement("tr");
													td2 = createElement("td");
													text9 = createText(text9_value);
													text10 = createText("\r\n                ");
													td3 = createElement("td");
													input = createElement("input");
													text11 = createText("\r\n            ");
													tr2 = createElement("tr");
													td4 = createElement("td");
													button0 = createElement("button");
													text12 = createText(text12_value);
													text13 = createText("\r\n                    ");
													button1 = createElement("button");
													text14 = createText(text14_value);
													td0.className = "download-type";
													option0.__value = "borders";
													option0.value = option0.__value;
													option1.__value = "results";
													option1.value = option1.__value;
													option2.__value = "rcsv";
													option2.value = option2.__value;
													option3.__value = "cart";
													option3.value = option3.__value;
													option4.__value = "ccsv";
													option4.value = option4.__value;
													option5.__value = "quicklooks";
													option5.value = option5.__value;
													addListener(select, "change", select_change_handler);
													if (!('downloadType' in ctx)) component.root._beforecreate.push(select_change_handler);
													td2.className = "download-file";
													addListener(input, "input", input_input_handler);
													setAttribute(input, "type", "text");
													addListener(button0, "click", click_handler);
													button0.className = "download-ok";
													addListener(button1, "click", click_handler_1);
													button1.className = "download-cancel";
													td4.colSpan = "2";
													td4.className = "download-footer";
													table.border = "0";
													setAttribute(table, "cellspacing", "0");
													setAttribute(table, "cellpadding", "0");
													div.className = "dialog-download";
													setStyle(div, "top", "45px");
													setStyle(div, "left", "475px");
													setStyle(div, "display", ctx.isHidden ? 'none' : 'block');
									},
									m: function m(target, anchor) {
													insert(target, div, anchor);
													append(div, table);
													append(table, tbody);
													append(tbody, tr0);
													append(tr0, td0);
													append(td0, text0);
													append(tr0, text1);
													append(tr0, td1);
													append(td1, select);
													append(select, option0);
													append(option0, text2);
													append(select, option1);
													append(option1, text3);
													append(select, option2);
													append(option2, text4);
													append(select, option3);
													append(option3, text5);
													append(select, option4);
													append(option4, text6);
													append(select, option5);
													append(option5, text7);

													selectOption(select, ctx.downloadType);

													append(tbody, text8);
													append(tbody, tr1);
													append(tr1, td2);
													append(td2, text9);
													append(tr1, text10);
													append(tr1, td3);
													append(td3, input);

													input.value = ctx.fileName;

													append(tbody, text11);
													append(tbody, tr2);
													append(tr2, td4);
													append(td4, button0);
													append(button0, text12);
													append(td4, text13);
													append(td4, button1);
													append(button1, text14);
									},
									p: function p(changed, ctx) {
													if (!select_updating && changed.downloadType) selectOption(select, ctx.downloadType);
													if (!input_updating && changed.fileName) input.value = ctx.fileName;
													if (changed.isHidden) {
																	setStyle(div, "display", ctx.isHidden ? 'none' : 'block');
													}
									},
									d: function d(detach) {
													if (detach) {
																	detachNode(div);
													}

													removeListener(select, "change", select_change_handler);
													removeListener(input, "input", input_input_handler);
													removeListener(button0, "click", click_handler);
													removeListener(button1, "click", click_handler_1);
									}
					};
	}

	function View(options) {
					init(this, options);
					this._state = assign(data$3(), options.data);
					this._intro = true;

					this._fragment = create_main_fragment$2(this, this._state);

					if (options.target) {
									this._fragment.c();
									this._mount(options.target, options.anchor);

									flush(this);
					}
	}

	assign(View.prototype, proto$4);
	assign(View.prototype, methods$2);

	var DialogComponent = function (_BaseComponent) {
	    inherits(DialogComponent, _BaseComponent);

	    function DialogComponent() {
	        classCallCheck(this, DialogComponent);
	        return possibleConstructorReturn(this, (DialogComponent.__proto__ || Object.getPrototypeOf(DialogComponent)).apply(this, arguments));
	    }

	    createClass(DialogComponent, [{
	        key: 'init',
	        value: function init() {

	            this._view = new View({
	                target: createContainer()
	            });

	            this._binEvents();
	        }
	    }, {
	        key: '_binEvents',
	        value: function _binEvents() {
	            var _this2 = this;

	            var view = this.getView();

	            view.on('apply', function () {
	                return _this2.events.trigger('click:apply');
	            });
	            view.on('cancel', function () {
	                return _this2.events.trigger('click:cancel');
	            });
	        }
	    }, {
	        key: 'show',
	        value: function show() {

	            var view = this.getView();
	            view.show();
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {

	            var view = this.getView();
	            view.hide();
	        }
	    }, {
	        key: 'getType',
	        value: function getType() {

	            var view = this.getView();
	            return view.getType();
	        }
	    }, {
	        key: 'getName',
	        value: function getName() {

	            var view = this.getView();
	            return view.getName();
	        }
	    }]);
	    return DialogComponent;
	}(BaseComponent);

	var DownloadUIElement = function (_BaseUIElement) {
	    inherits(DownloadUIElement, _BaseUIElement);

	    function DownloadUIElement() {
	        classCallCheck(this, DownloadUIElement);
	        return possibleConstructorReturn(this, (DownloadUIElement.__proto__ || Object.getPrototypeOf(DownloadUIElement)).apply(this, arguments));
	    }

	    createClass(DownloadUIElement, [{
	        key: 'init',
	        value: function init() {

	            var map = this.getMap();

	            var downloadControl = new L.Control.gmxIcon({
	                id: 'download',
	                position: 'searchControls',
	                title: Translations$2.getText('controls.download'),
	                stateChange: this._onShowClick.bind(this)
	            });

	            this._view = downloadControl;

	            map.gmxControlsManager.add(this._view);
	            map.addControl(this._view);

	            this.initChildren([{
	                index: 'dialog',
	                constructor: DialogComponent
	            }]);

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            var dialogComponent = this.getChildComponent('dialog');

	            dialogComponent.events.on('click:apply', this._onApplyClick.bind(this));
	            dialogComponent.events.on('click:cancel', this._onCancelClick.bind(this));
	        }
	    }, {
	        key: '_onShowClick',
	        value: function _onShowClick() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var dialogComponent = this.getChildComponent('dialog');
	            var hasResults = store.hasResults();
	            var hasFavorites = store.hasFavorites();
	            var hasDrawings = store.hasDrawings();

	            if (hasResults || hasFavorites || hasDrawings) {
	                dialogComponent.show();
	            } else {
	                var notification = Translations$2.getText('download.empty');
	                application.showNotification(notification);
	            }
	        }
	    }, {
	        key: '_onApplyClick',
	        value: function _onApplyClick() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var shapeLoader = application.getAddon('shapeLoader');
	            var dialogComponent = this.getChildComponent('dialog');
	            var hasDrawings = store.hasDrawings();
	            var hasResults = store.hasResults();
	            var hasFavorites = store.hasFavorites();
	            var downloadType = dialogComponent.getType();
	            var downloadName = dialogComponent.getName();

	            var valid = false;
	            switch (downloadType) {

	                case 'borders':
	                    if (hasDrawings) {
	                        valid = true;
	                    }
	                    break;

	                case 'results':
	                case 'rcsv':
	                    if (hasResults) {
	                        valid = true;
	                    }
	                    break;

	                case 'cart':
	                case 'ccsv':
	                case 'quicklooks':
	                    if (hasFavorites) {
	                        valid = true;
	                    }
	                    break;

	                default:
	                    break;

	            }

	            if (valid) {
	                dialogComponent.hide();
	                shapeLoader.download(downloadName, downloadType);
	            } else {
	                var notification = Translations$2.getText('download.noresults');
	                application.showNotification(notification);
	            }
	        }
	    }, {
	        key: '_onCancelClick',
	        value: function _onCancelClick() {

	            var dialogComponent = this.getChildComponent('dialog');

	            dialogComponent.hide();
	        }
	    }]);
	    return DownloadUIElement;
	}(BaseUIElement);

	/* src\js\components\uiElements\iconElements\permalink\components\form\view\View.html generated by Svelte v2.16.1 */

	function data$4() {
		return {
			hidden: true,
			loading: true,
			text: ''
		};
	}
	function translate$3(key) {
		return Translations$2.getText(key);
	}
	var methods$3 = {
		onCancelClick: function onCancelClick() {

			this.set({ hidden: true });
		},
		onCopyClick: function onCopyClick() {

			var input = this.refs.textInput;

			this.fire('copy', input);
			this.set({ hidden: true });
		}
	};

	function create_main_fragment$3(component, ctx) {
		var div,
		    text0,
		    button,
		    text1_value = translate$3('alerts.cancel'),
		    text1;

		function select_block_type(ctx) {
			if (!ctx.loading) return create_if_block$2;
			return create_else_block$1;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		function click_handler(event) {
			component.onCancelClick();
		}

		return {
			c: function c() {
				div = createElement("div");
				if_block.c();
				text0 = createText("\r\n    ");
				button = createElement("button");
				text1 = createText(text1_value);
				addListener(button, "click", click_handler);
				div.className = "dialog-permalink";
				setStyle(div, "display", ctx.hidden ? 'none' : 'block');
				setStyle(div, "top", "45px");
				setStyle(div, "left", "460px");
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				if_block.m(div, null);
				append(div, text0);
				append(div, button);
				append(button, text1);
			},
			p: function p(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(div, text0);
				}

				if (changed.hidden) {
					setStyle(div, "display", ctx.hidden ? 'none' : 'block');
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				if_block.d();
				removeListener(button, "click", click_handler);
			}
		};
	}

	// (8:0) {:else}
	function create_else_block$1(component, ctx) {
		var span,
		    text_value = translate$3('alerts.wait'),
		    text;

		return {
			c: function c() {
				span = createElement("span");
				text = createText(text_value);
				span.className = "permalink-loader";
			},
			m: function m(target, anchor) {
				insert(target, span, anchor);
				append(span, text);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(span);
				}
			}
		};
	}

	// (5:0) {#if !loading}
	function create_if_block$2(component, ctx) {
		var input,
		    text0,
		    button,
		    text1_value = translate$3('alerts.clipboard'),
		    text1;

		function click_handler(event) {
			component.onCopyClick();
		}

		return {
			c: function c() {
				input = createElement("input");
				text0 = createText("\r\n    ");
				button = createElement("button");
				text1 = createText(text1_value);
				setAttribute(input, "type", "text");
				input.value = ctx.text;
				addListener(button, "click", click_handler);
				button.className = "copy-button";
			},
			m: function m(target, anchor) {
				insert(target, input, anchor);
				component.refs.textInput = input;
				insert(target, text0, anchor);
				insert(target, button, anchor);
				append(button, text1);
			},
			p: function p(changed, ctx) {
				if (changed.text) {
					input.value = ctx.text;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(input);
				}

				if (component.refs.textInput === input) component.refs.textInput = null;
				if (detach) {
					detachNode(text0);
					detachNode(button);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	function View$1(options) {
		init(this, options);
		this.refs = {};
		this._state = assign(data$4(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$3(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(View$1.prototype, proto$4);
	assign(View$1.prototype, methods$3);

	var PermalinkFormComponent = function (_BaseComponent) {
	    inherits(PermalinkFormComponent, _BaseComponent);

	    function PermalinkFormComponent() {
	        classCallCheck(this, PermalinkFormComponent);
	        return possibleConstructorReturn(this, (PermalinkFormComponent.__proto__ || Object.getPrototypeOf(PermalinkFormComponent)).apply(this, arguments));
	    }

	    createClass(PermalinkFormComponent, [{
	        key: 'init',
	        value: function init() {

	            var container = createContainer();

	            this._view = new View$1({
	                target: container
	            });

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var view = this.getView();

	            view.on('copy', function (input) {
	                return _this2.events.trigger('click:copy', input);
	            });
	        }
	    }, {
	        key: 'showLoading',
	        value: function showLoading() {

	            var view = this.getView();

	            view.set({
	                hidden: false,
	                loading: true,
	                text: ''
	            });
	        }
	    }, {
	        key: 'showInput',
	        value: function showInput(permalinkId) {

	            var view = this.getView();
	            var preparedUrl = getRootUrl() + '?link=' + permalinkId;

	            view.set({
	                hidden: false,
	                loading: false,
	                text: preparedUrl
	            });
	        }
	    }]);
	    return PermalinkFormComponent;
	}(BaseComponent);

	var PermalinkUIElement = function (_BaseUIElement) {
	        inherits(PermalinkUIElement, _BaseUIElement);

	        function PermalinkUIElement() {
	                classCallCheck(this, PermalinkUIElement);
	                return possibleConstructorReturn(this, (PermalinkUIElement.__proto__ || Object.getPrototypeOf(PermalinkUIElement)).apply(this, arguments));
	        }

	        createClass(PermalinkUIElement, [{
	                key: 'init',
	                value: function init() {

	                        var map = this.getMap();

	                        var permalinkControl = new L.Control.gmxIcon({
	                                id: 'link',
	                                position: 'searchControls',
	                                title: Translations$2.getText('controls.permalink'),
	                                stateChange: this._onShowClick.bind(this)
	                        });

	                        this._view = permalinkControl;

	                        map.gmxControlsManager.add(this._view);
	                        map.addControl(this._view);

	                        this.initChildren([{
	                                index: 'form',
	                                constructor: PermalinkFormComponent
	                        }]);

	                        this._bindEvents();
	                }
	        }, {
	                key: '_bindEvents',
	                value: function _bindEvents() {

	                        var formComponent = this.getChildComponent('form');

	                        formComponent.events.on('click:copy', this._onCopyClick.bind(this));
	                }
	        }, {
	                key: '_onShowClick',
	                value: function _onShowClick() {
	                        var _this2 = this;

	                        var application = this.getApplication();
	                        var appStateManager = application.getAddon('appStateManager');
	                        var formComponent = this.getChildComponent('form');

	                        formComponent.showLoading();

	                        appStateManager.getPermalinkId().then(function (result) {
	                                return formComponent.showInput(result);
	                        }).catch(function (e) {
	                                return _this2._errorHandler(e);
	                        });
	                }
	        }, {
	                key: '_onCopyClick',
	                value: function _onCopyClick(input) {

	                        var application = this.getApplication();
	                        var notificationText = Translations$2.getText('alerts.permalink');

	                        input.focus();
	                        input.select();
	                        document.execCommand('copy');

	                        application.showNotification(notificationText);
	                }
	        }, {
	                key: '_errorHandler',
	                value: function _errorHandler(e) {

	                        var application = this.getApplication();

	                        application.showError(e.toString());

	                        window.console.error(e);
	                }
	        }]);
	        return PermalinkUIElement;
	}(BaseUIElement);

	var iconLayers = createCommonjsModule(function (module) {
	    /*eslint-env commonjs, browser */
	    (function (factory) {
	        if (module.exports) {
	            module.exports = factory(leaflet);
	        } else {
	            window.L.control.iconLayers = factory(window.L);
	            window.L.Control.IconLayers = window.L.control.iconLayers.Constructor;
	        }
	    })(function (L) {
	        function each(o, cb) {
	            for (var p in o) {
	                if (o.hasOwnProperty(p)) {
	                    cb(o[p], p, o);
	                }
	            }
	        }

	        function find(ar, cb) {
	            if (ar.length) {
	                for (var i = 0; i < ar.length; i++) {
	                    if (cb(ar[i])) {
	                        return ar[i];
	                    }
	                }
	            } else {
	                for (var p in ar) {
	                    if (ar.hasOwnProperty(p) && cb(ar[p])) {
	                        return ar[p];
	                    }
	                }
	            }
	        }

	        function first(o) {
	            for (var p in o) {
	                if (o.hasOwnProperty(p)) {
	                    return o[p];
	                }
	            }
	        }

	        function length(o) {
	            var length = 0;
	            for (var p in o) {
	                if (o.hasOwnProperty(p)) {
	                    length++;
	                }
	            }
	            return length;
	        }

	        function prepend(parent, el) {
	            if (parent.children.length) {
	                parent.insertBefore(el, parent.children[0]);
	            } else {
	                parent.appendChild(el);
	            }
	        }

	        var IconLayers = L.Control.extend({

	            includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,
	            _getActiveLayer: function _getActiveLayer() {
	                if (this._activeLayerId) {
	                    return this._layers[this._activeLayerId];
	                } else if (length(this._layers)) {
	                    return first(this._layers);
	                } else {
	                    return null;
	                }
	            },
	            _getPreviousLayer: function _getPreviousLayer() {
	                var activeLayer = this._getActiveLayer();
	                if (!activeLayer) {
	                    return null;
	                } else if (this._previousLayerId) {
	                    return this._layers[this._previousLayerId];
	                } else {
	                    return find(this._layers, function (l) {
	                        return l.id !== activeLayer.id;
	                    }.bind(this)) || null;
	                }
	            },
	            _getInactiveLayers: function _getInactiveLayers() {
	                var ar = [];
	                var activeLayerId = this._getActiveLayer() ? this._getActiveLayer().id : null;
	                var previousLayerId = this._getPreviousLayer() ? this._getPreviousLayer().id : null;
	                each(this._layers, function (l) {
	                    if (l.id !== activeLayerId && l.id !== previousLayerId) {
	                        ar.push(l);
	                    }
	                });
	                return ar;
	            },
	            _arrangeLayers: function _arrangeLayers() {
	                var behaviors = {};
	                behaviors.previous = function () {
	                    var layers = this._getInactiveLayers();
	                    if (this._getActiveLayer()) {
	                        layers.unshift(this._getActiveLayer());
	                    }
	                    if (this._getPreviousLayer()) {
	                        layers.unshift(this._getPreviousLayer());
	                    }
	                    return layers;
	                };
	                return behaviors[this.options.behavior].apply(this, arguments);
	            },
	            _getLayerCellByLayerId: function _getLayerCellByLayerId(id) {
	                var els = this._container.getElementsByClassName('leaflet-iconLayers-layerCell');
	                for (var i = 0; i < els.length; i++) {
	                    if (els[i].getAttribute('data-layerid') == id) {
	                        return els[i];
	                    }
	                }
	            },
	            _createLayerElement: function _createLayerElement(layerObj) {
	                var el = L.DomUtil.create('div', 'leaflet-iconLayers-layer');
	                if (layerObj.title) {
	                    var titleContainerEl = L.DomUtil.create('div', 'leaflet-iconLayers-layerTitleContainer');
	                    var titleEl = L.DomUtil.create('div', 'leaflet-iconLayers-layerTitle');
	                    var checkIconEl = L.DomUtil.create('div', 'leaflet-iconLayers-layerCheckIcon');
	                    titleEl.innerHTML = layerObj.title;
	                    titleContainerEl.appendChild(titleEl);
	                    el.appendChild(titleContainerEl);
	                    el.appendChild(checkIconEl);
	                }
	                if (layerObj.icon) {
	                    el.setAttribute('style', 'background-image: url(\'' + layerObj.icon + '\')');
	                }
	                return el;
	            },
	            _createLayerElements: function _createLayerElements() {
	                var currentRow, layerCell;
	                var layers = this._arrangeLayers();
	                var activeLayerId = this._getActiveLayer() && this._getActiveLayer().id;

	                for (var i = 0; i < layers.length; i++) {
	                    if (i % this.options.maxLayersInRow === 0) {
	                        currentRow = L.DomUtil.create('div', 'leaflet-iconLayers-layersRow');
	                        if (this.options.position.indexOf('bottom') === -1) {
	                            this._container.appendChild(currentRow);
	                        } else {
	                            prepend(this._container, currentRow);
	                        }
	                    }
	                    layerCell = L.DomUtil.create('div', 'leaflet-iconLayers-layerCell');
	                    layerCell.setAttribute('data-layerid', layers[i].id);
	                    if (i !== 0) {
	                        L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_hidden');
	                    }
	                    if (layers[i].id === activeLayerId) {
	                        L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_active');
	                    }
	                    if (this._expandDirection === 'left') {
	                        L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_expandLeft');
	                    } else {
	                        L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_expandRight');
	                    }
	                    layerCell.appendChild(this._createLayerElement(layers[i]));

	                    if (this.options.position.indexOf('right') === -1) {
	                        currentRow.appendChild(layerCell);
	                    } else {
	                        prepend(currentRow, layerCell);
	                    }
	                }
	            },
	            _onLayerClick: function _onLayerClick(e) {
	                e.stopPropagation();
	                var layerId = e.currentTarget.getAttribute('data-layerid');
	                var layer = this._layers[layerId];
	                this.setActiveLayer(layer.layer);
	                this.expand();
	            },
	            _attachEvents: function _attachEvents() {
	                each(this._layers, function (l) {
	                    var e = this._getLayerCellByLayerId(l.id);
	                    if (e) {
	                        e.addEventListener('click', this._onLayerClick.bind(this));
	                    }
	                }.bind(this));
	                var layersRowCollection = this._container.getElementsByClassName('leaflet-iconLayers-layersRow');

	                var onMouseEnter = function (e) {
	                    e.stopPropagation();
	                    this.expand();
	                }.bind(this);

	                var onMouseLeave = function (e) {
	                    e.stopPropagation();
	                    this.collapse();
	                }.bind(this);

	                var stopPropagation = function stopPropagation(e) {
	                    e.stopPropagation();
	                };

	                //TODO Don't make functions within a loop.
	                for (var i = 0; i < layersRowCollection.length; i++) {
	                    var el = layersRowCollection[i];
	                    el.addEventListener('mouseenter', onMouseEnter);
	                    el.addEventListener('mouseleave', onMouseLeave);
	                    el.addEventListener('mousemove', stopPropagation);
	                }
	            },
	            _render: function _render() {
	                this._container.innerHTML = '';
	                this._createLayerElements();
	                this._attachEvents();
	            },
	            _switchMapLayers: function _switchMapLayers() {
	                if (!this._map) {
	                    return;
	                }
	                var activeLayer = this._getActiveLayer();
	                var previousLayer = this._getPreviousLayer();
	                if (previousLayer) {
	                    this._map.removeLayer(previousLayer.layer);
	                } else {
	                    each(this._layers, function (layerObject) {
	                        var layer = layerObject.layer;
	                        this._map.removeLayer(layer);
	                    }.bind(this));
	                }
	                if (activeLayer) {
	                    this._map.addLayer(activeLayer.layer);
	                }
	            },
	            options: {
	                position: 'bottomleft', // one of expanding directions depends on this
	                behavior: 'previous', // may be 'previous', 'expanded' or 'first'
	                expand: 'horizontal', // or 'vertical'
	                autoZIndex: true, // from L.Control.Layers
	                maxLayersInRow: 5,
	                manageLayers: true
	            },
	            initialize: function initialize(layers, options) {
	                if (!L.Util.isArray(arguments[0])) {
	                    // first argument is options
	                    options = layers;
	                    layers = [];
	                }
	                L.setOptions(this, options);
	                this._expandDirection = this.options.position.indexOf('left') != -1 ? 'right' : 'left';
	                if (this.options.manageLayers) {
	                    this.on('activelayerchange', this._switchMapLayers, this);
	                }
	                this.setLayers(layers);
	            },
	            onAdd: function onAdd(map) {
	                this._container = L.DomUtil.create('div', 'leaflet-iconLayers');
	                L.DomUtil.addClass(this._container, 'leaflet-iconLayers_' + this.options.position);
	                this._render();
	                map.on('click', this.collapse, this);
	                if (this.options.manageLayers) {
	                    this._switchMapLayers();
	                }
	                return this._container;
	            },
	            onRemove: function onRemove(map) {
	                map.off('click', this.collapse, this);
	            },
	            setLayers: function setLayers(layers) {
	                this._layers = {};
	                layers.map(function (layer) {
	                    var id = L.stamp(layer.layer);
	                    this._layers[id] = L.extend(layer, {
	                        id: id
	                    });
	                }.bind(this));
	                if (this._container) {
	                    this._render();
	                }
	            },
	            setActiveLayer: function setActiveLayer(layer) {
	                var l = layer && this._layers[L.stamp(layer)];
	                if (!l || l.id === this._activeLayerId) {
	                    return;
	                }
	                this._previousLayerId = this._activeLayerId;
	                this._activeLayerId = l.id;
	                if (this._container) {
	                    this._render();
	                }
	                this.fire('activelayerchange', {
	                    layer: layer
	                });
	            },
	            expand: function expand() {
	                this._arrangeLayers().slice(1).map(function (l) {
	                    var el = this._getLayerCellByLayerId(l.id);
	                    L.DomUtil.removeClass(el, 'leaflet-iconLayers-layerCell_hidden');
	                }.bind(this));
	            },
	            collapse: function collapse() {
	                this._arrangeLayers().slice(1).map(function (l) {
	                    var el = this._getLayerCellByLayerId(l.id);
	                    L.DomUtil.addClass(el, 'leaflet-iconLayers-layerCell_hidden');
	                }.bind(this));
	            }
	        });

	        var iconLayers = function iconLayers(layers, options) {
	            return new IconLayers(layers, options);
	        };

	        iconLayers.Constructor = IconLayers;

	        return iconLayers;
	    });
	});

	var BaseCompositedComponent = function (_BaseComponent) {
	    inherits(BaseCompositedComponent, _BaseComponent);

	    function BaseCompositedComponent(props) {
	        classCallCheck(this, BaseCompositedComponent);

	        var _this = possibleConstructorReturn(this, (BaseCompositedComponent.__proto__ || Object.getPrototypeOf(BaseCompositedComponent)).call(this, props));

	        _this._name = props['name'] || null;
	        return _this;
	    }

	    createClass(BaseCompositedComponent, [{
	        key: 'getChildComponent',
	        value: function getChildComponent(pathString) {

	            var pathList = pathString.split('.');

	            var currentComponent = this;

	            for (var i = 0; i < pathList.length; i++) {

	                var componentToGet = pathList[i];

	                currentComponent = currentComponent['_' + componentToGet + 'Component'];
	            }

	            return currentComponent;
	        }
	    }, {
	        key: 'getParentComponent',
	        value: function getParentComponent() {

	            return this['_parent'];
	        }
	    }, {
	        key: 'initChildren',
	        value: function initChildren() {
	            var _this2 = this;

	            var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];


	            var config = this.getConfig();
	            var preparedConfig = _extends({}, config, {
	                parent: this
	            });

	            components.forEach(function (component) {
	                var index = component.index,
	                    constructor = component.constructor,
	                    _component$config = component.config,
	                    currentConfig = _component$config === undefined ? {} : _component$config;

	                var currentPreparedConfig = _extends({}, preparedConfig, {
	                    name: index,
	                    currentConfig: currentConfig
	                });
	                var fullName = '_' + index + 'Component';

	                _this2[fullName] = new constructor(currentPreparedConfig);

	                _this2[fullName].init();
	            });
	        }
	    }, {
	        key: 'isSimple',
	        value: function isSimple() {

	            return false;
	        }
	    }]);
	    return BaseCompositedComponent;
	}(BaseComponent);

	/* src\js\components\uiElements\widgetElements\baseLayers\components\legend\view\View.html generated by Svelte v2.16.1 */

	function data$5() {
		return {
			hidden: true,
			left: 0
		};
	}
	function create_main_fragment$4(component, ctx) {
		var div;

		return {
			c: function c() {
				div = createElement("div");
				setStyle(div, "left", "" + ctx.left + "px");
				setStyle(div, "display", ctx.hidden ? 'none' : 'block');
				div.className = "iconlayers-legend";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.left) {
					setStyle(div, "left", "" + ctx.left + "px");
				}

				if (changed.hidden) {
					setStyle(div, "display", ctx.hidden ? 'none' : 'block');
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}
			}
		};
	}

	function View$2(options) {
		init(this, options);
		this._state = assign(data$5(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$4(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(View$2.prototype, proto$4);

	var ResultListComponent = function (_BaseComponent) {
	    inherits(ResultListComponent, _BaseComponent);

	    function ResultListComponent() {
	        classCallCheck(this, ResultListComponent);
	        return possibleConstructorReturn(this, (ResultListComponent.__proto__ || Object.getPrototypeOf(ResultListComponent)).apply(this, arguments));
	    }

	    createClass(ResultListComponent, [{
	        key: 'init',
	        value: function init() {

	            this._view = new View$2({
	                target: createContainer()
	            });
	        }
	    }, {
	        key: 'shift',
	        value: function shift(width) {

	            this._view.set({
	                left: width
	            });
	        }
	    }, {
	        key: 'show',
	        value: function show() {

	            this._view.set({
	                hidden: false
	            });
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {

	            this._view.set({
	                hidden: true
	            });
	        }
	    }]);
	    return ResultListComponent;
	}(BaseComponent);

	var BaseLayersComponent = function (_BaseCompositedCompon) {
	    inherits(BaseLayersComponent, _BaseCompositedCompon);

	    function BaseLayersComponent() {
	        classCallCheck(this, BaseLayersComponent);
	        return possibleConstructorReturn(this, (BaseLayersComponent.__proto__ || Object.getPrototypeOf(BaseLayersComponent)).apply(this, arguments));
	    }

	    createClass(BaseLayersComponent, [{
	        key: 'init',
	        value: function init() {

	            var map = this.getMap();

	            this._setLanguage();
	            this._setLayers();

	            var baseLayersControl = new iconLayers(this._layers, {
	                id: 'iconLayers'
	            });

	            this._view = baseLayersControl;

	            map.gmxControlsManager.add(baseLayersControl);
	            map.addControl(baseLayersControl);

	            this.initChildren([{
	                index: 'legend',
	                constructor: ResultListComponent
	            }]);

	            this._setActiveLayer();

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var globalEvents = application.getAppEvents();
	            var store = application.getStore();
	            var view = this.getView();

	            globalEvents.on('system:uiElements:created', function () {
	                return _this2._shiftControl();
	            });
	            store.on('currentTab:changeMeta', function () {
	                return _this2._shiftControl();
	            });
	            store.on('activeLayer:change', function () {
	                return _this2._showLegend();
	            });
	            store.on('activeLayer:changeFromPermalink', function () {
	                return _this2._setGmxIconLayer();
	            });
	            view.on('activelayerchange', this._setActiveLayer.bind(this));
	        }
	    }, {
	        key: '_setLanguage',
	        value: function _setLanguage() {

	            this._language = Translations$2.getLanguage() || 'rus';
	        }
	    }, {
	        key: '_setLayers',
	        value: function _setLayers() {
	            var _this3 = this;

	            var map = this.getMap();
	            var gmxBaseLayersManager = map.gmxBaseLayersManager;

	            var activeIds = gmxBaseLayersManager.getActiveIDs();

	            var layers = activeIds.map(function (id) {
	                var layer = gmxBaseLayersManager.get(id);
	                if (!layer) {
	                    return null;
	                } else {
	                    return {
	                        layer: layer,
	                        icon: layer.options.icon,
	                        title: layer.options[_this3._language]
	                    };
	                }
	            });

	            this._layers = layers.filter(function (e) {
	                return e;
	            });
	        }
	    }, {
	        key: '_shiftControl',
	        value: function _shiftControl() {
	            var _this4 = this;

	            setTimeout(function () {
	                var map = _this4.getMap();
	                var application = _this4.getApplication();
	                var sideBarComponent = application.getUiElement('sidebar');
	                var legendComponent = _this4.getChildComponent('legend');

	                var _sideBarComponent$get = sideBarComponent.getView().getContainer().getBoundingClientRect(),
	                    width = _sideBarComponent$get.width;

	                var correctWidth = width + 30;

	                map.gmxControlsManager.get('iconLayers').getContainer().style.left = correctWidth + 'px';
	                legendComponent.shift(correctWidth);
	            }, 0);
	        }
	    }, {
	        key: '_setActiveLayer',
	        value: function _setActiveLayer() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var view = this.getView();

	            var _view$_getActiveLayer = view._getActiveLayer(),
	                _view$_getActiveLayer2 = _view$_getActiveLayer.layer,
	                layer = _view$_getActiveLayer2 === undefined ? {} : _view$_getActiveLayer2;

	            store.setMetaItem('activeLayer', layer['id'], ['activeLayer:change']);
	        }
	    }, {
	        key: '_setGmxIconLayer',
	        value: function _setGmxIconLayer() {

	            var application = this.getApplication();

	            var _getMap = this.getMap(),
	                gmxBaseLayersManager = _getMap.gmxBaseLayersManager;

	            var store = application.getStore();
	            var view = this.getView();
	            var activeLayer = store.getMetaItem('activeLayer');

	            var activeLayerObject = gmxBaseLayersManager.get(activeLayer);
	            view.setActiveLayer(activeLayerObject);
	        }
	    }, {
	        key: '_showLegend',
	        value: function _showLegend() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var activeLayer = store.getMetaItem('activeLayer');
	            var legendComponent = this.getChildComponent('legend');

	            if (activeLayer === 'heatmap2018') {
	                legendComponent.show();
	            } else {
	                legendComponent.hide();
	            }
	        }
	    }]);
	    return BaseLayersComponent;
	}(BaseCompositedComponent);

	var BaseLayesrUIElement = function (_BaseUIElement) {
	    inherits(BaseLayesrUIElement, _BaseUIElement);

	    function BaseLayesrUIElement() {
	        classCallCheck(this, BaseLayesrUIElement);
	        return possibleConstructorReturn(this, (BaseLayesrUIElement.__proto__ || Object.getPrototypeOf(BaseLayesrUIElement)).apply(this, arguments));
	    }

	    createClass(BaseLayesrUIElement, [{
	        key: 'init',
	        value: function init() {

	            var map = this.getMap();

	            var zoomControl = L.control.gmxZoom({
	                position: 'bottomright'
	            });
	            this._view = zoomControl;

	            map.gmxControlsManager.add(this._view);
	            map.addControl(this._view);
	        }
	    }]);
	    return BaseLayesrUIElement;
	}(BaseUIElement);

	var ResultView = function (_EventTarget) {
	    inherits(ResultView, _EventTarget);

	    function ResultView(_ref) {
	        var input = _ref.input,
	            _ref$replaceInput = _ref.replaceInput,
	            replaceInput = _ref$replaceInput === undefined ? false : _ref$replaceInput;
	        classCallCheck(this, ResultView);

	        var _this = possibleConstructorReturn(this, (ResultView.__proto__ || Object.getPrototypeOf(ResultView)).call(this));

	        _this._input = input;
	        _this.index = -1;
	        _this.count = 0;
	        _this._item = null;
	        _this._inputText = '';
	        _this._replaceInput = replaceInput;
	        _this._list = L.DomUtil.create('div');
	        _this._list.setAttribute('class', 'leaflet-ext-search-list noselect');

	        _this.allowNavigation = true;

	        _this._list.style.top = _this._input.offsetTop + _this._input.offsetHeight + 2 + 'px';
	        _this._list.style.left = _this._input.offsetLeft + 'px';

	        _this._handleKey = _this._handleKey.bind(_this);
	        _this._input.addEventListener('keydown', _this._handleKey);

	        _this._handleInputClick = _this._handleInputClick.bind(_this);
	        _this._input.addEventListener('click', _this._handleInputClick);

	        _this._handleFocus = _this._handleFocus.bind(_this);
	        _this._input.addEventListener('focus', _this._handleFocus);
	        _this._list.addEventListener('keydown', _this._handleKey);

	        _this._handleWheel = _this._handleWheel.bind(_this);
	        _this._list.addEventListener('wheel', _this._handleWheel);
	        L.DomEvent.disableClickPropagation(_this._list).disableScrollPropagation(_this._list);
	        // this._list.addEventListener('mousewheel', this._handleWheel.bind(this));
	        // this._list.addEventListener('MozMousePixelScroll', this._handleWheel.bind(this));       
	        _this._input.parentElement.appendChild(_this._list);

	        _this._handleChange = _this._handleChange.bind(_this);
	        _this._input.addEventListener('input', _this._handleChange);
	        return _this;
	    }

	    createClass(ResultView, [{
	        key: '_handleInputClick',
	        value: function _handleInputClick(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: '_handleFocus',
	        value: function _handleFocus(e) {
	            if (this.index >= 0) {
	                var el = this._list.querySelector('[tabindex="' + this.index + '"]');
	                L.DomUtil.removeClass(el, 'leaflet-ext-search-list-selected');
	            }
	            this.index = -1;
	            this._item = null;
	        }
	    }, {
	        key: '_handleChange',
	        value: function _handleChange(e) {
	            this._inputText = this._input.value;
	        }
	    }, {
	        key: '_handleWheel',
	        value: function _handleWheel(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: '_handleKey',
	        value: function _handleKey(e) {
	            if (this.listVisible()) {
	                switch (e.keyCode) {
	                    // ArroLeft / ArrowRight
	                    case 37:
	                    case 39:
	                        e.stopPropagation();
	                        break;
	                    // ArrowDown
	                    case 40:
	                        e.preventDefault();
	                        e.stopPropagation();
	                        if (this.allowNavigation) {
	                            if (this.index < 0) {
	                                this.index = 0;
	                            } else if (0 <= this.index && this.index < this.count - 1) {
	                                var _el = this._list.querySelector('[tabindex="' + this.index + '"]');
	                                L.DomUtil.removeClass(_el, 'leaflet-ext-search-list-selected');
	                                ++this.index;
	                            } else {
	                                var _el2 = this._list.querySelector('[tabindex="' + this.index + '"]');
	                                L.DomUtil.removeClass(_el2, 'leaflet-ext-search-list-selected');
	                                this.index = this.count - 1;
	                            }
	                            var el = this._list.querySelector('[tabindex="' + this.index + '"]');
	                            L.DomUtil.addClass(el, 'leaflet-ext-search-list-selected');
	                            this.selectItem(this.index);
	                            el.focus();
	                        }
	                        break;
	                    // ArrowUp
	                    case 38:
	                        e.preventDefault();
	                        e.stopPropagation();
	                        if (this.allowNavigation) {
	                            if (this.index > 0) {
	                                var _el3 = this._list.querySelector('[tabindex="' + this.index + '"]');
	                                L.DomUtil.removeClass(_el3, 'leaflet-ext-search-list-selected');
	                                --this.index;
	                                _el3 = this._list.querySelector('[tabindex="' + this.index + '"]');
	                                L.DomUtil.addClass(_el3, 'leaflet-ext-search-list-selected');
	                                this.selectItem(this.index);
	                                _el3.focus();
	                            } else if (this.index === 0) {
	                                this._input.focus();
	                                this._input.value = this._inputText;
	                            }
	                        }
	                        break;
	                    // Enter
	                    case 13:
	                        if (this.index < 0 && this._input.value) {
	                            var text = this._input.value;
	                            this._input.focus();
	                            this._input.setSelectionRange(text.length, text.length);
	                            this.hide();

	                            var event = document.createEvent('Event');
	                            event.initEvent('suggestions:confirm', false, false);
	                            event.detail = text;
	                            this.dispatchEvent(event);
	                        } else {
	                            this.complete(this.index);
	                        }
	                        break;
	                    // Escape
	                    case 27:
	                        if (this.index < 0) {
	                            this.hide();
	                        }
	                        this._input.focus();
	                        this._input.value = this._inputText;
	                        break;
	                    default:
	                        break;
	                }
	            } else {
	                if (e.keyCode === 13 && this._input.value) {
	                    var _text = this._input.value;
	                    this._input.setSelectionRange(_text.length, _text.length);

	                    var _event = document.createEvent('Event');
	                    _event.initEvent('suggestions:confirm', false, false);
	                    _event.detail = _text;
	                    this.dispatchEvent(_event);
	                } else if (e.keyCode === 27) {
	                    this._input.value = '';
	                    this.index = -1;
	                    this._input.focus();
	                }
	            }
	        }
	    }, {
	        key: 'listVisible',
	        value: function listVisible() {
	            return this.count > 0 && this._list.style.display !== 'none';
	        }
	    }, {
	        key: 'selectItem',
	        value: function selectItem(i) {
	            this._item = this._items[i];
	            var text = this._item.name;
	            if (this._replaceInput) {
	                this._input.value = text;
	                this._input.setSelectionRange(text.length, text.length);
	            }
	        }
	    }, {
	        key: '_handleClick',
	        value: function _handleClick(i, e) {
	            e.preventDefault();
	            this.complete(i);
	        }
	    }, {
	        key: 'complete',
	        value: function complete(i) {
	            var item = i >= 0 ? this._items[i] : this._item ? this._item : null;
	            if (item) {
	                this._item = item;
	                this.index = -1;
	                var text = item.name;
	                if (this._replaceInput) {
	                    this._input.value = text;
	                    this._input.setSelectionRange(text.length, text.length);
	                }
	                this._input.focus();
	                this.hide();

	                var event = document.createEvent('Event');
	                event.initEvent('suggestions:select', false, false);
	                event.detail = item;
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: 'show',
	        value: function show(items, highlight) {
	            if (items.length) {
	                this._item = null;
	                this.index = -1;
	                this._items = items;
	                var html = '<ul>' + this._items.filter(function (x) {
	                    return x.name && x.name.length;
	                }).map(function (x, i) {
	                    var name = '<span class="leaflet-ext-search-list-item-normal">' + x.name + '</span>';
	                    if (highlight && highlight.length) {
	                        var start = x.name.toLowerCase().indexOf(highlight.toLowerCase());
	                        if (start != -1) {
	                            var head = x.name.substr(0, start);
	                            if (head.length) {
	                                head = '<span class="leaflet-ext-search-list-item-normal">' + head + '</span>';
	                            }
	                            var tail = x.name.substr(start + highlight.length);
	                            if (tail.length) {
	                                tail = '<span class="leaflet-ext-search-list-item-normal">' + tail + '</span>';
	                            }
	                            name = head + '<span class="leaflet-ext-search-list-item-highlight">' + highlight + '</span>' + tail;
	                        }
	                    }
	                    return '<li tabindex=' + i + '>' + name + '</li>';
	                }, []).join('') + '</ul>';

	                this._list.innerHTML = html;
	                var elements = this._list.querySelectorAll('li');
	                for (var i = 0; i < elements.length; ++i) {
	                    elements[i].addEventListener('click', this._handleClick.bind(this, i));
	                }

	                this.count = elements.length;
	                this._list.style.display = 'block';
	            }
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this._list.style.display = 'none';
	        }
	    }]);
	    return ResultView;
	}(EventTarget);

	var chain$1 = function chain(tasks, state) {
	    return tasks.reduce(function (prev, next) {
	        return prev.then(next);
	    }, new Promise(function (resolve, reject) {
	        return resolve(state);
	    }));
	};

	var SearchWidget = function (_EventTarget) {
	    inherits(SearchWidget, _EventTarget);

	    function SearchWidget(container, _ref) {
	        var placeHolder = _ref.placeHolder,
	            providers = _ref.providers,
	            _ref$suggestionTimeou = _ref.suggestionTimeout,
	            suggestionTimeout = _ref$suggestionTimeou === undefined ? 1000 : _ref$suggestionTimeou,
	            _ref$suggestionLimit = _ref.suggestionLimit,
	            suggestionLimit = _ref$suggestionLimit === undefined ? 10 : _ref$suggestionLimit,
	            _ref$fuzzySearchLimit = _ref.fuzzySearchLimit,
	            fuzzySearchLimit = _ref$fuzzySearchLimit === undefined ? 1000 : _ref$fuzzySearchLimit,
	            _ref$retrieveManyOnEn = _ref.retrieveManyOnEnter,
	            retrieveManyOnEnter = _ref$retrieveManyOnEn === undefined ? false : _ref$retrieveManyOnEn,
	            _ref$replaceInputOnEn = _ref.replaceInputOnEnter,
	            replaceInputOnEnter = _ref$replaceInputOnEn === undefined ? false : _ref$replaceInputOnEn;
	        classCallCheck(this, SearchWidget);

	        var _this = possibleConstructorReturn(this, (SearchWidget.__proto__ || Object.getPrototypeOf(SearchWidget)).call(this));

	        _this._container = container;
	        _this._allowSuggestion = true;
	        _this._providers = providers;
	        _this._suggestionTimeout = suggestionTimeout;
	        _this._suggestionLimit = suggestionLimit;
	        _this._fuzzySearchLimit = fuzzySearchLimit;
	        _this._retrieveManyOnEnter = retrieveManyOnEnter;
	        _this._replaceInputOnEnter = replaceInputOnEnter;

	        _this._container.classList.add('leaflet-ext-search');
	        _this._container.innerHTML = '<input type="text" value="" placeholder="' + placeHolder + '" /><span class="leaflet-ext-search-button"></span>';
	        _this._input = _this._container.querySelector('input');

	        _this._handleChange = _this._handleChange.bind(_this);
	        _this._input.addEventListener('input', _this._handleChange);

	        _this._handleMouseMove = _this._handleMouseMove.bind(_this);
	        _this._input.addEventListener('mousemove', _this._handleMouseMove);
	        _this._input.addEventListener('dragstart', _this._handleMouseMove);
	        _this._input.addEventListener('drag', _this._handleMouseMove);

	        _this._handleSearch = _this._handleSearch.bind(_this);

	        _this._button = _this._container.querySelector('.leaflet-ext-search-button');
	        _this._button.addEventListener('click', _this._handleSearch);

	        _this.results = new ResultView({ input: _this._input, replaceInput: _this._replaceInputOnEnter });

	        _this._search = _this._search.bind(_this);
	        _this._selectItem = _this._selectItem.bind(_this);

	        _this.results.addEventListener('suggestions:confirm', function (e) {
	            var event = document.createEvent('Event');
	            event.initEvent('suggestions:confirm', false, false);
	            event.detail = e.detail;
	            _this.dispatchEvent(event);
	            _this._search(e);
	        });
	        _this.results.addEventListener('suggestions:select', _this._selectItem);

	        // map.on ('click', this.results.hide.bind(this.results));
	        // map.on ('dragstart', this.results.hide.bind(this.results));
	        return _this;
	    }

	    createClass(SearchWidget, [{
	        key: '_suggest',
	        value: function _suggest(text) {
	            var _this2 = this;

	            this.results.allowNavigation = false;
	            var tasks = this._providers.filter(function (provider) {
	                return provider.showSuggestion;
	            }).map(function (provider) {
	                return function (state) {
	                    return new Promise(function (resolve) {
	                        if (state.completed) {
	                            resolve(state);
	                        } else {
	                            provider.find(text, _this2._suggestionLimit, false, false).then(function (response) {
	                                state.completed = response.length > 0;
	                                state.response = state.response.concat(response);
	                                resolve(state);
	                            }).catch(function (e) {
	                                return console.log(e);
	                            });
	                        }
	                    });
	                };
	            });
	            chain$1(tasks, { completed: false, response: [] }).then(function (state) {
	                _this2.results.show(state.response, text.trim());
	                _this2.results.allowNavigation = true;
	            });
	        }
	    }, {
	        key: '_handleChange',
	        value: function _handleChange(e) {
	            var _this3 = this;

	            if (this._input.value.length) {
	                if (this._allowSuggestion) {
	                    this._allowSuggestion = false;
	                    this._timer = setTimeout(function () {
	                        clearTimeout(_this3._timer);
	                        _this3._allowSuggestion = true;
	                        var text = _this3._input.value;
	                        _this3._suggest(text);
	                    }, this._suggestionTimeout);
	                }
	            } else {
	                this.results.hide();
	            }
	        }
	    }, {
	        key: '_handleMouseMove',
	        value: function _handleMouseMove(e) {
	            e.stopPropagation();
	            e.preventDefault();
	        }
	    }, {
	        key: '_search',
	        value: function _search(e) {
	            var _this4 = this;

	            var text = e.detail;
	            var tasks = this._providers.filter(function (provider) {
	                return provider.showOnEnter;
	            }).map(function (provider) {
	                return function (state) {
	                    return new Promise(function (resolve) {
	                        if (state.completed) {
	                            resolve(state);
	                        } else {
	                            provider.find(text, _this4._retrieveManyOnEnter ? _this4._fuzzySearchLimit : 1, true, true).then(function (response) {
	                                state.completed = response.length > 0;
	                                state.response = state.response.concat(response);
	                                resolve(state);
	                            }).catch(function (e) {
	                                console.log(e);
	                                resolve(state);
	                            });
	                        }
	                    });
	                };
	            });

	            chain$1(tasks, { completed: false, response: [] }).then(function (state) {
	                // if(state.response.length > 0 && !this._retrieveManyOnEnter){
	                //     let item = state.response[0];
	                //     item.provider
	                //     .fetch(item.properties)
	                //     .then(response => {});                    
	                // }
	            });

	            this.results && this.results.hide();
	        }
	    }, {
	        key: '_selectItem',
	        value: function _selectItem(e) {
	            var item = e.detail;
	            return item.provider.fetch(item.properties);
	        }
	    }, {
	        key: '_handleSearch',
	        value: function _handleSearch(e) {
	            e.stopPropagation();
	            this._search({ detail: this._input.value });
	        }
	    }, {
	        key: 'setText',
	        value: function setText(text) {
	            this._input.value = text;
	        }
	    }, {
	        key: 'setPlaceHolder',
	        value: function setPlaceHolder(value) {
	            this._input.placeholder = value;
	        }
	    }]);
	    return SearchWidget;
	}(EventTarget);

	var SearchControl = L.Control.extend({
	    includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,
	    initialize: function initialize(options) {
	        L.setOptions(this, options);
	        this._allowSuggestion = true;
	        this.options.suggestionTimeout = this.options.suggestionTimeout || 1000;
	        this.options.suggestionLimit = this.options.suggestionLimit || 10;
	    },
	    onAdd: function onAdd(map) {
	        this._container = L.DomUtil.create('div', 'leaflet-ext-search');
	        this._widget = new SearchWidget(this._container, this.options);
	        map.on('click', this._widget.results.hide.bind(this._widget.results));
	        map.on('dragstart', this._widget.results.hide.bind(this._widget.results));
	        return this._container;
	    },
	    addTo: function addTo(map) {
	        L.Control.prototype.addTo.call(this, map);
	        if (this.options.addBefore) {
	            this.addBefore(this.options.addBefore);
	        }
	        return this;
	    },

	    addBefore: function addBefore(id) {
	        var parentNode = this._parent && this._parent._container;
	        if (!parentNode) {
	            parentNode = this._map && this._map._controlCorners[this.getPosition()];
	        }
	        if (!parentNode) {
	            this.options.addBefore = id;
	        } else {
	            for (var i = 0, len = parentNode.childNodes.length; i < len; i++) {
	                var it = parentNode.childNodes[i];
	                if (id === it._id) {
	                    parentNode.insertBefore(this._container, it);
	                    break;
	                }
	            }
	        }
	        return this;
	    },

	    setText: function setText(text) {
	        this._widget.setText(text);
	    },
	    setPlaceHolder: function setPlaceHolder(value) {
	        this._widget.setPlaceHolder(value);
	    }
	});

	var OsmDataProvider = function (_EventTarget) {
	    inherits(OsmDataProvider, _EventTarget);

	    function OsmDataProvider(_ref) {
	        var serverBase = _ref.serverBase;
	        classCallCheck(this, OsmDataProvider);

	        var _this = possibleConstructorReturn(this, (OsmDataProvider.__proto__ || Object.getPrototypeOf(OsmDataProvider)).call(this));

	        _this._serverBase = serverBase;
	        _this.showSuggestion = true;
	        _this.showOnSelect = true;
	        _this.showOnEnter = true;
	        _this.find = _this.find.bind(_this);
	        _this.fetch = _this.fetch.bind(_this);
	        _this._convertGeometry = _this._convertGeometry.bind(_this);

	        _this._key = window.KOSMOSNIMKI_SESSION_KEY == null || window.KOSMOSNIMKI_SESSION_KEY == 'INVALID' ? '' : '&key=' + window.KOSMOSNIMKI_SESSION_KEY;
	        return _this;
	    }

	    createClass(OsmDataProvider, [{
	        key: '_convertGeometry',
	        value: function _convertGeometry(geometry) {
	            switch (geometry.type.toUpperCase()) {
	                case 'POINT':
	                    geometry.type = 'Point';
	                    break;
	                case 'POLYGON':
	                    geometry.type = 'Polygon';
	                    break;
	                case 'MULTIPOLYGON':
	                    geometry.type = 'MultiPolygon';
	                    break;
	                case 'LINESTRING':
	                case 'POLYLINE':
	                    geometry.type = 'LineString';
	                    break;
	                case 'MULTILINESTRING':
	                    geometry.type = 'MultiLineString';
	                    break;
	                default:
	                    throw 'Unknown WKT type';
	            }
	            return geometry;
	        }
	    }, {
	        key: 'fetch',
	        value: function (_fetch) {
	            function fetch(_x) {
	                return _fetch.apply(this, arguments);
	            }

	            fetch.toString = function () {
	                return _fetch.toString();
	            };

	            return fetch;
	        }(function (obj) {
	            var _this2 = this;

	            var query = 'WrapStyle=None&RequestType=ID&ID=' + obj.ObjCode + '&TypeCode=' + obj.TypeCode + '&UseOSM=1';
	            var req = new Request(this._serverBase + '/SearchObject/SearchAddress.ashx?' + query + this._key);
	            var headers = new Headers();
	            headers.append('Content-Type', 'application/json');
	            var init = {
	                method: 'GET',
	                mode: 'cors',
	                credentials: 'include',
	                cache: 'default'
	            };
	            return new Promise(function (resolve, reject) {
	                fetch(req, init).then(function (response) {
	                    return response.json();
	                }).then(function (json) {
	                    if (json.Status === 'ok') {
	                        var rs = json.Result.reduce(function (a, x) {
	                            return a.concat(x.SearchResult);
	                        }, []).map(function (x) {
	                            var g = _this2._convertGeometry(x.Geometry);
	                            var props = Object.keys(x).filter(function (k) {
	                                return k !== 'Geometry';
	                            }).reduce(function (a, k) {
	                                a[k] = x[k];
	                                return a;
	                            }, {});
	                            return {
	                                feature: {
	                                    type: 'Feature',
	                                    geometry: g,
	                                    properties: props
	                                },
	                                provider: _this2,
	                                query: obj
	                            };
	                        });
	                        var event = document.createEvent('Event');
	                        event.initEvent('fetch', false, false);
	                        event.detail = rs;
	                        _this2.dispatchEvent(event);
	                        resolve(rs);
	                    } else {
	                        reject(json);
	                    }
	                }).catch(function (response) {
	                    return reject(response);
	                });
	            });
	        })
	    }, {
	        key: 'find',
	        value: function find(value, limit, strong, retrieveGeometry) {
	            var _this3 = this;

	            return new Promise(function (resolve, reject) {
	                if (value || value.trim()) {
	                    var _strong = Boolean(strong) ? 1 : 0;
	                    var _withoutGeometry = Boolean(retrieveGeometry) ? 0 : 1;
	                    var query = 'WrapStyle=None&RequestType=SearchObject&IsStrongSearch=' + _strong + '&WithoutGeometry=' + _withoutGeometry + '&UseOSM=1&Limit=' + limit + '&SearchString=' + encodeURIComponent(value);
	                    var req = new Request(_this3._serverBase + '/SearchObject/SearchAddress.ashx?' + query + _this3._key);
	                    var headers = new Headers();
	                    headers.append('Content-Type', 'application/json');
	                    var init = {
	                        method: 'GET',
	                        mode: 'cors',
	                        credentials: 'include',
	                        cache: 'default'
	                    };
	                    fetch(req, init).then(function (response) {
	                        return response.json();
	                    }).then(function (json) {
	                        if (json.Status === 'ok') {
	                            var rs = json.Result.reduce(function (a, x) {
	                                return a.concat(x.SearchResult);
	                            }, []).map(function (x) {
	                                if (retrieveGeometry && x.Geometry) {
	                                    var g = _this3._convertGeometry(x.Geometry);
	                                    var props = Object.keys(x).filter(function (k) {
	                                        return k !== 'Geometry';
	                                    }).reduce(function (a, k) {
	                                        a[k] = x[k];
	                                        return a;
	                                    }, {});
	                                    return {
	                                        name: x.ObjNameShort,
	                                        feature: {
	                                            type: 'Feature',
	                                            geometry: g,
	                                            properties: props
	                                        },
	                                        properties: props,
	                                        provider: _this3,
	                                        query: value
	                                    };
	                                } else {
	                                    return {
	                                        name: x.ObjNameShort,
	                                        properties: x,
	                                        provider: _this3,
	                                        query: value
	                                    };
	                                }
	                            });
	                            if (strong && retrieveGeometry) {
	                                var event = document.createEvent('Event');
	                                event.initEvent('fetch', false, false);
	                                event.detail = rs;
	                                _this3.dispatchEvent(event);
	                            }
	                            resolve(rs);
	                        } else {
	                            reject(json);
	                        }
	                    }).catch(function (response) {
	                        return reject(response);
	                    });
	                } else {
	                    reject('Empty string');
	                }
	            });
	        }
	    }]);
	    return OsmDataProvider;
	}(EventTarget);

	var CoordinatesDataProvider = function (_EventTarget) {
	    inherits(CoordinatesDataProvider, _EventTarget);

	    function CoordinatesDataProvider() {
	        classCallCheck(this, CoordinatesDataProvider);

	        var _this = possibleConstructorReturn(this, (CoordinatesDataProvider.__proto__ || Object.getPrototypeOf(CoordinatesDataProvider)).call(this));

	        _this.showSuggestion = false;
	        _this.showOnSelect = false;
	        _this.showOnEnter = true;
	        _this.fetch = _this.fetch.bind(_this);
	        _this.find = _this.find.bind(_this);

	        _this.rxF = new RegExp('^\\s*\\-?(\\d+(\\.\\d+)?)(\\s+[N|S])?(,\\s*|\\s+)\\-?(\\d+(\\.\\d+)?)(\\s+[E|W])?');
	        _this.rxD = new RegExp('^\\s*(\\d{1,2})[\\s|\\u00b0](\\d{1,2})[\\s|\\u0027](\\d{1,2}\\.\\d+)\\u0022?(\\s+[N|S])?,?\\s+(\\d{1,2})[\\s|\\u00b0](\\d{1,2})[\\s|\\u0027](\\d{1,2}\\.\\d+)\\u0022?(\\s+[E|W])?');
	        return _this;
	    }

	    createClass(CoordinatesDataProvider, [{
	        key: '_parseCoordinates',
	        value: function _parseCoordinates(value) {
	            var m = this.rxD.exec(value);
	            if (Array.isArray(m) && m.length === 9) {
	                return this._parseDegrees([m[1], m[2], m[3], m[5], m[6], m[7]].map(function (x) {
	                    return parseFloat(x);
	                }));
	            }
	            m = this.rxF.exec(value);
	            if (Array.isArray(m) && m.length === 8) {
	                return { type: 'Point', coordinates: [parseFloat(m[5]), parseFloat(m[1])] };
	            }

	            return null;
	        }
	    }, {
	        key: '_parseDegrees',
	        value: function _parseDegrees(_ref) {
	            var _ref2 = slicedToArray(_ref, 6),
	                latDeg = _ref2[0],
	                latMin = _ref2[1],
	                latSec = _ref2[2],
	                lngDeg = _ref2[3],
	                lngMin = _ref2[4],
	                lngSec = _ref2[5];

	            return { type: 'Point', coordinates: [lngDeg + lngMin / 60 + lngSec / 3600, latDeg + latMin / 60 + latSec / 3600] };
	        }
	    }, {
	        key: 'fetch',
	        value: function fetch(value) {
	            return new Promise(function (resolve) {
	                return resolve([]);
	            });
	        }
	    }, {
	        key: 'find',
	        value: function find(value, limit, strong, retrieveGeometry) {
	            var _this2 = this;

	            var g = this._parseCoordinates(value);
	            return new Promise(function (resolve) {
	                var result = { feature: { type: 'Feature', geometry: g, properties: {} }, provider: _this2, query: value };
	                if (g) {
	                    var event = document.createEvent('Event');
	                    event.initEvent('fetch', false, false);
	                    event.detail = result;
	                    _this2.dispatchEvent(event);
	                }
	                resolve(g ? [result] : []);
	            });
	        }
	    }]);
	    return CoordinatesDataProvider;
	}(EventTarget);

	var CadastreDataProvider = function (_EventTarget) {
	    inherits(CadastreDataProvider, _EventTarget);

	    function CadastreDataProvider(_ref) {
	        var serverBase = _ref.serverBase,
	            tolerance = _ref.tolerance;
	        classCallCheck(this, CadastreDataProvider);

	        var _this = possibleConstructorReturn(this, (CadastreDataProvider.__proto__ || Object.getPrototypeOf(CadastreDataProvider)).call(this));

	        _this._serverBase = serverBase;
	        _this._tolerance = tolerance;
	        _this.showSuggestion = true;
	        _this.showOnSelect = false;
	        _this.showOnEnter = true;
	        _this._cadastreLayers = [{ id: 1, title: 'Участок', reg: /^\d\d:\d+:\d+:\d+$/ }, { id: 2, title: 'Квартал', reg: /^\d\d:\d+:\d+$/ }, { id: 3, title: 'Район', reg: /^\d\d:\d+$/ }, { id: 4, title: 'Округ', reg: /^\d\d$/ }, { id: 5, title: 'ОКС', reg: /^\d\d:\d+:\d+:\d+:\d+$/ }, { id: 10, title: 'ЗОУИТ', reg: /^\d+\.\d+\.\d+/
	            // ,
	            // {id: 7, title: 'Границы', 	reg: /^\w+$/},
	            // {id: 6, title: 'Тер.зоны', 	reg: /^\w+$/},
	            // {id: 12, title: 'Лес', 		reg: /^\w+$/},
	            // {id: 13, title: 'Красные линии', 		reg: /^\w+$/},
	            // {id: 15, title: 'СРЗУ', 	reg: /^\w+$/},
	            // {id: 16, title: 'ОЭЗ', 		reg: /^\w+$/},
	            // {id: 9, title: 'ГОК', 		reg: /^\w+$/},
	            // {id: 10, title: 'ЗОУИТ', 	reg: /^\w+$/}
	            // /[^\d\:]/g,
	            // /\d\d:\d+$/,
	            // /\d\d:\d+:\d+$/,
	            // /\d\d:\d+:\d+:\d+$/
	        }];
	        return _this;
	    }

	    createClass(CadastreDataProvider, [{
	        key: 'getCadastreLayer',
	        value: function getCadastreLayer(str, type) {
	            str = str.trim();
	            for (var i = 0, len = this._cadastreLayers.length; i < len; i++) {
	                var it = this._cadastreLayers[i];
	                if (it.id === type) {
	                    return it;
	                }
	                if (it.reg.exec(str)) {
	                    return it;
	                }
	            }
	            return this._cadastreLayers[0];
	        }
	    }, {
	        key: 'find',
	        value: function find(value, limit, strong, retrieveGeometry) {
	            var _this2 = this;

	            var cadastreLayer = this.getCadastreLayer(value);
	            return new Promise(function (resolve) {
	                // let req = new Request(`${this._serverBase}/typeahead?limit=${limit}&skip=0&text=${value}&type=${cadastreLayer.id}`);
	                var req = new Request(_this2._serverBase + '/features/' + cadastreLayer.id + '?text=' + value + '&tolerance=' + _this2._tolerance + '&limit=' + limit);
	                var headers = new Headers();
	                headers.append('Content-Type', 'application/json');
	                var init = {
	                    method: 'GET',
	                    mode: 'cors',
	                    cache: 'default'
	                };
	                fetch(req, init).then(function (response) {
	                    return response.json();
	                }).then(function (json) {
	                    // if(json.status === 200){
	                    var rs = json.features.map(function (x) {
	                        return {
	                            name: x.attrs.name || x.attrs.cn || x.attrs.id,
	                            properties: x,
	                            provider: _this2,
	                            query: value
	                        };
	                    });
	                    resolve(rs);
	                    // }
	                    // else {
	                    // resolve(json);
	                    // }                                       
	                });
	            });
	        }
	    }, {
	        key: 'fetch',
	        value: function (_fetch) {
	            function fetch(_x) {
	                return _fetch.apply(this, arguments);
	            }

	            fetch.toString = function () {
	                return _fetch.toString();
	            };

	            return fetch;
	        }(function (obj) {
	            var _this3 = this;

	            var text = obj.attrs.name || obj.attrs.cn || obj.attrs.id;
	            var cadastreLayer = this.getCadastreLayer(text, obj.type);
	            return new Promise(function (resolve) {
	                if (cadastreLayer) {
	                    // let req = new Request(`${this._serverBase}/features/${cadastreLayer.id}?tolerance=${this._tolerance}&limit=1&text=${obj.value}`);
	                    var req = new Request(_this3._serverBase + '/features/' + cadastreLayer.id + '?tolerance=' + _this3._tolerance + '&limit=1&text=' + text);
	                    var headers = new Headers();
	                    headers.append('Content-Type', 'application/json');
	                    var init = {
	                        method: 'GET',
	                        mode: 'cors',
	                        cache: 'default'
	                    };
	                    fetch(req, init).then(function (response) {
	                        return response.json();
	                    }).then(function (json) {
	                        if (json.status === 200) {
	                            var event = document.createEvent('Event');
	                            event.initEvent('fetch', false, false);
	                            event.detail = json;
	                            _this3.dispatchEvent(event);

	                            var rs = json.features.map(function (x) {
	                                return {
	                                    name: x.attrs.name || x.attrs.cn || x.attrs.id,
	                                    properties: x,
	                                    provider: _this3,
	                                    query: obj
	                                };
	                            });
	                            resolve(rs);
	                        } else {
	                            resolve(json);
	                        }
	                    });
	                } else {
	                    resolve([]);
	                }
	            });
	        })
	    }]);
	    return CadastreDataProvider;
	}(EventTarget);

	var BaseSearchProvider = function () {
	    function BaseSearchProvider() {
	        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        classCallCheck(this, BaseSearchProvider);


	        this._application = config['application'];
	        this._map = config['map'];

	        this._provider = null;
	    }

	    createClass(BaseSearchProvider, [{
	        key: 'getMap',
	        value: function getMap() {

	            return this._map;
	        }
	    }, {
	        key: 'getApplication',
	        value: function getApplication() {

	            return this._application;
	        }
	    }, {
	        key: 'getMain',
	        value: function getMain() {

	            return this._provider;
	        }
	    }]);
	    return BaseSearchProvider;
	}();

	var CrdSearchProvider = function (_BaseSearchProvider) {
	        inherits(CrdSearchProvider, _BaseSearchProvider);

	        function CrdSearchProvider(props) {
	                classCallCheck(this, CrdSearchProvider);

	                var _this = possibleConstructorReturn(this, (CrdSearchProvider.__proto__ || Object.getPrototypeOf(CrdSearchProvider)).call(this, props));

	                _this._provider = new CoordinatesDataProvider({ showOnMap: false });

	                _this._bindEvents();
	                return _this;
	        }

	        createClass(CrdSearchProvider, [{
	                key: '_bindEvents',
	                value: function _bindEvents() {

	                        this._provider.addEventListener('fetch', this._onFetchHandler.bind(this));
	                }
	        }, {
	                key: '_onFetchHandler',
	                value: function _onFetchHandler(e) {

	                        var map = this.getMap();
	                        var application = this.getApplication();

	                        var result = e.detail;
	                        var geoJSON = result.feature;

	                        geoJSON.properties.editable = false;

	                        var center = L.GeoJSON.coordsToLatLng(geoJSON.geometry.coordinates);
	                        var item = getDrawingObject({ geoJSON: geoJSON, editable: geoJSON.properties.editable });

	                        var DrawingController = application.getBridgeController('drawing');

	                        DrawingController.addDrawingOnMapAndList(item);

	                        map.setView(center, 14);
	                }
	        }]);
	        return CrdSearchProvider;
	}(BaseSearchProvider);

	var OsmSearchProvider = function (_BaseSearchProvider) {
	    inherits(OsmSearchProvider, _BaseSearchProvider);

	    function OsmSearchProvider(props) {
	        classCallCheck(this, OsmSearchProvider);

	        var _this = possibleConstructorReturn(this, (OsmSearchProvider.__proto__ || Object.getPrototypeOf(OsmSearchProvider)).call(this, props));

	        _this._provider = new OsmDataProvider({
	            showOnMap: false,
	            serverBase: '//maps.kosmosnimki.ru',
	            suggestionLimit: 10
	        });

	        _this._bindEvents();
	        return _this;
	    }

	    createClass(OsmSearchProvider, [{
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            this._provider.addEventListener('fetch', this._onFetchHandler.bind(this));
	        }
	    }, {
	        key: '_onFetchHandler',
	        value: function _onFetchHandler(e) {

	            var results = e.detail;

	            var application = this.getApplication();
	            var DrawingController = application.getBridgeController('drawing');

	            DrawingController.addDrawingOnMapAndListFromOsm(results);
	        }
	    }]);
	    return OsmSearchProvider;
	}(BaseSearchProvider);

	var GmxLayerDataProvider = function (_EventTarget) {
	    inherits(GmxLayerDataProvider, _EventTarget);

	    function GmxLayerDataProvider(_ref) {
	        var application = _ref.application,
	            map = _ref.map;
	        classCallCheck(this, GmxLayerDataProvider);

	        var _this = possibleConstructorReturn(this, (GmxLayerDataProvider.__proto__ || Object.getPrototypeOf(GmxLayerDataProvider)).call(this));

	        _this.showSuggestion = false;
	        _this.showOnMap = false;
	        _this.showOnSelect = false;
	        _this.showOnEnter = true;

	        _this._application = application;
	        return _this;
	    }

	    createClass(GmxLayerDataProvider, [{
	        key: '_toGeoJSON',
	        value: function _toGeoJSON(fields, values) {

	            return fields.reduce(function (a, k, i) {
	                if (k === 'geomixergeojson') {
	                    var geojson = L.gmxUtil.geometryToGeoJSON(values[i], true);
	                    a.geometry = geojson;
	                } else {
	                    a.properties = a.properties || {};
	                    a.properties[k] = values[i];
	                }
	                return a;
	            }, { type: 'Feature' });
	        }
	    }, {
	        key: 'fetch',
	        value: function fetch() {

	            return new Promise(function (resolve) {
	                return resolve([]);
	            });
	        }
	    }, {
	        key: 'find',
	        value: function find(value) {
	            var _this2 = this;

	            var query = value.split(/[\s,]+/).map(function (x) {
	                return "(sceneid = '" + x + "')";
	            }).join(' OR ');

	            var application = this.getApplication();
	            var requestManager = application.getRequestManager();

	            return new Promise(function (resolve, reject) {
	                var rq = {
	                    layer: LAYER_ID,
	                    geometry: true,
	                    pagesize: 0,
	                    query: query,
	                    out_cs: 'EPSG:3857'
	                };

	                requestManager.requestVectorLayerSearch(rq).then(function (response) {
	                    if (response.Status == 'ok') {
	                        var rs = response.Result.values.map(function (values) {
	                            return {
	                                feature: _this2._toGeoJSON(response.Result.fields, values),
	                                provider: _this2,
	                                query: value
	                            };
	                        });
	                        resolve(rs);

	                        var event = document.createEvent('Event');
	                        event.initEvent('fetch', false, false);
	                        event.detail = response.Result;
	                        _this2.dispatchEvent(event);
	                    } else {
	                        reject(response.Result);
	                    }
	                }).catch(function (err) {
	                    console.log(err);
	                    reject(err);
	                });
	            });
	        }
	    }, {
	        key: 'getApplication',
	        value: function getApplication() {

	            return this._application;
	        }
	    }]);
	    return GmxLayerDataProvider;
	}(EventTarget);

	var GmxSearchProvider = function (_BaseSearchProvider) {
	    inherits(GmxSearchProvider, _BaseSearchProvider);

	    function GmxSearchProvider(props) {
	        classCallCheck(this, GmxSearchProvider);

	        var _this = possibleConstructorReturn(this, (GmxSearchProvider.__proto__ || Object.getPrototypeOf(GmxSearchProvider)).call(this, props));

	        var map = _this.getMap();

	        var application = _this.getApplication();
	        var requestManager = application.getRequestManager();

	        _this._provider = new GmxLayerDataProvider({
	            map: map,
	            application: application,
	            gmxResourceServer: requestManager.getGmxResourceServer()
	        });

	        _this._bindEvents();
	        return _this;
	    }

	    createClass(GmxSearchProvider, [{
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            this._provider.addEventListener('fetch', this._onFetchHandler.bind(this));
	        }
	    }, {
	        key: '_onFetchHandler',
	        value: function _onFetchHandler(e) {

	            var application = this.getApplication();
	            var ContourController = application.getBridgeController('contour');
	            var result = e.detail;
	            var _result$values = result.values,
	                values = _result$values === undefined ? [] : _result$values;


	            if (values.length < 1) {
	                var notificationText = Translations$2.getText('alerts.nothing');
	                application.showNotification(notificationText);
	                return;
	            }

	            ContourController.clearClientFilter();
	            ContourController.clearContoursOnResults();
	            ContourController.addContoursOnMapAndList(result);
	        }
	    }]);
	    return GmxSearchProvider;
	}(BaseSearchProvider);

	var SearchWidgetComponent = function (_BaseComponent) {
	    inherits(SearchWidgetComponent, _BaseComponent);

	    function SearchWidgetComponent() {
	        classCallCheck(this, SearchWidgetComponent);
	        return possibleConstructorReturn(this, (SearchWidgetComponent.__proto__ || Object.getPrototypeOf(SearchWidgetComponent)).apply(this, arguments));
	    }

	    createClass(SearchWidgetComponent, [{
	        key: 'init',
	        value: function init() {

	            this._initSearchProviders();

	            var parentView = this.getParentComponent().getView();

	            this._view = new SearchWidget(parentView.getSearchPaneRef(), {
	                placeHolder: Translations$2.getText('controls.search'),
	                suggestionLimit: 10,
	                providers: this._getSearchProviders(),
	                replaceInputOnEnter: true,
	                style: {
	                    editable: false,
	                    map: true,
	                    pointStyle: {
	                        size: 8,
	                        weight: 1,
	                        opacity: 1,
	                        color: '#00008B'
	                    },
	                    lineStyle: {
	                        fill: false,
	                        weight: 3,
	                        opacity: 1,
	                        color: '#008B8B'
	                    }
	                }
	            });

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            var map = this.getMap();

	            var searchControl = this.getView();

	            map.on('click', searchControl.results.hide.bind(searchControl.results));
	            map.on('dragstart', searchControl.results.hide.bind(searchControl.results));
	        }
	    }, {
	        key: '_initSearchProviders',
	        value: function _initSearchProviders() {

	            var application = this.getApplication();
	            var map = this.getMap();

	            var config = {
	                map: map, application: application
	            };

	            this._crdProvider = new CrdSearchProvider(config);
	            this._gmxProvider = new GmxSearchProvider(config);
	            this._osmProvider = new OsmSearchProvider(config);
	        }
	    }, {
	        key: '_getSearchProviders',
	        value: function _getSearchProviders() {

	            return [this._crdProvider.getMain(), this._gmxProvider.getMain(), this._osmProvider.getMain()];
	        }
	    }]);
	    return SearchWidgetComponent;
	}(BaseComponent);

	var pikaday = createCommonjsModule(function (module, exports) {
	    /*!
	     * Pikaday
	     *
	     * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
	     */

	    (function (root, factory) {

	        var moment;
	        {
	            // CommonJS module
	            // Load moment.js as an optional dependency
	            try {
	                moment = moment$1;
	            } catch (e) {}
	            module.exports = factory(moment);
	        }
	    })(commonjsGlobal, function (moment) {

	        /**
	         * feature detection and helper functions
	         */

	        var hasMoment = typeof moment === 'function',
	            hasEventListeners = !!window.addEventListener,
	            document = window.document,
	            sto = window.setTimeout,
	            addEvent = function addEvent(el, e, callback, capture) {
	            if (hasEventListeners) {
	                el.addEventListener(e, callback, !!capture);
	            } else {
	                el.attachEvent('on' + e, callback);
	            }
	        },
	            removeEvent = function removeEvent(el, e, callback, capture) {
	            if (hasEventListeners) {
	                el.removeEventListener(e, callback, !!capture);
	            } else {
	                el.detachEvent('on' + e, callback);
	            }
	        },
	            trim = function trim(str) {
	            return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
	        },
	            hasClass = function hasClass(el, cn) {
	            return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
	        },
	            addClass = function addClass(el, cn) {
	            if (!hasClass(el, cn)) {
	                el.className = el.className === '' ? cn : el.className + ' ' + cn;
	            }
	        },
	            removeClass = function removeClass(el, cn) {
	            el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
	        },
	            isArray = function isArray(obj) {
	            return (/Array/.test(Object.prototype.toString.call(obj))
	            );
	        },
	            isDate = function isDate(obj) {
	            return (/Date/.test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime())
	            );
	        },
	            isWeekend = function isWeekend(date) {
	            var day = date.getDay();
	            return day === 0 || day === 6;
	        },
	            isLeapYear = function isLeapYear(year) {
	            // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
	            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	        },
	            getDaysInMonth = function getDaysInMonth(year, month) {
	            return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	        },
	            setToStartOfDay = function setToStartOfDay(date) {
	            if (isDate(date)) date.setHours(0, 0, 0, 0);
	        },
	            compareDates = function compareDates(a, b) {
	            // weak date comparison (use setToStartOfDay(date) to ensure correct result)
	            return a.getTime() === b.getTime();
	        },
	            extend = function extend(to, from, overwrite) {
	            var prop, hasProp;
	            for (prop in from) {
	                hasProp = to[prop] !== undefined;
	                if (hasProp && _typeof(from[prop]) === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
	                    if (isDate(from[prop])) {
	                        if (overwrite) {
	                            to[prop] = new Date(from[prop].getTime());
	                        }
	                    } else if (isArray(from[prop])) {
	                        if (overwrite) {
	                            to[prop] = from[prop].slice(0);
	                        }
	                    } else {
	                        to[prop] = extend({}, from[prop], overwrite);
	                    }
	                } else if (overwrite || !hasProp) {
	                    to[prop] = from[prop];
	                }
	            }
	            return to;
	        },
	            fireEvent = function fireEvent(el, eventName, data) {
	            var ev;

	            if (document.createEvent) {
	                ev = document.createEvent('HTMLEvents');
	                ev.initEvent(eventName, true, false);
	                ev = extend(ev, data);
	                el.dispatchEvent(ev);
	            } else if (document.createEventObject) {
	                ev = document.createEventObject();
	                ev = extend(ev, data);
	                el.fireEvent('on' + eventName, ev);
	            }
	        },
	            adjustCalendar = function adjustCalendar(calendar) {
	            if (calendar.month < 0) {
	                calendar.year -= Math.ceil(Math.abs(calendar.month) / 12);
	                calendar.month += 12;
	            }
	            if (calendar.month > 11) {
	                calendar.year += Math.floor(Math.abs(calendar.month) / 12);
	                calendar.month -= 12;
	            }
	            return calendar;
	        },


	        /**
	         * defaults and localisation
	         */
	        defaults$$1 = {

	            // bind the picker to a form field
	            field: null,

	            // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
	            bound: undefined,

	            // data-attribute on the input field with an aria assistance tekst (only applied when `bound` is set)
	            ariaLabel: 'Use the arrow keys to pick a date',

	            // position of the datepicker, relative to the field (default to bottom & left)
	            // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
	            position: 'bottom left',

	            // automatically fit in the viewport even if it means repositioning from the position option
	            reposition: true,

	            // the default output format for `.toString()` and `field` value
	            format: 'YYYY-MM-DD',

	            // the toString function which gets passed a current date object and format
	            // and returns a string
	            toString: null,

	            // used to create date object from current input string
	            parse: null,

	            // the initial date to view when first opened
	            defaultDate: null,

	            // make the `defaultDate` the initial selected value
	            setDefaultDate: false,

	            // first day of week (0: Sunday, 1: Monday etc)
	            firstDay: 0,

	            // the default flag for moment's strict date parsing
	            formatStrict: false,

	            // the minimum/earliest date that can be selected
	            minDate: null,
	            // the maximum/latest date that can be selected
	            maxDate: null,

	            // number of years either side, or array of upper/lower range
	            yearRange: 10,

	            // show week numbers at head of row
	            showWeekNumber: false,

	            // Week picker mode
	            pickWholeWeek: false,

	            // used internally (don't config outside)
	            minYear: 0,
	            maxYear: 9999,
	            minMonth: undefined,
	            maxMonth: undefined,

	            startRange: null,
	            endRange: null,

	            isRTL: false,

	            // Additional text to append to the year in the calendar title
	            yearSuffix: '',

	            // Render the month after year in the calendar title
	            showMonthAfterYear: false,

	            // Render days of the calendar grid that fall in the next or previous month
	            showDaysInNextAndPreviousMonths: false,

	            // Allows user to select days that fall in the next or previous month
	            enableSelectionDaysInNextAndPreviousMonths: false,

	            // how many months are visible
	            numberOfMonths: 1,

	            // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
	            // only used for the first display or when a selected date is not visible
	            mainCalendar: 'left',

	            // Specify a DOM element to render the calendar in
	            container: undefined,

	            // Blur field when date is selected
	            blurFieldOnSelect: true,

	            // internationalization
	            i18n: {
	                previousMonth: 'Previous Month',
	                nextMonth: 'Next Month',
	                months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	                weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	                weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
	            },

	            // Theme Classname
	            theme: null,

	            // events array
	            events: [],

	            // callback function
	            onSelect: null,
	            onOpen: null,
	            onClose: null,
	            onDraw: null,

	            // Enable keyboard input
	            keyboardInput: true
	        },


	        /**
	         * templating functions to abstract HTML rendering
	         */
	        renderDayName = function renderDayName(opts, day, abbr) {
	            day += opts.firstDay;
	            while (day >= 7) {
	                day -= 7;
	            }
	            return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
	        },
	            renderDay = function renderDay(opts) {
	            var arr = [];
	            var ariaSelected = 'false';
	            if (opts.isEmpty) {
	                if (opts.showDaysInNextAndPreviousMonths) {
	                    arr.push('is-outside-current-month');

	                    if (!opts.enableSelectionDaysInNextAndPreviousMonths) {
	                        arr.push('is-selection-disabled');
	                    }
	                } else {
	                    return '<td class="is-empty"></td>';
	                }
	            }
	            if (opts.isDisabled) {
	                arr.push('is-disabled');
	            }
	            if (opts.isToday) {
	                arr.push('is-today');
	            }
	            if (opts.isSelected) {
	                arr.push('is-selected');
	                ariaSelected = 'true';
	            }
	            if (opts.hasEvent) {
	                arr.push('has-event');
	            }
	            if (opts.isInRange) {
	                arr.push('is-inrange');
	            }
	            if (opts.isStartRange) {
	                arr.push('is-startrange');
	            }
	            if (opts.isEndRange) {
	                arr.push('is-endrange');
	            }
	            return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' + '<button class="pika-button pika-day" type="button" ' + 'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' + opts.day + '</button>' + '</td>';
	        },
	            renderWeek = function renderWeek(d, m, y) {
	            // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
	            var onejan = new Date(y, 0, 1),
	                weekNum = Math.ceil(((new Date(y, m, d) - onejan) / 86400000 + onejan.getDay() + 1) / 7);
	            return '<td class="pika-week">' + weekNum + '</td>';
	        },
	            renderRow = function renderRow(days, isRTL, pickWholeWeek, isRowSelected) {
	            return '<tr class="pika-row' + (pickWholeWeek ? ' pick-whole-week' : '') + (isRowSelected ? ' is-selected' : '') + '">' + (isRTL ? days.reverse() : days).join('') + '</tr>';
	        },
	            renderBody = function renderBody(rows) {
	            return '<tbody>' + rows.join('') + '</tbody>';
	        },
	            renderHead = function renderHead(opts) {
	            var i,
	                arr = [];
	            if (opts.showWeekNumber) {
	                arr.push('<th></th>');
	            }
	            for (i = 0; i < 7; i++) {
	                arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
	            }
	            return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
	        },
	            renderTitle = function renderTitle(instance, c, year, month, refYear, randId) {
	            var i,
	                j,
	                arr,
	                opts = instance._o,
	                isMinYear = year === opts.minYear,
	                isMaxYear = year === opts.maxYear,
	                html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
	                monthHtml,
	                yearHtml,
	                prev = true,
	                next = true;

	            for (arr = [], i = 0; i < 12; i++) {
	                arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' + (i === month ? ' selected="selected"' : '') + (isMinYear && i < opts.minMonth || isMaxYear && i > opts.maxMonth ? 'disabled="disabled"' : '') + '>' + opts.i18n.months[i] + '</option>');
	            }

	            monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

	            if (isArray(opts.yearRange)) {
	                i = opts.yearRange[0];
	                j = opts.yearRange[1] + 1;
	            } else {
	                i = year - opts.yearRange;
	                j = 1 + year + opts.yearRange;
	            }

	            for (arr = []; i < j && i <= opts.maxYear; i++) {
	                if (i >= opts.minYear) {
	                    arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"' : '') + '>' + i + '</option>');
	                }
	            }
	            yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

	            if (opts.showMonthAfterYear) {
	                html += yearHtml + monthHtml;
	            } else {
	                html += monthHtml + yearHtml;
	            }

	            if (isMinYear && (month === 0 || opts.minMonth >= month)) {
	                prev = false;
	            }

	            if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
	                next = false;
	            }

	            if (c === 0) {
	                html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
	            }
	            if (c === instance._o.numberOfMonths - 1) {
	                html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
	            }

	            return html += '</div>';
	        },
	            renderTable = function renderTable(opts, data, randId) {
	            return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
	        },


	        /**
	         * Pikaday constructor
	         */
	        Pikaday = function Pikaday(options) {
	            var self = this,
	                opts = self.config(options);

	            self._onMouseDown = function (e) {
	                if (!self._v) {
	                    return;
	                }
	                e = e || window.event;
	                var target = e.target || e.srcElement;
	                if (!target) {
	                    return;
	                }

	                if (!hasClass(target, 'is-disabled')) {
	                    if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
	                        self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
	                        if (opts.bound) {
	                            sto(function () {
	                                self.hide();
	                                if (opts.blurFieldOnSelect && opts.field) {
	                                    opts.field.blur();
	                                }
	                            }, 100);
	                        }
	                    } else if (hasClass(target, 'pika-prev')) {
	                        self.prevMonth();
	                    } else if (hasClass(target, 'pika-next')) {
	                        self.nextMonth();
	                    }
	                }
	                if (!hasClass(target, 'pika-select')) {
	                    // if this is touch event prevent mouse events emulation
	                    if (e.preventDefault) {
	                        e.preventDefault();
	                    } else {
	                        e.returnValue = false;
	                        return false;
	                    }
	                } else {
	                    self._c = true;
	                }
	            };

	            self._onChange = function (e) {
	                e = e || window.event;
	                var target = e.target || e.srcElement;
	                if (!target) {
	                    return;
	                }
	                if (hasClass(target, 'pika-select-month')) {
	                    self.gotoMonth(target.value);
	                } else if (hasClass(target, 'pika-select-year')) {
	                    self.gotoYear(target.value);
	                }
	            };

	            self._onKeyChange = function (e) {
	                e = e || window.event;

	                if (self.isVisible()) {

	                    switch (e.keyCode) {
	                        case 13:
	                        case 27:
	                            if (opts.field) {
	                                opts.field.blur();
	                            }
	                            break;
	                        case 37:
	                            e.preventDefault();
	                            self.adjustDate('subtract', 1);
	                            break;
	                        case 38:
	                            self.adjustDate('subtract', 7);
	                            break;
	                        case 39:
	                            self.adjustDate('add', 1);
	                            break;
	                        case 40:
	                            self.adjustDate('add', 7);
	                            break;
	                    }
	                }
	            };

	            self._onInputChange = function (e) {
	                var date;

	                if (e.firedBy === self) {
	                    return;
	                }
	                if (opts.parse) {
	                    date = opts.parse(opts.field.value, opts.format);
	                } else if (hasMoment) {
	                    date = moment(opts.field.value, opts.format, opts.formatStrict);
	                    date = date && date.isValid() ? date.toDate() : null;
	                } else {
	                    date = new Date(Date.parse(opts.field.value));
	                }
	                if (isDate(date)) {
	                    self.setDate(date);
	                }
	                if (!self._v) {
	                    self.show();
	                }
	            };

	            self._onInputFocus = function () {
	                self.show();
	            };

	            self._onInputClick = function () {
	                self.show();
	            };

	            self._onInputBlur = function () {
	                // IE allows pika div to gain focus; catch blur the input field
	                var pEl = document.activeElement;
	                do {
	                    if (hasClass(pEl, 'pika-single')) {
	                        return;
	                    }
	                } while (pEl = pEl.parentNode);

	                if (!self._c) {
	                    self._b = sto(function () {
	                        self.hide();
	                    }, 50);
	                }
	                self._c = false;
	            };

	            self._onClick = function (e) {
	                e = e || window.event;
	                var target = e.target || e.srcElement,
	                    pEl = target;
	                if (!target) {
	                    return;
	                }
	                if (!hasEventListeners && hasClass(target, 'pika-select')) {
	                    if (!target.onchange) {
	                        target.setAttribute('onchange', 'return;');
	                        addEvent(target, 'change', self._onChange);
	                    }
	                }
	                do {
	                    if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
	                        return;
	                    }
	                } while (pEl = pEl.parentNode);
	                if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
	                    self.hide();
	                }
	            };

	            self.el = document.createElement('div');
	            self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

	            addEvent(self.el, 'mousedown', self._onMouseDown, true);
	            addEvent(self.el, 'touchend', self._onMouseDown, true);
	            addEvent(self.el, 'change', self._onChange);

	            if (opts.keyboardInput) {
	                addEvent(document, 'keydown', self._onKeyChange);
	            }

	            if (opts.field) {
	                if (opts.container) {
	                    opts.container.appendChild(self.el);
	                } else if (opts.bound) {
	                    document.body.appendChild(self.el);
	                } else {
	                    opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
	                }
	                addEvent(opts.field, 'change', self._onInputChange);

	                if (!opts.defaultDate) {
	                    if (hasMoment && opts.field.value) {
	                        opts.defaultDate = moment(opts.field.value, opts.format).toDate();
	                    } else {
	                        opts.defaultDate = new Date(Date.parse(opts.field.value));
	                    }
	                    opts.setDefaultDate = true;
	                }
	            }

	            var defDate = opts.defaultDate;

	            if (isDate(defDate)) {
	                if (opts.setDefaultDate) {
	                    self.setDate(defDate, true);
	                } else {
	                    self.gotoDate(defDate);
	                }
	            } else {
	                self.gotoDate(new Date());
	            }

	            if (opts.bound) {
	                this.hide();
	                self.el.className += ' is-bound';
	                addEvent(opts.trigger, 'click', self._onInputClick);
	                addEvent(opts.trigger, 'focus', self._onInputFocus);
	                addEvent(opts.trigger, 'blur', self._onInputBlur);
	            } else {
	                this.show();
	            }
	        };

	        /**
	         * public Pikaday API
	         */
	        Pikaday.prototype = {

	            /**
	             * configure functionality
	             */
	            config: function config(options) {
	                if (!this._o) {
	                    this._o = extend({}, defaults$$1, true);
	                }

	                var opts = extend(this._o, options, true);

	                opts.isRTL = !!opts.isRTL;

	                opts.field = opts.field && opts.field.nodeName ? opts.field : null;

	                opts.theme = typeof opts.theme === 'string' && opts.theme ? opts.theme : null;

	                opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

	                opts.trigger = opts.trigger && opts.trigger.nodeName ? opts.trigger : opts.field;

	                opts.disableWeekends = !!opts.disableWeekends;

	                opts.disableDayFn = typeof opts.disableDayFn === 'function' ? opts.disableDayFn : null;

	                var nom = parseInt(opts.numberOfMonths, 10) || 1;
	                opts.numberOfMonths = nom > 4 ? 4 : nom;

	                if (!isDate(opts.minDate)) {
	                    opts.minDate = false;
	                }
	                if (!isDate(opts.maxDate)) {
	                    opts.maxDate = false;
	                }
	                if (opts.minDate && opts.maxDate && opts.maxDate < opts.minDate) {
	                    opts.maxDate = opts.minDate = false;
	                }
	                if (opts.minDate) {
	                    this.setMinDate(opts.minDate);
	                }
	                if (opts.maxDate) {
	                    this.setMaxDate(opts.maxDate);
	                }

	                if (isArray(opts.yearRange)) {
	                    var fallback = new Date().getFullYear() - 10;
	                    opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
	                    opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
	                } else {
	                    opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults$$1.yearRange;
	                    if (opts.yearRange > 100) {
	                        opts.yearRange = 100;
	                    }
	                }

	                return opts;
	            },

	            /**
	             * return a formatted string of the current selection (using Moment.js if available)
	             */
	            toString: function toString(format) {
	                format = format || this._o.format;
	                if (!isDate(this._d)) {
	                    return '';
	                }
	                if (this._o.toString) {
	                    return this._o.toString(this._d, format);
	                }
	                if (hasMoment) {
	                    return moment(this._d).format(format);
	                }
	                return this._d.toDateString();
	            },

	            /**
	             * return a Moment.js object of the current selection (if available)
	             */
	            getMoment: function getMoment() {
	                return hasMoment ? moment(this._d) : null;
	            },

	            /**
	             * set the current selection from a Moment.js object (if available)
	             */
	            setMoment: function setMoment(date, preventOnSelect) {
	                if (hasMoment && moment.isMoment(date)) {
	                    this.setDate(date.toDate(), preventOnSelect);
	                }
	            },

	            /**
	             * return a Date object of the current selection
	             */
	            getDate: function getDate() {
	                return isDate(this._d) ? new Date(this._d.getTime()) : null;
	            },

	            /**
	             * set the current selection
	             */
	            setDate: function setDate(date, preventOnSelect) {
	                if (!date) {
	                    this._d = null;

	                    if (this._o.field) {
	                        this._o.field.value = '';
	                        fireEvent(this._o.field, 'change', { firedBy: this });
	                    }

	                    return this.draw();
	                }
	                if (typeof date === 'string') {
	                    date = new Date(Date.parse(date));
	                }
	                if (!isDate(date)) {
	                    return;
	                }

	                var min = this._o.minDate,
	                    max = this._o.maxDate;

	                if (isDate(min) && date < min) {
	                    date = min;
	                } else if (isDate(max) && date > max) {
	                    date = max;
	                }

	                this._d = new Date(date.getTime());
	                setToStartOfDay(this._d);
	                this.gotoDate(this._d);

	                if (this._o.field) {
	                    this._o.field.value = this.toString();
	                    fireEvent(this._o.field, 'change', { firedBy: this });
	                }
	                if (!preventOnSelect && typeof this._o.onSelect === 'function') {
	                    this._o.onSelect.call(this, this.getDate());
	                }
	            },

	            /**
	             * change view to a specific date
	             */
	            gotoDate: function gotoDate(date) {
	                var newCalendar = true;

	                if (!isDate(date)) {
	                    return;
	                }

	                if (this.calendars) {
	                    var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
	                        lastVisibleDate = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1),
	                        visibleDate = date.getTime();
	                    // get the end of the month
	                    lastVisibleDate.setMonth(lastVisibleDate.getMonth() + 1);
	                    lastVisibleDate.setDate(lastVisibleDate.getDate() - 1);
	                    newCalendar = visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate;
	                }

	                if (newCalendar) {
	                    this.calendars = [{
	                        month: date.getMonth(),
	                        year: date.getFullYear()
	                    }];
	                    if (this._o.mainCalendar === 'right') {
	                        this.calendars[0].month += 1 - this._o.numberOfMonths;
	                    }
	                }

	                this.adjustCalendars();
	            },

	            adjustDate: function adjustDate(sign, days) {

	                var day = this.getDate() || new Date();
	                var difference = parseInt(days) * 24 * 60 * 60 * 1000;

	                var newDay;

	                if (sign === 'add') {
	                    newDay = new Date(day.valueOf() + difference);
	                } else if (sign === 'subtract') {
	                    newDay = new Date(day.valueOf() - difference);
	                }

	                this.setDate(newDay);
	            },

	            adjustCalendars: function adjustCalendars() {
	                this.calendars[0] = adjustCalendar(this.calendars[0]);
	                for (var c = 1; c < this._o.numberOfMonths; c++) {
	                    this.calendars[c] = adjustCalendar({
	                        month: this.calendars[0].month + c,
	                        year: this.calendars[0].year
	                    });
	                }
	                this.draw();
	            },

	            gotoToday: function gotoToday() {
	                this.gotoDate(new Date());
	            },

	            /**
	             * change view to a specific month (zero-index, e.g. 0: January)
	             */
	            gotoMonth: function gotoMonth(month) {
	                if (!isNaN(month)) {
	                    this.calendars[0].month = parseInt(month, 10);
	                    this.adjustCalendars();
	                }
	            },

	            nextMonth: function nextMonth() {
	                this.calendars[0].month++;
	                this.adjustCalendars();
	            },

	            prevMonth: function prevMonth() {
	                this.calendars[0].month--;
	                this.adjustCalendars();
	            },

	            /**
	             * change view to a specific full year (e.g. "2012")
	             */
	            gotoYear: function gotoYear(year) {
	                if (!isNaN(year)) {
	                    this.calendars[0].year = parseInt(year, 10);
	                    this.adjustCalendars();
	                }
	            },

	            /**
	             * change the minDate
	             */
	            setMinDate: function setMinDate(value) {
	                if (value instanceof Date) {
	                    setToStartOfDay(value);
	                    this._o.minDate = value;
	                    this._o.minYear = value.getFullYear();
	                    this._o.minMonth = value.getMonth();
	                } else {
	                    this._o.minDate = defaults$$1.minDate;
	                    this._o.minYear = defaults$$1.minYear;
	                    this._o.minMonth = defaults$$1.minMonth;
	                    this._o.startRange = defaults$$1.startRange;
	                }

	                this.draw();
	            },

	            /**
	             * change the maxDate
	             */
	            setMaxDate: function setMaxDate(value) {
	                if (value instanceof Date) {
	                    setToStartOfDay(value);
	                    this._o.maxDate = value;
	                    this._o.maxYear = value.getFullYear();
	                    this._o.maxMonth = value.getMonth();
	                } else {
	                    this._o.maxDate = defaults$$1.maxDate;
	                    this._o.maxYear = defaults$$1.maxYear;
	                    this._o.maxMonth = defaults$$1.maxMonth;
	                    this._o.endRange = defaults$$1.endRange;
	                }

	                this.draw();
	            },

	            setStartRange: function setStartRange(value) {
	                this._o.startRange = value;
	            },

	            setEndRange: function setEndRange(value) {
	                this._o.endRange = value;
	            },

	            /**
	             * refresh the HTML
	             */
	            draw: function draw(force) {
	                if (!this._v && !force) {
	                    return;
	                }
	                var opts = this._o,
	                    minYear = opts.minYear,
	                    maxYear = opts.maxYear,
	                    minMonth = opts.minMonth,
	                    maxMonth = opts.maxMonth,
	                    html = '',
	                    randId;

	                if (this._y <= minYear) {
	                    this._y = minYear;
	                    if (!isNaN(minMonth) && this._m < minMonth) {
	                        this._m = minMonth;
	                    }
	                }
	                if (this._y >= maxYear) {
	                    this._y = maxYear;
	                    if (!isNaN(maxMonth) && this._m > maxMonth) {
	                        this._m = maxMonth;
	                    }
	                }

	                randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);

	                for (var c = 0; c < opts.numberOfMonths; c++) {
	                    html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
	                }

	                this.el.innerHTML = html;

	                if (opts.bound) {
	                    if (opts.field.type !== 'hidden') {
	                        sto(function () {
	                            opts.trigger.focus();
	                        }, 1);
	                    }
	                }

	                if (typeof this._o.onDraw === 'function') {
	                    this._o.onDraw(this);
	                }

	                if (opts.bound) {
	                    // let the screen reader user know to use arrow keys
	                    opts.field.setAttribute('aria-label', opts.ariaLabel);
	                }
	            },

	            adjustPosition: function adjustPosition() {
	                var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect, leftAligned, bottomAligned;

	                if (this._o.container) return;

	                this.el.style.position = 'absolute';

	                field = this._o.trigger;
	                pEl = field;
	                width = this.el.offsetWidth;
	                height = this.el.offsetHeight;
	                viewportWidth = window.innerWidth || document.documentElement.clientWidth;
	                viewportHeight = window.innerHeight || document.documentElement.clientHeight;
	                scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
	                leftAligned = true;
	                bottomAligned = true;

	                if (typeof field.getBoundingClientRect === 'function') {
	                    clientRect = field.getBoundingClientRect();
	                    left = clientRect.left + window.pageXOffset;
	                    top = clientRect.bottom + window.pageYOffset;
	                } else {
	                    left = pEl.offsetLeft;
	                    top = pEl.offsetTop + pEl.offsetHeight;
	                    while (pEl = pEl.offsetParent) {
	                        left += pEl.offsetLeft;
	                        top += pEl.offsetTop;
	                    }
	                }

	                // default position is bottom & left
	                if (this._o.reposition && left + width > viewportWidth || this._o.position.indexOf('right') > -1 && left - width + field.offsetWidth > 0) {
	                    left = left - width + field.offsetWidth;
	                    leftAligned = false;
	                }
	                if (this._o.reposition && top + height > viewportHeight + scrollTop || this._o.position.indexOf('top') > -1 && top - height - field.offsetHeight > 0) {
	                    top = top - height - field.offsetHeight;
	                    bottomAligned = false;
	                }

	                this.el.style.left = left + 'px';
	                this.el.style.top = top + 'px';

	                addClass(this.el, leftAligned ? 'left-aligned' : 'right-aligned');
	                addClass(this.el, bottomAligned ? 'bottom-aligned' : 'top-aligned');
	                removeClass(this.el, !leftAligned ? 'left-aligned' : 'right-aligned');
	                removeClass(this.el, !bottomAligned ? 'bottom-aligned' : 'top-aligned');
	            },

	            /**
	             * render HTML for a particular month
	             */
	            render: function render(year, month, randId) {
	                var opts = this._o,
	                    now = new Date(),
	                    days = getDaysInMonth(year, month),
	                    before = new Date(year, month, 1).getDay(),
	                    data = [],
	                    row = [];
	                setToStartOfDay(now);
	                if (opts.firstDay > 0) {
	                    before -= opts.firstDay;
	                    if (before < 0) {
	                        before += 7;
	                    }
	                }
	                var previousMonth = month === 0 ? 11 : month - 1,
	                    nextMonth = month === 11 ? 0 : month + 1,
	                    yearOfPreviousMonth = month === 0 ? year - 1 : year,
	                    yearOfNextMonth = month === 11 ? year + 1 : year,
	                    daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
	                var cells = days + before,
	                    after = cells;
	                while (after > 7) {
	                    after -= 7;
	                }
	                cells += 7 - after;
	                var isWeekSelected = false;
	                for (var i = 0, r = 0; i < cells; i++) {
	                    var day = new Date(year, month, 1 + (i - before)),
	                        isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
	                        isToday = compareDates(day, now),
	                        hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
	                        isEmpty = i < before || i >= days + before,
	                        dayNumber = 1 + (i - before),
	                        monthNumber = month,
	                        yearNumber = year,
	                        isStartRange = opts.startRange && compareDates(opts.startRange, day),
	                        isEndRange = opts.endRange && compareDates(opts.endRange, day),
	                        isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
	                        isDisabled = opts.minDate && day < opts.minDate || opts.maxDate && day > opts.maxDate || opts.disableWeekends && isWeekend(day) || opts.disableDayFn && opts.disableDayFn(day);

	                    if (isEmpty) {
	                        if (i < before) {
	                            dayNumber = daysInPreviousMonth + dayNumber;
	                            monthNumber = previousMonth;
	                            yearNumber = yearOfPreviousMonth;
	                        } else {
	                            dayNumber = dayNumber - days;
	                            monthNumber = nextMonth;
	                            yearNumber = yearOfNextMonth;
	                        }
	                    }

	                    var dayConfig = {
	                        day: dayNumber,
	                        month: monthNumber,
	                        year: yearNumber,
	                        hasEvent: hasEvent,
	                        isSelected: isSelected,
	                        isToday: isToday,
	                        isDisabled: isDisabled,
	                        isEmpty: isEmpty,
	                        isStartRange: isStartRange,
	                        isEndRange: isEndRange,
	                        isInRange: isInRange,
	                        showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
	                        enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
	                    };

	                    if (opts.pickWholeWeek && isSelected) {
	                        isWeekSelected = true;
	                    }

	                    row.push(renderDay(dayConfig));

	                    if (++r === 7) {
	                        if (opts.showWeekNumber) {
	                            row.unshift(renderWeek(i - before, month, year));
	                        }
	                        data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
	                        row = [];
	                        r = 0;
	                        isWeekSelected = false;
	                    }
	                }
	                return renderTable(opts, data, randId);
	            },

	            isVisible: function isVisible() {
	                return this._v;
	            },

	            show: function show() {
	                if (!this.isVisible()) {
	                    this._v = true;
	                    this.draw();
	                    removeClass(this.el, 'is-hidden');
	                    if (this._o.bound) {
	                        addEvent(document, 'click', this._onClick);
	                        this.adjustPosition();
	                    }
	                    if (typeof this._o.onOpen === 'function') {
	                        this._o.onOpen.call(this);
	                    }
	                }
	            },

	            hide: function hide() {
	                var v = this._v;
	                if (v !== false) {
	                    if (this._o.bound) {
	                        removeEvent(document, 'click', this._onClick);
	                    }
	                    this.el.style.position = 'static'; // reset
	                    this.el.style.left = 'auto';
	                    this.el.style.top = 'auto';
	                    addClass(this.el, 'is-hidden');
	                    this._v = false;
	                    if (v !== undefined && typeof this._o.onClose === 'function') {
	                        this._o.onClose.call(this);
	                    }
	                }
	            },

	            /**
	             * GAME OVER
	             */
	            destroy: function destroy() {
	                var opts = this._o;

	                this.hide();
	                removeEvent(this.el, 'mousedown', this._onMouseDown, true);
	                removeEvent(this.el, 'touchend', this._onMouseDown, true);
	                removeEvent(this.el, 'change', this._onChange);
	                if (opts.keyboardInput) {
	                    removeEvent(document, 'keydown', this._onKeyChange);
	                }
	                if (opts.field) {
	                    removeEvent(opts.field, 'change', this._onInputChange);
	                    if (opts.bound) {
	                        removeEvent(opts.trigger, 'click', this._onInputClick);
	                        removeEvent(opts.trigger, 'focus', this._onInputFocus);
	                        removeEvent(opts.trigger, 'blur', this._onInputBlur);
	                    }
	                }
	                if (this.el.parentNode) {
	                    this.el.parentNode.removeChild(this.el);
	                }
	            }

	        };

	        return Pikaday;
	    });
	});

	/* src\js\components\uiElements\widgetElements\sidebar\components\searchTab\view\DateWidget.html generated by Svelte v2.16.1 */

	var LANGUAGE = 'rus';

	function labelClass(_ref) {
		var mode = _ref.mode;

		return 'search-options-period-' + mode;
	}

	function inputClass(_ref2) {
		var mode = _ref2.mode;

		return 'search-options-period-' + mode + '-value';
	}

	function labelValue(_ref3) {
		var mode = _ref3.mode;

		return Translations$2.getText('period.' + (mode === 'from' ? 'from' : 'to'));
	}

	function data$6() {
		return {
			date: getNowDate(),
			mode: 'from'
		};
	}
	var methods$4 = {
		onChangeHandler: function onChangeHandler(e) {

			var currentDate = this._date.getDate();

			var _get = this.get(),
			    existingDate = _get.date;

			if (!compareDates(currentDate, existingDate)) {
				this.fire('setDate', { date: currentDate });
			}
		}
	};

	function oncreate() {
		var _get2 = this.get(),
		    currentDate = _get2.date;

		var i18n = void 0;

		switch (LANGUAGE) {
			case 'rus':
			default:
				moment.locale('ru');
				i18n = {
					previousMonth: 'Предыдущий месяц',
					nextMonth: 'Следующий месяц',
					months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
					weekdays: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
					weekdaysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']
				};
				break;
			case 'eng':
				moment.locale('en');
				i18n = {
					previousMonth: 'Previous Month',
					nextMonth: 'Next Month',
					months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
					weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
					weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
				};
				break;
		}

		this._date = new pikaday({
			field: this.refs.input,
			format: 'DD.MM.YYYY',
			yearRange: 20,
			i18n: i18n,
			keyboardInput: false,
			blurFieldOnSelect: false
		});

		this._date.setDate(currentDate);
	}
	function onstate(params) {
		var _params$changed = params.changed,
		    changed = _params$changed === undefined ? {} : _params$changed,
		    currentDate = params.current.date;


		if (changed['date']) {
			this._date && this._date.setDate(currentDate);
		}
	}
	function create_main_fragment$5(component, ctx) {
		var div, text0, text1, input;

		function change_handler(event) {
			component.onChangeHandler(event);
		}

		return {
			c: function c() {
				div = createElement("div");
				text0 = createText(ctx.labelValue);
				text1 = createText("\r\n");
				input = createElement("input");
				div.className = ctx.labelClass;
				addListener(input, "change", change_handler);
				input.className = ctx.inputClass;
				setAttribute(input, "type", "text");
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, text0);
				insert(target, text1, anchor);
				insert(target, input, anchor);
				component.refs.input = input;
			},
			p: function p(changed, ctx) {
				if (changed.labelValue) {
					setData(text0, ctx.labelValue);
				}

				if (changed.labelClass) {
					div.className = ctx.labelClass;
				}

				if (changed.inputClass) {
					input.className = ctx.inputClass;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
					detachNode(text1);
					detachNode(input);
				}

				removeListener(input, "change", change_handler);
				if (component.refs.input === input) component.refs.input = null;
			}
		};
	}

	function DateWidget(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$6(), options.data);

		this._recompute({ mode: 1 }, this._state);
		this._intro = true;

		this._handlers.state = [onstate];

		onstate.call(this, { changed: assignTrue({}, this._state), current: this._state });

		this._fragment = create_main_fragment$5(this, this._state);

		this.root._oncreate.push(function () {
			oncreate.call(_this);
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(DateWidget.prototype, proto$4);
	assign(DateWidget.prototype, methods$4);

	DateWidget.prototype._recompute = function _recompute(changed, state) {
		if (changed.mode) {
			if (this._differs(state.labelClass, state.labelClass = labelClass(state))) changed.labelClass = true;
			if (this._differs(state.inputClass, state.inputClass = inputClass(state))) changed.inputClass = true;
			if (this._differs(state.labelValue, state.labelValue = labelValue(state))) changed.labelValue = true;
		}
	};

	var SliderWidget = function (_EventTarget) {
	    inherits(SliderWidget, _EventTarget);

	    function SliderWidget(container) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { min: 0, max: 100 };
	        classCallCheck(this, SliderWidget);

	        var _this = possibleConstructorReturn(this, (SliderWidget.__proto__ || Object.getPrototypeOf(SliderWidget)).call(this));

	        _this._container = container;
	        _this._current = null;
	        _this.options = options;
	        _this.stopPropagation = _this.stopPropagation.bind(_this);
	        _this.preventDefault = _this.preventDefault.bind(_this);
	        _this._slide = _this._slide.bind(_this);
	        _this._stop = _this._stop.bind(_this);
	        if (!_this._container.classList.contains('slider-widget')) {
	            _this._container.classList.add('slider-widget');
	            _this._container.classList.add('no-select');
	            _this._container.innerHTML = '<div class="slider-widget-bar">\n                    <div class="slider-widget-range">\n                        <i class="slider-widget-tick-left"></i>\n                        <i class="slider-widget-tick-right"></i>\n                    </div>\n                </div>';
	            _this._bar = _this._container.querySelector('.slider-widget-bar');
	            _this._leftTick = _this._container.querySelector('.slider-widget-tick-left');
	            _this._rightTick = _this._container.querySelector('.slider-widget-tick-right');
	            _this._range = _this._container.querySelector('.slider-widget-range');
	            _this._attachEvents();
	        }
	        return _this;
	    }

	    createClass(SliderWidget, [{
	        key: '_reset',
	        value: function _reset() {
	            // const {width, height} = this._leftTick.getBoundingClientRect();
	            // this._leftTick.style.left = `-${width}px`;
	            // this._rightTick.style.left = `${width}px`;
	        }
	    }, {
	        key: 'stopPropagation',
	        value: function stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: 'preventDefault',
	        value: function preventDefault(e) {
	            e.preventDefault();
	        }
	    }, {
	        key: '_attachEvents',
	        value: function _attachEvents() {
	            // this._container.addEventListener('dragstart', this.preventDefault);
	            this._leftTick.addEventListener('mousedown', this.stopPropagation);
	            this._leftTick.addEventListener('mousedown', this.preventDefault);
	            this._leftTick.addEventListener('mousedown', this._start.bind(this, 'left'));
	            this._rightTick.addEventListener('mousedown', this.stopPropagation);
	            this._rightTick.addEventListener('mousedown', this.preventDefault);
	            this._rightTick.addEventListener('mousedown', this._start.bind(this, 'right'));
	            // document.body.addEventListener('mouseup', this.stopPropagation);
	            // document.body.addEventListener('mouseup', this.preventDefault);
	            document.body.addEventListener('mouseup', this._stop);
	            document.body.addEventListener('mousemove', this._slide);
	            this._handleBarClick = this._handleBarClick.bind(this);
	            this._bar.addEventListener('click', this.stopPropagation);
	            this._bar.addEventListener('click', this.preventDefault);
	            this._bar.addEventListener('click', this._handleBarClick);
	        }
	    }, {
	        key: '_handleBarClick',
	        value: function _handleBarClick(e) {
	            var x = e.clientX;
	            var leftRect = this._leftTick.getBoundingClientRect();
	            var rightRect = this._rightTick.getBoundingClientRect();
	            if (x < leftRect.left || leftRect.right < x && x < rightRect.left || rightRect.right < x) {
	                var _bar$getBoundingClien = this._bar.getBoundingClientRect(),
	                    left = _bar$getBoundingClien.left,
	                    right = _bar$getBoundingClien.right;

	                var rangeRect = this._range.getBoundingClientRect();
	                var min = rangeRect.left + leftRect.width;
	                var max = rangeRect.right - rightRect.width;
	                if (Math.abs(x - min) < Math.abs(max - x)) {
	                    // left tick
	                    if (x > left + leftRect.width) {
	                        this._range.style.left = x - left - leftRect.width + 'px';
	                        this._range.style.width = rangeRect.right - x + leftRect.width + 'px';
	                    } else {
	                        // leftmost
	                        this._range.style.left = 0 + 'px';
	                        this._range.style.width = rangeRect.right - left + 'px';
	                    }
	                } else {
	                    // right tick
	                    if (x < right - rightRect.width) {
	                        this._range.style.width = x - rangeRect.left + rightRect.width + 'px';
	                    } else {
	                        // rightmost
	                        this._range.style.width = right - rangeRect.left + 'px';
	                    }
	                }
	                this._updateBounds();

	                // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	                var event = document.createEvent('Event');
	                event.initEvent('change', false, false);
	                event.detail = [this._lo, this._hi];
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: '_start',
	        value: function _start(tick, e) {
	            if (this._current === null) {
	                this._current = tick;
	                switch (this._current) {
	                    case 'left':
	                        var leftRect = this._leftTick.getBoundingClientRect();
	                        this._offset = e.clientX - leftRect.left;
	                        break;
	                    case 'right':
	                        var rightRect = this._rightTick.getBoundingClientRect();
	                        this._offset = rightRect.right - e.clientX;
	                        break;
	                }
	                var event = document.createEvent('Event');
	                event.initEvent('start', false, false);
	                event.detail = [this._lo, this._hi];
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: '_stop',
	        value: function _stop(e) {
	            if (this._current !== null) {
	                this._current = null;
	                this._offset = 0;

	                var event = document.createEvent('Event');
	                event.initEvent('stop', false, false);
	                event.detail = [this._lo, this._hi];
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: '_slide',
	        value: function _slide(e) {
	            if (this._current) {
	                switch (this._current) {
	                    case 'left':
	                        this._handleLeftSlide(e.clientX - this._offset);
	                        break;
	                    case 'right':
	                        this._handleRightSlide(e.clientX + this._offset);
	                        break;
	                    default:
	                        break;
	                }
	            }
	        }
	    }, {
	        key: '_handleLeftSlide',
	        value: function _handleLeftSlide(x) {
	            var leftRect = this._leftTick.getBoundingClientRect();
	            var rightRect = this._rightTick.getBoundingClientRect();
	            var max = this._range.getBoundingClientRect().right;

	            var _bar$getBoundingClien2 = this._bar.getBoundingClientRect(),
	                left = _bar$getBoundingClien2.left;

	            var totalWidth = leftRect.width + rightRect.width;
	            if (x < max - totalWidth) {
	                if (x < left) {
	                    // min
	                    this._range.style.left = 0 + 'px';
	                    this._range.style.width = max - left + 'px';
	                } else {
	                    this._range.style.left = x - left + 'px';
	                    this._range.style.width = max - x + 'px';
	                }
	            } else {
	                // rightmost
	                this._range.style.left = max - totalWidth - left + 'px';
	                this._range.style.width = totalWidth + 'px';
	            }
	            this._updateBounds();

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_handleRightSlide',
	        value: function _handleRightSlide(x) {
	            var leftRect = this._leftTick.getBoundingClientRect();
	            var rightRect = this._rightTick.getBoundingClientRect();
	            var min = this._range.getBoundingClientRect().left;

	            var _bar$getBoundingClien3 = this._bar.getBoundingClientRect(),
	                left = _bar$getBoundingClien3.left,
	                right = _bar$getBoundingClien3.right;

	            var totalWidth = leftRect.width + rightRect.width;
	            if (x > min + totalWidth) {
	                if (x > right) {
	                    // max
	                    this._range.style.width = right - min + 'px';
	                } else {
	                    this._range.style.width = x - min + 'px';
	                }
	            } else {
	                // leftmost            
	                this._range.style.width = totalWidth + 'px';
	            }
	            this._updateBounds();

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_updateBounds',
	        value: function _updateBounds() {
	            var _bar$getBoundingClien4 = this._bar.getBoundingClientRect(),
	                width = _bar$getBoundingClien4.width,
	                left = _bar$getBoundingClien4.left;

	            var leftRect = this._leftTick.getBoundingClientRect();
	            var rightRect = this._rightTick.getBoundingClientRect();

	            var k = (this.options.max - this.options.min) / (width - leftRect.width - rightRect.width);
	            var lo = leftRect.left - left;
	            this._lo = this.options.min + (this.options.mode === 'float' ? lo * k : Math.round(lo * k));
	            var hi = rightRect.left - rightRect.width - left;
	            this._hi = this.options.min + (this.options.mode === 'float' ? hi * k : Math.round(hi * k));
	        }
	    }, {
	        key: 'values',
	        set: function set$$1(_ref) {
	            var _ref2 = slicedToArray(_ref, 2),
	                lo = _ref2[0],
	                hi = _ref2[1];

	            if (this.options.min <= lo && lo <= hi && hi <= this.options.max) {
	                var _bar$getBoundingClien5 = this._bar.getBoundingClientRect(),
	                    width = _bar$getBoundingClien5.width,
	                    left = _bar$getBoundingClien5.left;

	                var leftRect = this._leftTick.getBoundingClientRect();
	                var rightRect = this._rightTick.getBoundingClientRect();

	                this._lo = lo;
	                this._hi = hi;

	                var k = (width - leftRect.width - rightRect.width) / (this.options.max - this.options.min);
	                this._range.style.left = Math.round((this._lo - this.options.min) * k) + 'px';
	                this._range.style.width = Math.round((this._hi - this._lo) * k) + leftRect.width + rightRect.width + 'px';
	            }
	            // this.dispatchEvent(new CustomEvent('change', { detail: [lo, hi]}));
	        },
	        get: function get$$1() {
	            // let validate = (x,y) => this.options.min <= x && y <= this.options.max ? [x,y] : [this.options.min, this.options.max];
	            // return validate(this._lo,this._hi);
	            return [this._lo, this._hi];
	        }
	    }]);
	    return SliderWidget;
	}(EventTarget);

	var RangeWidget = function (_SliderWidget) {
	    inherits(RangeWidget, _SliderWidget);

	    function RangeWidget(container) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { mode: 'integer' };
	        classCallCheck(this, RangeWidget);

	        var _this = possibleConstructorReturn(this, (RangeWidget.__proto__ || Object.getPrototypeOf(RangeWidget)).call(this, container, options));

	        _this.options.mode = _this.options.mode || 'integer';
	        if (!_this._container.classList.contains('range-widget')) {
	            _this._container.classList.add('range-widget');
	            var html = '<div class="range-widget-content">\n                <input type="text" value="" />\n                <i>-</i>\n                <input type="text" value="" />\n            </div>';
	            _this._bar.insertAdjacentHTML('beforebegin', html);
	            _this._leftInput = _this._container.querySelector('.range-widget-content input:first-child');
	            _this._rightInput = _this._container.querySelector('.range-widget-content input:last-child');
	            _this._handleLeftInput = _this._handleLeftInput.bind(_this);
	            _this._handleRightInput = _this._handleRightInput.bind(_this);
	            _this._handleRange = _this._handleRange.bind(_this);
	            _this._leftInput.addEventListener('change', _this._handleLeftInput);
	            _this._leftInput.addEventListener('focus', function (e) {
	                return _this._leftInput.select();
	            });
	            _this._rightInput.addEventListener('change', _this._handleRightInput);
	            _this._rightInput.addEventListener('focus', function (e) {
	                return _this._rightInput.select();
	            });
	            _this.addEventListener('change', _this._handleRange);
	            _this.values = [_this.options.min, _this.options.max];
	        }
	        return _this;
	    }

	    createClass(RangeWidget, [{
	        key: '_handleLeftInput',
	        value: function _handleLeftInput(e) {
	            var lo = this.options.mode === 'integer' ? parseInt(this._leftInput.value, 10) : parseFloat(this._leftInput.value);
	            var hi = this.options.mode === 'integer' ? parseInt(this._rightInput.value, 10) : parseFloat(this._rightInput.value);
	            if (!isNaN(lo) && this.options.min <= lo && lo <= this.options.max) {
	                this.values = [lo, hi];
	            } else {
	                this._leftInput.value = this.options.mode === 'integer' ? Math.round(this._lo) : this._lo.toFixed(1);
	            }

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);

	            event.initEvent('stop', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_handleRightInput',
	        value: function _handleRightInput(e) {
	            var lo = this.options.mode === 'integer' ? parseInt(this._leftInput.value, 10) : parseFloat(this._leftInput.value);
	            var hi = this.options.mode === 'integer' ? parseInt(this._rightInput.value, 10) : parseFloat(this._rightInput.value);
	            if (!isNaN(hi) && this.options.min <= hi && hi <= this.options.max) {
	                this.values = [lo, hi];
	            } else {
	                this._rightInput.value = this.options.mode === 'integer' ? Math.round(this._hi) : this._hi.toFixed(1);
	            }

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);

	            event.initEvent('stop', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_handleRange',
	        value: function _handleRange(e) {
	            var _e$detail = slicedToArray(e.detail, 2),
	                lo = _e$detail[0],
	                hi = _e$detail[1];

	            this._leftInput.value = this.options.mode === 'integer' ? Math.round(lo) : lo.toFixed(1);
	            this._rightInput.value = this.options.mode === 'integer' ? Math.round(hi) : hi.toFixed(1);
	        }
	    }, {
	        key: 'values',
	        set: function set$$1(_ref) {
	            var _ref2 = slicedToArray(_ref, 2),
	                lo = _ref2[0],
	                hi = _ref2[1];

	            if (!isNaN(lo) && this.options.min <= lo && lo <= this.options.max && !isNaN(hi) && this.options.min <= hi && hi <= this.options.max) {
	                set(RangeWidget.prototype.__proto__ || Object.getPrototypeOf(RangeWidget.prototype), 'values', [lo, hi], this);
	            }
	            this._leftInput.value = this.options.mode === 'integer' ? Math.round(this._lo) : this._lo.toFixed(1);
	            this._rightInput.value = this.options.mode === 'integer' ? Math.round(this._hi) : this._hi.toFixed(1);

	            // this.dispatchEvent(new CustomEvent('change', { detail: [lo, hi]}));
	        },
	        get: function get$$1() {
	            return get(RangeWidget.prototype.__proto__ || Object.getPrototypeOf(RangeWidget.prototype), 'values', this);
	        }
	    }]);
	    return RangeWidget;
	}(SliderWidget);

	/* src\js\components\uiElements\widgetElements\sidebar\components\searchTab\view\SliderWidget.html generated by Svelte v2.16.1 */

	function containerClass(_ref) {
		var mode = _ref.mode;

		return 'search-options-' + mode;
	}

	function labelClass$1(_ref2) {
		var mode = _ref2.mode;

		return 'search-options-' + mode + '-title';
	}

	function inputClass$1(_ref3) {
		var mode = _ref3.mode;

		return 'search-options-' + mode + '-value';
	}

	function labelValue$1(_ref4) {
		var mode = _ref4.mode;

		return Translations$2.getText(mode === 'clouds' ? 'clouds' : 'angle');
	}

	function data$7() {
		return {
			mode: 'clouds',
			value: [0, 100],
			limits: { min: 0, max: 100 }
		};
	}
	var methods$5 = {
		onSliderStopHandler: function onSliderStopHandler(e) {
			var detail = e.detail;


			this.set({ value: detail });
		}
	};

	function oncreate$1() {
		var _get = this.get(),
		    limits = _get.limits,
		    value = _get.value;

		this._slider = new RangeWidget(this.refs.sliderContainer, limits);
		this._slider.values = value;

		this._slider.addEventListener('stop', this.onSliderStopHandler.bind(this));
	}
	function onstate$1(params) {
		var _params$changed = params.changed,
		    changed = _params$changed === undefined ? {} : _params$changed,
		    currentValue = params.current.value;


		if (changed['value']) {
			if (this._slider) {
				this._slider.values = currentValue;
			}
			this.fire('changeValues', { value: currentValue });
		}
	}
	function create_main_fragment$6(component, ctx) {
		var div2, div0, text0, text1, div1;

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				text0 = createText(ctx.labelValue);
				text1 = createText("\r\n    ");
				div1 = createElement("div");
				div0.className = ctx.labelClass;
				div1.className = ctx.inputClass;
				div2.className = ctx.containerClass;
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				append(div0, text0);
				append(div2, text1);
				append(div2, div1);
				component.refs.sliderContainer = div1;
			},
			p: function p(changed, ctx) {
				if (changed.labelValue) {
					setData(text0, ctx.labelValue);
				}

				if (changed.labelClass) {
					div0.className = ctx.labelClass;
				}

				if (changed.inputClass) {
					div1.className = ctx.inputClass;
				}

				if (changed.containerClass) {
					div2.className = ctx.containerClass;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				if (component.refs.sliderContainer === div1) component.refs.sliderContainer = null;
			}
		};
	}

	function SliderWidget$1(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$7(), options.data);

		this._recompute({ mode: 1 }, this._state);
		this._intro = true;

		this._handlers.state = [onstate$1];

		onstate$1.call(this, { changed: assignTrue({}, this._state), current: this._state });

		this._fragment = create_main_fragment$6(this, this._state);

		this.root._oncreate.push(function () {
			oncreate$1.call(_this);
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(SliderWidget$1.prototype, proto$4);
	assign(SliderWidget$1.prototype, methods$5);

	SliderWidget$1.prototype._recompute = function _recompute(changed, state) {
		if (changed.mode) {
			if (this._differs(state.containerClass, state.containerClass = containerClass(state))) changed.containerClass = true;
			if (this._differs(state.labelClass, state.labelClass = labelClass$1(state))) changed.labelClass = true;
			if (this._differs(state.inputClass, state.inputClass = inputClass$1(state))) changed.inputClass = true;
			if (this._differs(state.labelValue, state.labelValue = labelValue$1(state))) changed.labelValue = true;
		}
	};

	/* src\js\components\uiElements\widgetElements\sidebar\components\searchTab\view\InfoWidget.html generated by Svelte v2.16.1 */

	function correctLeft(_ref) {
		var left = _ref.left,
		    width = _ref.width;

		return left + width + 30;
	}

	function correctTop(_ref2) {
		var top = _ref2.top;

		return top - 100;
	}

	function data$8() {
		return {
			hidden: true,
			left: 0,
			top: 0,
			width: 0,
			resolution: 0,
			swath: 0,
			since: 0,
			operator: ''
		};
	}
	function translate$4(text) {

		return Translations$2.getText(text);
	}
	function create_main_fragment$7(component, ctx) {
		var div2,
		    table,
		    tbody,
		    tr0,
		    td0,
		    text0_value = translate$4('satellite.resolution'),
		    text0,
		    text1,
		    td1,
		    text2,
		    td2,
		    text3_value = translate$4('resolution.unit'),
		    text3,
		    text4,
		    tr1,
		    td3,
		    text5_value = translate$4('satellite.swath'),
		    text5,
		    text6,
		    td4,
		    text7,
		    td5,
		    text8_value = translate$4('units.km'),
		    text8,
		    text9,
		    div0,
		    text10,
		    text11,
		    div1,
		    text12_value = translate$4('satellite.since'),
		    text12,
		    text13,
		    text14;

		return {
			c: function c() {
				div2 = createElement("div");
				table = createElement("table");
				tbody = createElement("tbody");
				tr0 = createElement("tr");
				td0 = createElement("td");
				text0 = createText(text0_value);
				text1 = createText(":");
				td1 = createElement("td");
				text2 = createText(ctx.resolution);
				td2 = createElement("td");
				text3 = createText(text3_value);
				text4 = createText("\r\n            ");
				tr1 = createElement("tr");
				td3 = createElement("td");
				text5 = createText(text5_value);
				text6 = createText(":");
				td4 = createElement("td");
				text7 = createText(ctx.swath);
				td5 = createElement("td");
				text8 = createText(text8_value);
				text9 = createText("\r\n    ");
				div0 = createElement("div");
				text10 = createText(ctx.operator);
				text11 = createText("\r\n    ");
				div1 = createElement("div");
				text12 = createText(text12_value);
				text13 = createText(" ");
				text14 = createText(ctx.since);
				setAttribute(table, "cellspacing", "0");
				setAttribute(table, "cellpadding", "0");
				div2.className = "satellite-info";
				setStyle(div2, "display", ctx.hidden ? 'none' : 'block');
				setStyle(div2, "left", "" + ctx.correctLeft + "px");
				setStyle(div2, "top", "" + ctx.correctTop + "px");
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, table);
				append(table, tbody);
				append(tbody, tr0);
				append(tr0, td0);
				append(td0, text0);
				append(td0, text1);
				append(tr0, td1);
				append(td1, text2);
				append(tr0, td2);
				append(td2, text3);
				append(tbody, text4);
				append(tbody, tr1);
				append(tr1, td3);
				append(td3, text5);
				append(td3, text6);
				append(tr1, td4);
				append(td4, text7);
				append(tr1, td5);
				append(td5, text8);
				append(div2, text9);
				append(div2, div0);
				append(div0, text10);
				append(div2, text11);
				append(div2, div1);
				append(div1, text12);
				append(div1, text13);
				append(div1, text14);
			},
			p: function p(changed, ctx) {
				if (changed.resolution) {
					setData(text2, ctx.resolution);
				}

				if (changed.swath) {
					setData(text7, ctx.swath);
				}

				if (changed.operator) {
					setData(text10, ctx.operator);
				}

				if (changed.since) {
					setData(text14, ctx.since);
				}

				if (changed.hidden) {
					setStyle(div2, "display", ctx.hidden ? 'none' : 'block');
				}

				if (changed.correctLeft) {
					setStyle(div2, "left", "" + ctx.correctLeft + "px");
				}

				if (changed.correctTop) {
					setStyle(div2, "top", "" + ctx.correctTop + "px");
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}
			}
		};
	}

	function InfoWidget(options) {
		init(this, options);
		this._state = assign(data$8(), options.data);

		this._recompute({ left: 1, width: 1, top: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$7(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(InfoWidget.prototype, proto$4);

	InfoWidget.prototype._recompute = function _recompute(changed, state) {
		if (changed.left || changed.width) {
			if (this._differs(state.correctLeft, state.correctLeft = correctLeft(state))) changed.correctLeft = true;
		}

		if (changed.top) {
			if (this._differs(state.correctTop, state.correctTop = correctTop(state))) changed.correctTop = true;
		}
	};

	/* src\js\components\uiElements\widgetElements\sidebar\components\searchTab\view\SatellitesWidget.html generated by Svelte v2.16.1 */

	var unitTranslate = Translations$2.getText('resolution.unit');

	var satellitesMeta = {
		first: {
			name: '0,3 - 0,5 ' + unitTranslate
		},
		second: {
			name: '0,7 - 2 ' + unitTranslate
		},
		third: {
			name: '>2 ' + unitTranslate
		},
		panchrome: {
			name: 'Панхром (ч/б)'
		}
	};

	var prepareSatellites = function prepareSatellites(satellites, restricted) {
		var forCriteria = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		var _satellites$ms = satellites.ms,
		    ms = _satellites$ms === undefined ? [] : _satellites$ms,
		    _satellites$pc = satellites.pc,
		    pc = _satellites$pc === undefined ? [] : _satellites$pc;

		var msSatellites = restricted ? ms : ms.filter(function (x) {
			return !x.restricted;
		});
		var pcSatellites = restricted ? pc : pc.filter(function (x) {
			return !x.restricted;
		});

		return !forCriteria ? [].concat(toConsumableArray(msSatellites), toConsumableArray(pcSatellites)) : { ms: msSatellites, pc: pcSatellites };
	};

	var getSatelliteSegment = function getSatelliteSegment(satellite) {
		var id = satellite.id,
		    resolution = satellite.resolution;


		if (PANCHROME_IDS.indexOf(id) !== -1) {
			return 'panchrome';
		}

		if (resolution <= 0.5) {
			return 'first';
		}

		if (0.7 <= resolution && resolution <= 2) {
			return 'second';
		}

		if (resolution > 2) {
			return 'third';
		}
	};

	function satellitesForCriteria(_ref) {
		var _satellites = _ref._satellites,
		    restricted = _ref.restricted;


		return prepareSatellites(_satellites, restricted, true);
	}

	function preparedSatellites(_ref2) {
		var _satellites = _ref2._satellites,
		    restricted = _ref2.restricted;


		var rawSatellites = prepareSatellites(_satellites, restricted);

		var satellites = {
			first: { data: [], count: 0, allChecked: true },
			second: { data: [], count: 0, allChecked: true },
			third: { data: [], count: 0, allChecked: true },
			panchrome: { data: [], count: 0, allChecked: true }
		};

		rawSatellites.forEach(function (satellite) {
			var id = satellite.id,
			    checked = satellite.checked,
			    platforms = satellite.platforms,
			    resolution = satellite.resolution;

			var segmentIndex = getSatelliteSegment(satellite);

			satellites[segmentIndex]['data'].push(satellite);
			checked && (satellites[segmentIndex]['count'] += 1);
			!checked && (satellites[segmentIndex]['allChecked'] = false);
		});

		return satellites;
	}

	function allCheckedCount(_ref3) {
		var _satellites = _ref3._satellites,
		    restricted = _ref3.restricted;


		var rawSatellites = prepareSatellites(_satellites, restricted);
		var checkedSatellites = rawSatellites.filter(function (item) {
			return item.checked;
		});

		return checkedSatellites.length;
	}

	function allVisible(_ref4) {
		var hidden = _ref4.hidden;
		var first = hidden.first,
		    second = hidden.second,
		    third = hidden.third,
		    panchrome = hidden.panchrome;


		var areAllVisible = !first && !second && !third && !panchrome;

		return areAllVisible;
	}

	function data$9() {
		return {
			_satellites: {},

			hidden: {
				first: true,
				second: true,
				third: true,
				panchrome: true
			},

			restricted: false
		};
	}
	function getCurrentName(segment) {

		return satellitesMeta[segment]['name'];
	}
	var methods$6 = {
		toggleSection: function toggleSection(segment) {
			var _get = this.get(),
			    hidden = _get.hidden;

			var currentHidden = hidden[segment];
			hidden[segment] = !currentHidden;

			this.set({ hidden: hidden });
		},
		checkAllSatellites: function checkAllSatellites(e, satellites, restricted) {
			var segment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;


			var setChecked = function setChecked(satellite, segment, checkedState) {
				if (!segment) {
					satellite.checked = checkedState;
				} else {
					var ids = satellitesMeta[segment].ids;
					var id = satellite.id,
					    currentRestricted = satellite.restricted;

					var correctCheckedState = checkedState;
					if (currentRestricted && !restricted) {
						correctCheckedState = false;
					}
					if (segment === getSatelliteSegment(satellite)) {
						satellite.checked = correctCheckedState;
					}
				}
				return satellite;
			};

			e.stopPropagation();

			var checkedState = e.target.checked;
			var _satellites$ms2 = satellites.ms,
			    ms = _satellites$ms2 === undefined ? [] : _satellites$ms2,
			    _satellites$pc2 = satellites.pc,
			    pc = _satellites$pc2 === undefined ? [] : _satellites$pc2;


			var checkedMs = ms.map(function (satellite) {
				return setChecked(satellite, segment, checkedState);
			});
			var checkedPc = pc.map(function (satellite) {
				return setChecked(satellite, segment, checkedState);
			});

			this.set({
				_satellites: { ms: checkedMs, pc: checkedPc }
			});
		},
		checkSatellite: function checkSatellite(satellites, id) {

			var setChecked = function setChecked(satellite) {
				var currentId = satellite.id,
				    checked = satellite.checked;

				if (currentId === id) {
					satellite.checked = !checked;
				}
				return satellite;
			};

			var _satellites$ms3 = satellites.ms,
			    ms = _satellites$ms3 === undefined ? [] : _satellites$ms3,
			    _satellites$pc3 = satellites.pc,
			    pc = _satellites$pc3 === undefined ? [] : _satellites$pc3;

			var newMs = ms.map(function (satellite) {
				return setChecked(satellite);
			});
			var newPc = pc.map(function (satellite) {
				return setChecked(satellite);
			});

			this.set({
				_satellites: { ms: newMs, pc: newPc }
			});
		},
		showSatelliteInfo: function showSatelliteInfo(e, satellite) {
			var target = e.target;
			var resolution = satellite.resolution,
			    swath = satellite.swath,
			    operator = satellite.operator,
			    since = satellite.since;

			var _target$getBoundingCl = target.getBoundingClientRect(),
			    left = _target$getBoundingCl.left,
			    top = _target$getBoundingCl.top,
			    width = _target$getBoundingCl.width;

			var infoWidget = this.refs.infoWidget;

			infoWidget.set({
				left: left,
				top: top,
				width: width,
				resolution: resolution,
				since: since,
				swath: swath,
				operator: operator,
				hidden: false
			});
		},
		hideSatelliteInfo: function hideSatelliteInfo(e, satellite) {

			var infoWidget = this.refs.infoWidget;

			infoWidget.set({ hidden: true });
		}
	};

	function onstate$2(_ref5) {
		var changed = _ref5.changed,
		    current = _ref5.current,
		    previous = _ref5.previous;
		var satellites = current._satellites;


		if (changed['_satellites']) {
			this.fire('changeSatellites', { satellites: satellites });
		}
	}
	function mouseout_handler(event) {
		var component = this._svelte.component;


		component.hideSatelliteInfo();
	}

	function mouseover_handler(event) {
		var _svelte = this._svelte,
		    component = _svelte.component,
		    ctx = _svelte.ctx;


		component.showSatelliteInfo(event, ctx.satellite);
	}

	function change_handler$1(event) {
		var _svelte2 = this._svelte,
		    component = _svelte2.component,
		    ctx = _svelte2.ctx;


		component.checkSatellite(ctx._satellites, ctx.satellite.id);
	}

	function get_each_context_1(ctx, list, i) {
		var child_ctx = Object.create(ctx);
		child_ctx.satellite = list[i];
		return child_ctx;
	}

	function click_handler_1(event) {
		var _svelte3 = this._svelte,
		    component = _svelte3.component,
		    ctx = _svelte3.ctx;


		component.toggleSection(ctx.segment);
	}

	function click_handler(event) {
		var _svelte4 = this._svelte,
		    component = _svelte4.component,
		    ctx = _svelte4.ctx;


		component.checkAllSatellites(event, ctx._satellites, ctx.restricted, ctx.segment);
	}

	function get_each_context$1(ctx, list, i) {
		var child_ctx = Object.create(ctx);
		child_ctx.segment = list[i];
		return child_ctx;
	}

	function create_main_fragment$8(component, ctx) {
		var div1, text0, div0, text1, text2;

		var each_value = ctx.Object.keys(ctx.preparedSatellites);

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$1(component, get_each_context$1(ctx, each_value, i));
		}

		var infowidget = new InfoWidget({
			root: component.root,
			store: component.store
		});

		component.refs.infoWidget = infowidget;

		return {
			c: function c() {
				div1 = createElement("div");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text0 = createText("\r\n    ");
				div0 = createElement("div");
				text1 = createText(ctx.allCheckedCount);
				text2 = createText("\r\n    ");
				infowidget._fragment.c();
				div0.className = "all-count";
				div1.className = "no-select search-options-satellites";
				setStyle(div1, "padding-right", "10px");
			},
			m: function m(target, anchor) {
				insert(target, div1, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div1, null);
				}

				append(div1, text0);
				append(div1, div0);
				append(div0, text1);
				append(div1, text2);
				infowidget._mount(div1, null);
			},
			p: function p(changed, ctx) {
				if (changed.hidden || changed.Object || changed.preparedSatellites || changed._satellites || changed.restricted) {
					each_value = ctx.Object.keys(ctx.preparedSatellites);

					for (var i = 0; i < each_value.length; i += 1) {
						var child_ctx = get_each_context$1(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block$1(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div1, text0);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}

				if (changed.allCheckedCount) {
					setData(text1, ctx.allCheckedCount);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div1);
				}

				destroyEach(each_blocks, detach);

				infowidget.destroy();
				if (component.refs.infoWidget === infowidget) component.refs.infoWidget = null;
			}
		};
	}

	// (16:12) {#if !hidden[segment]}
	function create_if_block$3(component, ctx) {
		var each_anchor;

		var each_value_1 = ctx.preparedSatellites[ctx.segment].data;

		var each_blocks = [];

		for (var i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1(component, get_each_context_1(ctx, each_value_1, i));
		}

		return {
			c: function c() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},
			m: function m(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_anchor, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.preparedSatellites || changed.Object || changed._satellites) {
					each_value_1 = ctx.preparedSatellites[ctx.segment].data;

					for (var i = 0; i < each_value_1.length; i += 1) {
						var child_ctx = get_each_context_1(ctx, each_value_1, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block_1(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value_1.length;
				}
			},
			d: function d(detach) {
				destroyEach(each_blocks, detach);

				if (detach) {
					detachNode(each_anchor);
				}
			}
		};
	}

	// (17:16) {#each preparedSatellites[segment].data as satellite}
	function create_each_block_1(component, ctx) {
		var div,
		    input,
		    input_id_value,
		    input_checked_value,
		    text0,
		    label,
		    text1_value = ctx.satellite.name,
		    text1,
		    label_for_value;

		return {
			c: function c() {
				div = createElement("div");
				input = createElement("input");
				text0 = createText("\r\n                        ");
				label = createElement("label");
				text1 = createText(text1_value);
				input._svelte = { component: component, ctx: ctx };

				addListener(input, "change", change_handler$1);
				setAttribute(input, "type", "checkbox");
				input.id = input_id_value = "sat_" + ctx.satellite.id;
				input.checked = input_checked_value = ctx.satellite.checked;

				label._svelte = { component: component, ctx: ctx };

				addListener(label, "mouseover", mouseover_handler);
				addListener(label, "mouseout", mouseout_handler);
				setStyle(label, "vertical-align", "middle");
				setStyle(label, "font-size", "13px");
				label.htmlFor = label_for_value = "sat_" + ctx.satellite.id;
				setStyle(div, "padding", "5px 5px 5px 25px");
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				append(div, text0);
				append(div, label);
				append(label, text1);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				input._svelte.ctx = ctx;
				if ((changed.preparedSatellites || changed.Object) && input_id_value !== (input_id_value = "sat_" + ctx.satellite.id)) {
					input.id = input_id_value;
				}

				if ((changed.preparedSatellites || changed.Object) && input_checked_value !== (input_checked_value = ctx.satellite.checked)) {
					input.checked = input_checked_value;
				}

				if ((changed.preparedSatellites || changed.Object) && text1_value !== (text1_value = ctx.satellite.name)) {
					setData(text1, text1_value);
				}

				label._svelte.ctx = ctx;
				if ((changed.preparedSatellites || changed.Object) && label_for_value !== (label_for_value = "sat_" + ctx.satellite.id)) {
					label.htmlFor = label_for_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(input, "change", change_handler$1);
				removeListener(label, "mouseover", mouseover_handler);
				removeListener(label, "mouseout", mouseout_handler);
			}
		};
	}

	// (2:4) {#each Object.keys(preparedSatellites) as segment}
	function create_each_block$1(component, ctx) {
		var div3,
		    div2,
		    span0,
		    input,
		    input_checked_value,
		    input_indeterminate_value,
		    text0,
		    span1,
		    text1_value = getCurrentName(ctx.segment),
		    text1,
		    text2,
		    div0,
		    text3_value = ctx.preparedSatellites[ctx.segment]['count'],
		    text3,
		    text4,
		    div1,
		    div1_class_value,
		    div2_class_value,
		    text5;

		var if_block = !ctx.hidden[ctx.segment] && create_if_block$3(component, ctx);

		return {
			c: function c() {
				div3 = createElement("div");
				div2 = createElement("div");
				span0 = createElement("span");
				input = createElement("input");
				text0 = createText("\r\n                ");
				span1 = createElement("span");
				text1 = createText(text1_value);
				text2 = createText(" ");
				div0 = createElement("div");
				text3 = createText(text3_value);
				text4 = createText("\r\n                ");
				div1 = createElement("div");
				text5 = createText("\r\n            ");
				if (if_block) if_block.c();
				input._svelte = { component: component, ctx: ctx };

				addListener(input, "click", click_handler);
				input.checked = input_checked_value = ctx.preparedSatellites[ctx.segment]['allChecked'];
				input.indeterminate = input_indeterminate_value = !ctx.preparedSatellites[ctx.segment]['allChecked'] && ctx.preparedSatellites[ctx.segment]['count'] > 0;
				setAttribute(input, "type", "checkbox");
				div0.className = "count";
				div1.className = div1_class_value = "toggleControl " + (ctx.hidden[ctx.segment] ? 'closed' : 'opened');

				div2._svelte = { component: component, ctx: ctx };

				addListener(div2, "click", click_handler_1);
				div2.className = div2_class_value = "satellite-header " + (ctx.hidden[ctx.segment] ? 'closed' : 'opened');
				div3.className = "satellite-segment-container";
			},
			m: function m(target, anchor) {
				insert(target, div3, anchor);
				append(div3, div2);
				append(div2, span0);
				append(span0, input);
				append(div2, text0);
				append(div2, span1);
				append(span1, text1);
				append(div2, text2);
				append(div2, div0);
				append(div0, text3);
				append(div2, text4);
				append(div2, div1);
				append(div3, text5);
				if (if_block) if_block.m(div3, null);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				input._svelte.ctx = ctx;
				if ((changed.preparedSatellites || changed.Object) && input_checked_value !== (input_checked_value = ctx.preparedSatellites[ctx.segment]['allChecked'])) {
					input.checked = input_checked_value;
				}

				if ((changed.preparedSatellites || changed.Object) && input_indeterminate_value !== (input_indeterminate_value = !ctx.preparedSatellites[ctx.segment]['allChecked'] && ctx.preparedSatellites[ctx.segment]['count'] > 0)) {
					input.indeterminate = input_indeterminate_value;
				}

				if ((changed.Object || changed.preparedSatellites) && text1_value !== (text1_value = getCurrentName(ctx.segment))) {
					setData(text1, text1_value);
				}

				if ((changed.preparedSatellites || changed.Object) && text3_value !== (text3_value = ctx.preparedSatellites[ctx.segment]['count'])) {
					setData(text3, text3_value);
				}

				if ((changed.hidden || changed.Object || changed.preparedSatellites) && div1_class_value !== (div1_class_value = "toggleControl " + (ctx.hidden[ctx.segment] ? 'closed' : 'opened'))) {
					div1.className = div1_class_value;
				}

				div2._svelte.ctx = ctx;
				if ((changed.hidden || changed.Object || changed.preparedSatellites) && div2_class_value !== (div2_class_value = "satellite-header " + (ctx.hidden[ctx.segment] ? 'closed' : 'opened'))) {
					div2.className = div2_class_value;
				}

				if (!ctx.hidden[ctx.segment]) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$3(component, ctx);
						if_block.c();
						if_block.m(div3, null);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div3);
				}

				removeListener(input, "click", click_handler);
				removeListener(div2, "click", click_handler_1);
				if (if_block) if_block.d();
			}
		};
	}

	function SatellitesWidget(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(assign({ Object: Object }, data$9()), options.data);

		this._recompute({ _satellites: 1, restricted: 1, hidden: 1 }, this._state);
		this._intro = true;

		this._handlers.state = [onstate$2];

		onstate$2.call(this, { changed: assignTrue({}, this._state), current: this._state });

		this._fragment = create_main_fragment$8(this, this._state);

		this.root._oncreate.push(function () {
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(SatellitesWidget.prototype, proto$4);
	assign(SatellitesWidget.prototype, methods$6);

	SatellitesWidget.prototype._recompute = function _recompute(changed, state) {
		if (changed._satellites || changed.restricted) {
			if (this._differs(state.satellitesForCriteria, state.satellitesForCriteria = satellitesForCriteria(state))) changed.satellitesForCriteria = true;
			if (this._differs(state.preparedSatellites, state.preparedSatellites = preparedSatellites(state))) changed.preparedSatellites = true;
			if (this._differs(state.allCheckedCount, state.allCheckedCount = allCheckedCount(state))) changed.allCheckedCount = true;
		}

		if (changed.hidden) {
			if (this._differs(state.allVisible, state.allVisible = allVisible(state))) changed.allVisible = true;
		}
	};

	/* src\js\components\uiElements\widgetElements\sidebar\components\searchTab\view\ArchiveWidget.html generated by Svelte v2.16.1 */

	var archiveValues = ['global', 'local', 'all'];

	function data$a() {
		return {
			restricted: false,
			archive: 'global'
		};
	}

	function translate$5(text) {

		return Translations$2.getText(text);
	}
	var methods$7 = {
		onArchiveChangeHandler: function onArchiveChangeHandler(e) {
			var _e$target$value = e.target.value,
			    value = _e$target$value === undefined ? 'global' : _e$target$value;


			if (archiveValues.indexOf(value) === -1) {
				value = 'global';
			}

			this.fire('setArchive', { archive: value });
		}
	};

	function create_main_fragment$9(component, ctx) {
		var div2, div0, text1, div1, text2;

		var if_block = ctx.restricted && create_if_block$4(component, ctx);

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				div0.textContent = "Спутники";
				text1 = createText("\r\n    ");
				div1 = createElement("div");
				text2 = createText("\r\n    ");
				if (if_block) if_block.c();
				div0.className = "search-options-satellites-title";
				div1.className = "search-options-satellites-number";
				div2.className = "search-options-satellites-number-section";
				setStyle(div2, "margin-bottom", "0");
				setStyle(div2, "padding-bottom", "15px");
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				append(div2, text1);
				append(div2, div1);
				append(div2, text2);
				if (if_block) if_block.m(div2, null);
			},
			p: function p(changed, ctx) {
				if (ctx.restricted) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$4(component, ctx);
						if_block.c();
						if_block.m(div2, null);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				if (if_block) if_block.d();
			}
		};
	}

	// (4:4) {#if restricted}
	function create_if_block$4(component, ctx) {
		var div,
		    select,
		    option0,
		    text0_value = translate$5('archive.global'),
		    text0,
		    option1,
		    text1_value = translate$5('archive.local'),
		    text1,
		    option2,
		    text2_value = translate$5('archive.all'),
		    text2,
		    select_value_value;

		function change_handler(event) {
			component.onArchiveChangeHandler(event);
		}

		return {
			c: function c() {
				div = createElement("div");
				select = createElement("select");
				option0 = createElement("option");
				text0 = createText(text0_value);
				option1 = createElement("option");
				text1 = createText(text1_value);
				option2 = createElement("option");
				text2 = createText(text2_value);
				option0.__value = "global";
				option0.value = option0.__value;
				option1.__value = "local";
				option1.value = option1.__value;
				option2.__value = "all";
				option2.value = option2.__value;
				addListener(select, "change", change_handler);
				setStyle(select, "width", "115px");
				div.className = "search-options-satellites-archive";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, select);
				append(select, option0);
				append(option0, text0);
				append(select, option1);
				append(option1, text1);
				append(select, option2);
				append(option2, text2);

				select_value_value = ctx.archive;
				for (var i = 0; i < select.options.length; i += 1) {
					var option = select.options[i];

					if (option.__value === select_value_value) {
						option.selected = true;
						break;
					}
				}
			},
			p: function p(changed, ctx) {
				if (changed.archive && select_value_value !== (select_value_value = ctx.archive)) {
					for (var i = 0; i < select.options.length; i += 1) {
						var option = select.options[i];

						if (option.__value === select_value_value) {
							option.selected = true;
							break;
						}
					}
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(select, "change", change_handler);
			}
		};
	}

	function ArchiveWidget(options) {
		init(this, options);
		this._state = assign(data$a(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$9(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ArchiveWidget.prototype, proto$4);
	assign(ArchiveWidget.prototype, methods$7);

	/* src\js\components\uiElements\widgetElements\sidebar\components\searchTab\view\AnnuallyWidget.html generated by Svelte v2.16.1 */

	function data$b() {
		return {
			annually: false
		};
	}
	var methods$8 = {
		onClickHandler: function onClickHandler() {
			var _get = this.get(),
			    annually = _get.annually;

			this.fire('setAnnually', { annually: !annually });
		}
	};

	function create_main_fragment$a(component, ctx) {
		var div1, div0, div0_title_value, div0_class_value;

		function click_handler(event) {
			component.onClickHandler();
		}

		return {
			c: function c() {
				div1 = createElement("div");
				div0 = createElement("div");
				addListener(div0, "click", click_handler);
				div0.title = div0_title_value = "Режим \"Ежегодно\" " + (ctx.annually ? "включен" : "выключен");
				div0.className = div0_class_value = "search-options-annually-control " + (ctx.annually ? 'annually-checked' : 'annually-unchecked');
				div1.className = "search-options-annually-container";
				setStyle(div1, "position", "absolute");
				setStyle(div1, "top", "23px");
				setStyle(div1, "right", "30px");
			},
			m: function m(target, anchor) {
				insert(target, div1, anchor);
				append(div1, div0);
			},
			p: function p(changed, ctx) {
				if (changed.annually && div0_title_value !== (div0_title_value = "Режим \"Ежегодно\" " + (ctx.annually ? "включен" : "выключен"))) {
					div0.title = div0_title_value;
				}

				if (changed.annually && div0_class_value !== (div0_class_value = "search-options-annually-control " + (ctx.annually ? 'annually-checked' : 'annually-unchecked'))) {
					div0.className = div0_class_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div1);
				}

				removeListener(div0, "click", click_handler);
			}
		};
	}

	function AnnuallyWidget(options) {
		init(this, options);
		this._state = assign(data$b(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$a(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(AnnuallyWidget.prototype, proto$4);
	assign(AnnuallyWidget.prototype, methods$8);

	/* src\js\components\uiElements\widgetElements\sidebar\components\searchTab\view\View.html generated by Svelte v2.16.1 */

	var fieldList = ['date', 'annually', 'clouds', 'angle', 'resolution', 'satellites', 'stereo', 'archive'];

	function data$c() {

		return _extends({}, createDefaultCriteria(), {

			restricted: false,
			cloudsLimits: { min: 0, max: 100 },
			angleLimits: { min: 0, max: 80 }
		});

		return defaultCriteria;
	}
	function isSomeSatellitesChecked(satellites) {
		var _satellites$pc = satellites.pc,
		    pc = _satellites$pc === undefined ? [] : _satellites$pc,
		    _satellites$ms = satellites.ms,
		    ms = _satellites$ms === undefined ? [] : _satellites$ms;

		return ms.some(function (x) {
			return x.checked;
		}) || pc.some(function (x) {
			return x.checked;
		});
	}
	var methods$9 = {
		getCriteria: function getCriteria() {

			var currentState = this.get();
			var result = {};

			fieldList.forEach(function (field) {
				return result[field] = currentState[field];
			});

			return result;
		},
		changeCriteria: function changeCriteria(paramName, paramValue) {

			var currentState = {};

			if (paramName === 'from' || paramName === 'to') {
				var _get = this.get(),
				    date = _get.date;

				var dateIndex = paramName === 'from' ? 0 : 1;
				currentState['date'] = date;
				currentState['date'][dateIndex] = paramValue;
			} else {
				currentState[paramName] = paramValue;
			}

			this.set(currentState);
		},
		onSearchClickHandler: function onSearchClickHandler() {

			this.fire('search');
		},
		getSearchPaneRef: function getSearchPaneRef() {

			return this.refs.searchPane;
		},
		resize: function resize() {
			var _document$body$queryS = document.body.querySelector('.scanex-sidebar').getBoundingClientRect(),
			    height = _document$body$queryS.height;

			var total = height - getTotalHeight(['.search-pane', '.search-options-footer']) - 11;
			var ctnrHeight = document.body.querySelector('#map .panes .search-options-content .search-options-fixed-section').getBoundingClientRect().height;
			var satellites = document.body.querySelector('#map .panes .search-options-content .search-options-satellites');

			satellites.style.maxHeight = total - ctnrHeight - 33 + 15 + 'px';
			satellites.style.height = satellites.style.maxHeight;
		}
	};

	function onstate$3(params) {
		var _params$changed = params.changed,
		    changed = _params$changed === undefined ? {} : _params$changed;

		var isChanged = false;

		fieldList.forEach(function (field) {
			if (changed[field]) isChanged = true;
		});

		if (isChanged) {
			var currentCriteria = this.getCriteria();
			this.fire('change', currentCriteria);
		}
	}
	function create_main_fragment$b(component, ctx) {
		var div0, text0, div4, div3, div2, div1, text1, text2, text3, text4, text5, text6, text7, div5, button, span, button_class_value;

		var datewidget0_initial_data = { mode: "from", date: ctx.date[0] };
		var datewidget0 = new DateWidget({
			root: component.root,
			store: component.store,
			data: datewidget0_initial_data
		});

		datewidget0.on("setDate", function (event) {
			component.changeCriteria('from', event.date);
		});

		var datewidget1_initial_data = { mode: "to", date: ctx.date[1] };
		var datewidget1 = new DateWidget({
			root: component.root,
			store: component.store,
			data: datewidget1_initial_data
		});

		datewidget1.on("setDate", function (event) {
			component.changeCriteria('to', event.date);
		});

		var annuallywidget_initial_data = { annually: ctx.annually };
		var annuallywidget = new AnnuallyWidget({
			root: component.root,
			store: component.store,
			data: annuallywidget_initial_data
		});

		annuallywidget.on("setAnnually", function (event) {
			component.changeCriteria('annually', event.annually);
		});

		var sliderwidget0_initial_data = {
			mode: "clouds",
			value: ctx.clouds,
			limits: ctx.cloudsLimits
		};
		var sliderwidget0 = new SliderWidget$1({
			root: component.root,
			store: component.store,
			data: sliderwidget0_initial_data
		});

		sliderwidget0.on("changeValues", function (event) {
			component.changeCriteria('clouds', event.value);
		});

		var sliderwidget1_initial_data = {
			mode: "angle",
			value: ctx.angle,
			limits: ctx.angleLimits
		};
		var sliderwidget1 = new SliderWidget$1({
			root: component.root,
			store: component.store,
			data: sliderwidget1_initial_data
		});

		sliderwidget1.on("changeValues", function (event) {
			component.changeCriteria('angle', event.value);
		});

		var archivewidget_initial_data = {
			restricted: ctx.restricted,
			archive: ctx.archive
		};
		var archivewidget = new ArchiveWidget({
			root: component.root,
			store: component.store,
			data: archivewidget_initial_data
		});

		archivewidget.on("setArchive", function (event) {
			component.changeCriteria('archive', event.archive);
		});

		var satelliteswidget_initial_data = {
			_satellites: ctx.satellites,
			restricted: ctx.restricted
		};
		var satelliteswidget = new SatellitesWidget({
			root: component.root,
			store: component.store,
			data: satelliteswidget_initial_data
		});

		satelliteswidget.on("changeSatellites", function (event) {
			component.changeCriteria('satellites', event.satellites);
		});

		function click_handler(event) {
			component.onSearchClickHandler();
		}

		return {
			c: function c() {
				div0 = createElement("div");
				text0 = createText("\r\n        \r\n");
				div4 = createElement("div");
				div3 = createElement("div");
				div2 = createElement("div");
				div1 = createElement("div");
				datewidget0._fragment.c();
				text1 = createText("\r\n                ");
				datewidget1._fragment.c();
				text2 = createText("\r\n            \r\n            ");
				annuallywidget._fragment.c();
				text3 = createText("\r\n\r\n        ");
				sliderwidget0._fragment.c();
				text4 = createText("\r\n        ");
				sliderwidget1._fragment.c();
				text5 = createText("\r\n\r\n        ");
				archivewidget._fragment.c();
				text6 = createText("\r\n\r\n    ");
				satelliteswidget._fragment.c();
				text7 = createText("\r\n\r\n");
				div5 = createElement("div");
				button = createElement("button");
				span = createElement("span");
				span.textContent = "Найти снимки";
				div0.className = "search-pane";
				div1.className = "search-options-period";
				div2.className = "search-options-period-section";
				setStyle(div2, "margin-top", "0");
				div3.className = "no-select search-options-fixed-section";
				div4.className = "no-select search-options-pane search-options search-options-content";
				addListener(button, "click", click_handler);
				button.type = "button";
				button.className = button_class_value = "search-options-search-button search-options-search-button-" + (isSomeSatellitesChecked(ctx.satellites) ? 'active' : 'passive');
				div5.className = "search-options-footer";
			},
			m: function m(target, anchor) {
				insert(target, div0, anchor);
				component.refs.searchPane = div0;
				insert(target, text0, anchor);
				insert(target, div4, anchor);
				append(div4, div3);
				append(div3, div2);
				append(div2, div1);
				datewidget0._mount(div1, null);
				append(div1, text1);
				datewidget1._mount(div1, null);
				append(div2, text2);
				annuallywidget._mount(div2, null);
				append(div3, text3);
				sliderwidget0._mount(div3, null);
				append(div3, text4);
				sliderwidget1._mount(div3, null);
				append(div3, text5);
				archivewidget._mount(div3, null);
				append(div4, text6);
				satelliteswidget._mount(div4, null);
				insert(target, text7, anchor);
				insert(target, div5, anchor);
				append(div5, button);
				append(button, span);
			},
			p: function p(changed, ctx) {
				var datewidget0_changes = {};
				if (changed.date) datewidget0_changes.date = ctx.date[0];
				datewidget0._set(datewidget0_changes);

				var datewidget1_changes = {};
				if (changed.date) datewidget1_changes.date = ctx.date[1];
				datewidget1._set(datewidget1_changes);

				var annuallywidget_changes = {};
				if (changed.annually) annuallywidget_changes.annually = ctx.annually;
				annuallywidget._set(annuallywidget_changes);

				var sliderwidget0_changes = {};
				if (changed.clouds) sliderwidget0_changes.value = ctx.clouds;
				if (changed.cloudsLimits) sliderwidget0_changes.limits = ctx.cloudsLimits;
				sliderwidget0._set(sliderwidget0_changes);

				var sliderwidget1_changes = {};
				if (changed.angle) sliderwidget1_changes.value = ctx.angle;
				if (changed.angleLimits) sliderwidget1_changes.limits = ctx.angleLimits;
				sliderwidget1._set(sliderwidget1_changes);

				var archivewidget_changes = {};
				if (changed.restricted) archivewidget_changes.restricted = ctx.restricted;
				if (changed.archive) archivewidget_changes.archive = ctx.archive;
				archivewidget._set(archivewidget_changes);

				var satelliteswidget_changes = {};
				if (changed.satellites) satelliteswidget_changes._satellites = ctx.satellites;
				if (changed.restricted) satelliteswidget_changes.restricted = ctx.restricted;
				satelliteswidget._set(satelliteswidget_changes);

				if (changed.satellites && button_class_value !== (button_class_value = "search-options-search-button search-options-search-button-" + (isSomeSatellitesChecked(ctx.satellites) ? 'active' : 'passive'))) {
					button.className = button_class_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div0);
				}

				if (component.refs.searchPane === div0) component.refs.searchPane = null;
				if (detach) {
					detachNode(text0);
					detachNode(div4);
				}

				datewidget0.destroy();
				datewidget1.destroy();
				annuallywidget.destroy();
				sliderwidget0.destroy();
				sliderwidget1.destroy();
				archivewidget.destroy();
				satelliteswidget.destroy();
				if (detach) {
					detachNode(text7);
					detachNode(div5);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	function View$3(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$c(), options.data);
		this._intro = true;

		this._handlers.state = [onstate$3];

		onstate$3.call(this, { changed: assignTrue({}, this._state), current: this._state });

		this._fragment = create_main_fragment$b(this, this._state);

		this.root._oncreate.push(function () {
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(View$3.prototype, proto$4);
	assign(View$3.prototype, methods$9);

	var SearchTabComponent = function (_BaseCompositedCompon) {
	    inherits(SearchTabComponent, _BaseCompositedCompon);

	    function SearchTabComponent() {
	        classCallCheck(this, SearchTabComponent);
	        return possibleConstructorReturn(this, (SearchTabComponent.__proto__ || Object.getPrototypeOf(SearchTabComponent)).apply(this, arguments));
	    }

	    createClass(SearchTabComponent, [{
	        key: 'init',
	        value: function init() {

	            this._addTabToSidebar();

	            this._view = new View$3({
	                target: document.querySelector('[data-pane-id="search"]')
	            });

	            this.initChildren([{
	                index: 'searchWidget',
	                constructor: SearchWidgetComponent
	            }]);

	            this._setViewData();

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {

	            var application = this.getApplication();
	            var events = application.getServiceEvents();
	            var store = application.getStore();
	            var view = this.getView();

	            events.on('sidebar:tab:resize', this._resizeSearchOptions.bind(this));
	            store.on('currentTab:changeUI', this._onTabChangeHandler.bind(this));
	            store.on('searchCriteria:update', this._setViewData.bind(this));
	            view.on('change', this.onCriteriaDataChange.bind(this));
	            view.on('search', this._onSearchButtonClick.bind(this));
	        }
	    }, {
	        key: '_setViewData',
	        value: function _setViewData() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var view = this.getView();

	            var defaultCriteria = store.getData('searchCriteria');
	            var userInfo = store.getData('userInfo');
	            var restricted = userInfo['IsAuthenticated'] && userInfo['Role'] === ACCESS_USER_ROLE;

	            view.set(_extends({}, defaultCriteria, { restricted: restricted }));
	        }
	    }, {
	        key: 'onCriteriaDataChange',
	        value: function onCriteriaDataChange(criteriaData) {

	            var application = this.getApplication();
	            var store = application.getStore();

	            store.rewriteData('searchCriteria', criteriaData);
	        }
	    }, {
	        key: '_onTabChangeHandler',
	        value: function _onTabChangeHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = store.getMetaItem('currentTab');

	            if (currentTab === TAB_SEARCH_NAME) {
	                this._setViewData();
	                this._resizeSearchOptions();
	            }
	        }
	    }, {
	        key: '_resizeSearchOptions',
	        value: function _resizeSearchOptions() {

	            var view = this.getView();

	            view.resize();
	        }
	    }, {
	        key: '_onSearchButtonClick',
	        value: function _onSearchButtonClick() {

	            this.events.trigger('searchButton:click');
	        }
	    }, {
	        key: '_addTabToSidebar',
	        value: function _addTabToSidebar() {

	            this._view = this.getParentComponent().getView().addTab({
	                id: 'search',
	                icon: 'sidebar-search',
	                opened: 'sidebar-search-opened',
	                closed: 'sidebar-search-closed',
	                tooltip: Translations$2.getText('search.title')
	            });
	        }
	    }, {
	        key: '_isSomeSatellitesChecked',
	        value: function _isSomeSatellitesChecked() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var searchCriteria = store.getData('searchCriteria');
	            var _searchCriteria$satel = searchCriteria.satellites,
	                _searchCriteria$satel2 = _searchCriteria$satel.pc,
	                pc = _searchCriteria$satel2 === undefined ? [] : _searchCriteria$satel2,
	                _searchCriteria$satel3 = _searchCriteria$satel.ms,
	                ms = _searchCriteria$satel3 === undefined ? [] : _searchCriteria$satel3;


	            return ms.some(function (x) {
	                return x.checked;
	            }) || pc.some(function (x) {
	                return x.checked;
	            });
	        }
	    }]);
	    return SearchTabComponent;
	}(BaseCompositedComponent);

	var View$4 = function () {
	    function View(config) {
	        classCallCheck(this, View);


	        this._tabComponent = config.parent || {};

	        this._main = this._tabComponent.getView();

	        this._main.innerHTML = '<div class="results-header">\n            <span class="results-title">' + Translations$2.getText('results.title') + '</span>\n            <span class="results-number"><span class="filtered-results-number">0</span>/<span class="all-results-number">0</span></span>\n            <span class="results-clear-filter" style="display:none;">' + Translations$2.getText('results.clearFilter') + '</span>\n            <div class="results-buttons">                \n                <i title="' + Translations$2.getText('results.quicklooks.cart') + '" class="quicklooks-cart"></i>\n                <i title="' + Translations$2.getText('results.clear') + '" class="results-clear"></i>\n            </div>\n        </div>\n        <div class="results-pane"></div>';
	    }

	    createClass(View, [{
	        key: 'getFilteredResultsNumSpan',
	        value: function getFilteredResultsNumSpan() {

	            var resultsNumSpan = this._main.querySelector('span.filtered-results-number');

	            return resultsNumSpan;
	        }
	    }, {
	        key: 'getAllResultsNumSpan',
	        value: function getAllResultsNumSpan() {

	            var resultsNumSpan = this._main.querySelector('span.all-results-number');

	            return resultsNumSpan;
	        }
	    }, {
	        key: 'getClearFilterSpan',
	        value: function getClearFilterSpan() {

	            var clearFilterSpan = this._main.querySelector('span.results-clear-filter');

	            return clearFilterSpan;
	        }
	    }, {
	        key: 'getQuickLooksCartButton',
	        value: function getQuickLooksCartButton() {

	            var quickLooksCartButton = this._main.querySelector('i.quicklooks-cart');

	            return quickLooksCartButton;
	        }
	    }, {
	        key: 'getClearResultsButton',
	        value: function getClearResultsButton() {

	            var clearResultsButton = this._main.querySelector('i.results-clear');

	            return clearResultsButton;
	        }
	    }, {
	        key: 'updateClearFilterSpan',
	        value: function updateClearFilterSpan(state) {

	            var clearFilter = this.getClearFilterSpan();
	            var display = state ? 'inline' : 'none';

	            clearFilter.style.display = display;
	        }
	    }, {
	        key: 'updateFilteredResultsNumber',
	        value: function updateFilteredResultsNumber(number) {

	            var resultsNumSpan = this.getFilteredResultsNumSpan();

	            resultsNumSpan.innerText = number;
	        }
	    }, {
	        key: 'updateAllResultsNumber',
	        value: function updateAllResultsNumber(number) {

	            var resultsNumSpan = this.getAllResultsNumSpan();

	            resultsNumSpan.innerText = number;
	        }
	    }, {
	        key: 'updateQuickLooksCartButton',
	        value: function updateQuickLooksCartButton(hasVisibleResults) {

	            var quickLooksCartButton = this.getQuickLooksCartButton();

	            if (hasVisibleResults) {
	                quickLooksCartButton.classList.add('quicklooks-cart-active');
	                quickLooksCartButton.classList.remove('quicklooks-cart-passive');
	            } else {
	                quickLooksCartButton.classList.remove('quicklooks-cart-active');
	                quickLooksCartButton.classList.add('quicklooks-cart-passive');
	            }
	        }
	    }]);
	    return View;
	}();

	var HeaderComponent = function (_BaseComponent) {
	    inherits(HeaderComponent, _BaseComponent);

	    function HeaderComponent() {
	        classCallCheck(this, HeaderComponent);
	        return possibleConstructorReturn(this, (HeaderComponent.__proto__ || Object.getPrototypeOf(HeaderComponent)).apply(this, arguments));
	    }

	    createClass(HeaderComponent, [{
	        key: 'init',
	        value: function init() {

	            var parentComponent = this.getParentComponent();

	            this._view = new View$4({
	                parent: parentComponent
	            });

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var events = application.getServiceEvents();
	            var store = application.getStore();
	            var clearFilterSpan = this._getClearFilterSpan();
	            var clearButton = this._getClearResultsButton();
	            var qlCartButton = this._getQuickLooksCartButton();

	            store.on('currentTab:changeUI', function (e) {
	                return _this2._onTabChangeHandler(e);
	            });
	            store.on('contours:researchedList', this._onStoreResearchHandler.bind(this));
	            store.on('contours:startResearchedList', this._onStoreResearchHandler.bind(this));
	            store.on('contours:showQuicklookList', this._setQuickLooksCartState.bind(this));
	            store.on('clientFilter:changeList', this._updateClearFilterSpan.bind(this));
	            store.on('clientFilter:changeList', this._updateFilteredNumber.bind(this));
	            store.on('contours:addToCartHeader', this._updateFilteredNumber.bind(this));
	            store.on('contours:addAllToCartHeader', this._updateFilteredNumber.bind(this));

	            events.on('contours:showQuicklookList', this._setQuickLooksCartState.bind(this));

	            clearFilterSpan.addEventListener('click', function () {
	                return _this2.events.trigger('filter:clear');
	            });
	            clearButton.addEventListener('click', function () {
	                return _this2.events.trigger('results:clear');
	            });
	            qlCartButton.addEventListener('click', function () {
	                return _this2.events.trigger('results:setVisibleToCart');
	            });
	        }
	    }, {
	        key: '_onTabChangeHandler',
	        value: function _onTabChangeHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = store.getMetaItem('currentTab');
	            var willUpdateResults = store.getMetaItem('updateResults');

	            if (currentTab === TAB_RESULTS_NAME && willUpdateResults) {

	                var allResults = store.getResults();
	                var isVisibleResults = allResults.some(function (item) {
	                    return getProperty(item, 'visible') === 'visible';
	                });

	                this._updateQuickLooksCartButton(isVisibleResults);
	            }
	        }
	    }, {
	        key: '_onStoreResearchHandler',
	        value: function _onStoreResearchHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var allResults = store.getResults();
	            var isVisibleResults = allResults.some(function (item) {
	                return getProperty(item, 'visible') === 'visible';
	            });
	            var allLength = allResults.length;

	            this._updateFilteredResultsNumber(allLength);
	            this._updateAllResultsNumber(allLength);
	            this._updateQuickLooksCartButton(isVisibleResults);
	        }
	    }, {
	        key: '_setQuickLooksCartState',
	        value: function _setQuickLooksCartState() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var allResults = store.getResults();
	            var isVisibleResults = allResults.some(function (item) {
	                return getProperty(item, 'visible') === 'visible';
	            });

	            this._updateQuickLooksCartButton(isVisibleResults);
	        }
	    }, {
	        key: '_getClearFilterSpan',
	        value: function _getClearFilterSpan() {

	            var view = this.getView();

	            return view.getClearFilterSpan();
	        }
	    }, {
	        key: '_getQuickLooksCartButton',
	        value: function _getQuickLooksCartButton() {

	            var view = this.getView();

	            return view.getQuickLooksCartButton();
	        }
	    }, {
	        key: '_getClearResultsButton',
	        value: function _getClearResultsButton() {

	            var view = this.getView();

	            return view.getClearResultsButton();
	        }
	    }, {
	        key: '_updateClearFilterSpan',
	        value: function _updateClearFilterSpan() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var _store$getData = store.getData('clientFilter'),
	                isChanged = _store$getData.isChanged;

	            var view = this.getView();

	            view.updateClearFilterSpan(isChanged);
	        }
	    }, {
	        key: '_updateFilteredNumber',
	        value: function _updateFilteredNumber() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var _store$getData2 = store.getData('clientFilter'),
	                isChanged = _store$getData2.isChanged;

	            var filteredResults = store[isChanged ? 'getFilteredResults' : 'getResults']();

	            this._updateFilteredResultsNumber(filteredResults.length);
	        }
	    }, {
	        key: '_updateFilteredResultsNumber',
	        value: function _updateFilteredResultsNumber(number) {

	            var view = this.getView();

	            view.updateFilteredResultsNumber(number);
	        }
	    }, {
	        key: '_updateAllResultsNumber',
	        value: function _updateAllResultsNumber(number) {

	            var view = this.getView();

	            view.updateAllResultsNumber(number);
	        }
	    }, {
	        key: '_updateQuickLooksCartButton',
	        value: function _updateQuickLooksCartButton(hasVisible) {

	            var view = this.getView();

	            view.updateQuickLooksCartButton(hasVisible);
	        }
	    }]);
	    return HeaderComponent;
	}(BaseComponent);

	var Tristate = function () {
		function Tristate(target, items) {
			classCallCheck(this, Tristate);

			this._target = target;
			this._items = items;
			this._handleClick = this._handleClick.bind(this);
			this.update = this.update.bind(this);
			this._target.addEventListener('click', this._handleClick);
			this._attachEvents(this._items);
			this.state = this._items;
		}

		createClass(Tristate, [{
			key: '_handleClick',
			value: function _handleClick() {
				var state = this._target.checked;
				for (var i = 0; i < this._items.length; ++i) {
					var checked = this._items[i].checked;
					if (checked != state) {
						this._items[i].click();
					}
				}
			}
		}, {
			key: '_attachEvents',
			value: function _attachEvents(items) {
				for (var i = 0; i < items.length; ++i) {
					items[i].addEventListener('click', this.update);
				}
			}
		}, {
			key: 'update',
			value: function update() {
				if (this._items.length > 1) {
					var _state = this.state,
					    indeterminate = _state.indeterminate,
					    checked = _state.checked;

					this._target.indeterminate = indeterminate;
					if (!indeterminate) {
						this._target.checked = checked;
					}
				}
			}
		}, {
			key: 'state',
			set: function set$$1(items) {
				this._items = items;
				this._attachEvents(this._items);
				this.update();
			},
			get: function get$$1() {
				var checked = this._items[0].checked;
				for (var i = 1; i < this._items.length; i++) {
					if (this._items[i].checked != checked) {
						return { indeterminate: true };
					}
				}
				return { indeterminate: false, checked: checked };
			}
		}]);
		return Tristate;
	}();

	var ENUM_ID = typeof Symbol === 'function' ? Symbol('enumeration id') : 1e+6;

	var create_index = function create_index(items, indexBy) {
	    return items.reduce(function (a, item) {
	        if (indexBy) {
	            if (Array.isArray(indexBy) && indexBy.length > 0 && indexBy.every(function (k) {
	                return item.hasOwnProperty(k);
	            })) {
	                var values = indexBy.map(function (k) {
	                    return item[k];
	                });
	                var idx = get_hash(values);
	                if (idx) {
	                    a[idx] = item;
	                }
	            } else if (typeof indexBy === 'string' && item.hasOwnProperty(indexBy)) {
	                var _idx = item[indexBy];
	                if (_idx) {
	                    a[_idx] = item;
	                }
	            }
	        } else {
	            item[ENUM_ID] = (0 | Math.random() * 9e+6).toString(36);
	            a[ENUM_ID] = item;
	        }
	        return a;
	    }, {});
	};

	var get_hash = function get_hash(values) {
	    if (Array.isArray(values) && values.length > 0) {
	        return btoa(values.join(''));
	    } else if (typeof values === 'string') {
	        return btoa(values);
	    } else {
	        return null;
	    }
	};

	var serialize = function serialize(obj) {
	    return Object.keys(obj).map(function (k) {
	        return obj[k];
	    });
	};

	var sort = function sort(items, field, asc) {
	    if (field) {
	        return items.map(function (e, i) {
	            return { i: i, v: e };
	        }).sort(function (a, b) {
	            var left = a.v[field],
	                right = b.v[field];

	            if (left == null && right != null) {
	                return asc ? -1 : 1;
	            }

	            if (left != null && right == null) {
	                return asc ? 1 : -1;
	            }

	            if (typeof left == 'string') {
	                left = left.toLowerCase();
	            }

	            if (typeof right == 'string') {
	                right = right.toLowerCase();
	            }

	            if (left < right) {
	                return asc ? -1 : 1;
	            } else if (left > right) {
	                return asc ? 1 : -1;
	            } else if (left == right) {
	                var i = a.index,
	                    k = b.index;
	                if (i < k) {
	                    return asc ? -1 : 1;
	                } else if (i > k) {
	                    return asc ? 1 : -1;
	                } else {
	                    return 0;
	                }
	            }
	        }).map(function (e) {
	            return e.v;
	        });
	    } else {
	        return items;
	    }
	};

	var DataGrid = function (_EventTarget) {
	    inherits(DataGrid, _EventTarget);

	    function DataGrid(container, _ref) {
	        var _ref$hasHeader = _ref.hasHeader,
	            _ref$align = _ref.align,
	            align = _ref$align === undefined ? true : _ref$align,
	            _ref$fields = _ref.fields,
	            fields = _ref$fields === undefined ? {} : _ref$fields,
	            _ref$sortBy = _ref.sortBy,
	            sortBy = _ref$sortBy === undefined ? {} : _ref$sortBy,
	            _ref$filter = _ref.filter,
	            filter = _ref$filter === undefined ? null : _ref$filter,
	            _ref$adjustMode = _ref.adjustMode,
	            adjustMode = _ref$adjustMode === undefined ? 'auto' : _ref$adjustMode,
	            indexBy = _ref.indexBy;
	        classCallCheck(this, DataGrid);

	        var _this = possibleConstructorReturn(this, (DataGrid.__proto__ || Object.getPrototypeOf(DataGrid)).call(this));

	        _this._container = container;
	        _this._container.classList.add('table-list');
	        _this._fields = fields;
	        _this._stats = {};
	        _this._align = align;
	        _this._sortBy = sortBy;
	        _this._filter = filter;
	        _this._filtered = false;
	        _this._adjustMode = adjustMode;
	        _this._indexBy = indexBy;
	        _this._index = {};

	        _this._header = document.createElement('div');
	        _this._header.className = 'table-list-header';
	        _this._container.appendChild(_this._header);

	        _this._body = document.createElement('div');
	        _this._body.className = 'table-list-body';
	        _this._container.appendChild(_this._body);
	        _this._stopPropagation = _this._stopPropagation.bind(_this);
	        return _this;
	    }

	    createClass(DataGrid, [{
	        key: '_stopPropagation',
	        value: function _stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: 'getItemByIndex',
	        value: function getItemByIndex(id) {
	            return this._index[id];
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            var _this2 = this;

	            if (this._sortBy.hasOwnProperty('field') && this._sortBy.hasOwnProperty('asc')) {
	                var i = -1;
	                var keys = Object.keys(this._fields);
	                for (var k = 0; k < keys.length; ++k) {
	                    if (this._sortBy.field === keys[k]) {
	                        i = k;
	                        break;
	                    }
	                }
	                if (i >= 0) {
	                    this._renderHeader();
	                    this._reorder(i, this._sortBy.field, this._sortBy.asc);
	                    this._attachColumnsEvents();
	                }
	            } else {
	                this._render(this.items);
	            }
	            Object.keys(this._fields).filter(function (k) {
	                return _typeof(_this2._fields[k].tristate) === 'object';
	            }).map(function (k) {
	                return _this2._fields[k].tristate;
	            }).forEach(function (t) {
	                return t.update();
	            });
	        }
	    }, {
	        key: '_getCellAlign',
	        value: function _getCellAlign(type) {
	            switch (type) {
	                case 'integer':
	                case 'float':
	                    return 'right';
	                case 'selector':
	                case 'button':
	                case 'boolean':
	                case 'color':
	                    return 'center';
	                default:
	                    return 'left';
	            }
	        }
	    }, {
	        key: '_renderCell',
	        value: function _renderCell(item, col) {
	            var field = this._fields[col];
	            var width = field.width;
	            var align = this._align ? ' style="text-align: ' + (field.align || this._getCellAlign(field.type)) + '"' : '';
	            switch (field.type) {
	                case 'selector':
	                    return Boolean(item[col]) ? '<td' + align + '><input type="checkbox" checked value="' + col + '" /></td>' : '<td' + align + '><input type="checkbox" value="' + col + '" /></td>';
	                case 'button':
	                    return '<td' + align + '><i class="table-list-button ' + field.button + '" /></td>';
	                case 'boolean':
	                    var val = typeof field.formatter === 'function' ? field.formatter(item) : item[col];
	                    var cell = field.yes || field.no ? '<i class="table-list-button ' + field.icon + ' ' + (val ? field.yes || '' : field.no || '') + '"></i>' : '' + (val ? '+' : '');
	                    return '<td' + align + '>' + cell + '</td>';
	                case 'color':
	                    return '<td' + align + '>\n                        <div class="table-list-color" style="' + (typeof item[col] !== 'undefined' ? 'border-color: ' + item[col] : 'border: none') + ' ">&nbsp;</div>\n                    </td>';
	                default:
	                    if (typeof field.styler === 'function') {
	                        return '<td' + align + '><i class="' + field.styler(item) + '"></i></td>';
	                    } else {
	                        var _val = typeof field.formatter === 'function' ? field.formatter(item) : item[col];
	                        return '<td' + align + '><span>' + _val + '</span>' + (field.edit ? '<i class="cell-edit"></i>' : '') + '</td>';
	                    }

	            }
	        }
	    }, {
	        key: '_attachEvents',
	        value: function _attachEvents() {
	            var rows = this._body.querySelectorAll('tr');
	            for (var i = 0; i < rows.length; ++i) {
	                var row = rows[i];
	                var item = this._index[row.getAttribute('data-item-id')];
	                this._attachRowEvents(row, item);
	            }
	        }
	    }, {
	        key: '_attachRowEvents',
	        value: function _attachRowEvents(row, item) {
	            row.addEventListener('mouseover', this._handleRowMouseOver.bind(this, row, item));
	            row.addEventListener('mouseout', this._handleRowMouseOut.bind(this, row, item));
	            var cells = row.querySelectorAll('td');
	            var fields = Object.keys(this._fields);
	            for (var j = 0; j < cells.length; ++j) {
	                var name = fields[j];
	                var field = this._fields[name];
	                var cell = cells[j];
	                if (typeof field.edit === 'string') {
	                    var val = cell.querySelector('span');
	                    val.addEventListener('click', this._handleCellClick.bind(this, row, val, name, field, item));
	                    var btn = cell.querySelector('i');
	                    btn.addEventListener('click', this._handleCellEdit.bind(this, row, cell, val, btn, name, field, item));
	                } else {
	                    cell.addEventListener('click', this._handleCellClick.bind(this, row, cell, name, field, item));
	                }
	            }
	        }
	    }, {
	        key: '_renderRow',
	        value: function _renderRow(item) {
	            if (typeof this._filter !== 'function' || !this._filtered || this._filter(item)) {
	                var idx = null;
	                if (Array.isArray(this._indexBy) && this._indexBy.length > 0 && this._indexBy.every(function (k) {
	                    return item.hasOwnProperty(k);
	                })) {
	                    var values = this._indexBy.map(function (k) {
	                        return item[k];
	                    });
	                    idx = get_hash(values);
	                } else if (typeof this._indexBy === 'string' && item.hasOwnProperty(this._indexBy)) {
	                    idx = item[this._indexBy];
	                } else {
	                    idx = item[ENUM_ID];
	                }
	                return '<tr data-item-id="' + idx + '">' + Object.keys(this._fields).map(this._renderCell.bind(this, item)).join('') + '</tr>';
	            }
	        }
	    }, {
	        key: '_render',
	        value: function _render(items) {
	            this._renderHeader();
	            this._renderBody(items);
	            this.adjustHeader();
	            this._updateSelector();
	            this._attachColumnsEvents();
	        }
	    }, {
	        key: '_renderBody',
	        value: function _renderBody(items) {
	            this._clearEvents();
	            if (items.length > 0) {
	                this._body.innerHTML = '<table>\n                    <colgroup>' + Object.keys(this._fields).map(function (x) {
	                    return '<col />';
	                }).join('') + '</colgroup>\n                    ' + items.map(this._renderRow.bind(this)).join('') + '\n                </table>';
	                this._attachEvents();
	            } else {
	                this._body.innerHTML = '';
	            }
	        }
	    }, {
	        key: '_renderHeaderColumn',
	        value: function _renderHeaderColumn(col) {
	            var field = this._fields[col];
	            var el = '';
	            switch (field.type) {
	                case 'selector':
	                    el = '<input class="table-list-tristate" type="checkbox" />';
	                    break;
	                case 'boolean':
	                case 'string':
	                    if (typeof field.name === 'string') {
	                        el = '<span>' + field.name + '</span>';
	                    } else if (typeof field.columnIcon === 'string') {
	                        el = '<i class="' + field.columnIcon + '"></i>';
	                    }
	                    break;
	                case 'button':
	                    if (typeof field.columnIcon === 'string') {
	                        el = '<i class="' + field.columnIcon + '"></i>';
	                    } else if (typeof field.name === 'string') {
	                        el = '<span>' + field.name + '</span>';
	                    }
	                    break;
	                default:
	                    if (typeof field.name === 'string') {
	                        el = '<span>' + field.name + '</span>';
	                    }
	                    break;
	            }
	            return '<td' + (field.tooltip ? ' title="' + field.tooltip + '"' : '') + ' class="table-list-col" data-field="' + col + '">\n            ' + el + '\n            <i class="table-list-sort"' + (field.sortable ? '' : ' style="display: none"') + '></i>\n        </td>';
	        }
	    }, {
	        key: '_attachColumnsEvents',
	        value: function _attachColumnsEvents() {
	            var _this3 = this;

	            if (this.hasItems) {
	                var cols = this._header.querySelectorAll('td');
	                var names = Object.keys(this._fields);

	                var _loop = function _loop(i) {
	                    var name = names[i];
	                    var field = _this3._fields[name];
	                    var col = cols[i];
	                    if (field.sortable) {
	                        col.addEventListener('click', _this3._handleSort.bind(_this3, i));
	                    }
	                    if (field.type === 'selector') {
	                        var ts = col.querySelector('.table-list-tristate');
	                        ts.addEventListener('click', _this3._stopPropagation);
	                        var items = _this3._body.querySelectorAll('td:nth-child(' + (i + 1) + ') input[type="checkbox"]');
	                        field.tristate = new Tristate(ts, items);
	                    }
	                    col.addEventListener('click', function (e) {
	                        var event = document.createEvent('Event');
	                        event.initEvent('column:click', false, false);
	                        event.detail = { col: col, field: field, name: name };
	                        _this3.dispatchEvent(event);
	                    });
	                };

	                for (var i = 0; i < cols.length; ++i) {
	                    _loop(i);
	                }
	            }
	        }
	    }, {
	        key: '_updateColumns',
	        value: function _updateColumns(k, asc) {
	            var buttons = this._header.querySelectorAll('.table-list-sort');
	            for (var i = 0; i < buttons.length; ++i) {
	                var btn = buttons[i];
	                if (i === k) {
	                    if (asc) {
	                        btn.classList.remove('table-list-sort-down');
	                        btn.classList.add('table-list-sort-up');
	                    } else {
	                        btn.classList.remove('table-list-sort-up');
	                        btn.classList.add('table-list-sort-down');
	                    }
	                } else {
	                    btn.classList.remove('table-list-sort-up');
	                    btn.classList.remove('table-list-sort-down');
	                }
	            }
	        }
	    }, {
	        key: '_updateSelector',
	        value: function _updateSelector() {
	            var cols = this._header.querySelectorAll('td');
	            var fields = serialize(this._fields);
	            for (var i = 0; i < cols.length; ++i) {
	                var _field = fields[i];
	                if (_field.tristate) {
	                    var items = this._body.querySelectorAll('td:nth-child(' + (i + 1) + ') input[type="checkbox"]');
	                    _field.tristate.state = items;
	                    break;
	                }
	            }
	        }
	    }, {
	        key: '_reorder',
	        value: function _reorder(i, name, asc) {
	            this._updateColumns(i, asc);
	            this._renderBody(sort(this.items, name, asc));
	            this.adjustHeader();
	            this._updateSelector();
	        }
	    }, {
	        key: '_handleSort',
	        value: function _handleSort(k) {
	            this._sortBy.asc = !this._sortBy.asc;
	            this._sortBy.field = Object.keys(this._fields)[k];
	            this._reorder(k, this._sortBy.field, this._sortBy.asc);

	            var event = document.createEvent('Event');
	            event.initEvent('sort', false, false);
	            event.detail = { field: this._fields[this._sortBy.field], name: this._sortBy.field, asc: this._sortBy.asc };
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_renderHeader',
	        value: function _renderHeader() {
	            this._header.innerHTML = '<table>\n            <colgroup>' + Object.keys(this._fields).map(function (x) {
	                return '<col />';
	            }).join('') + '</colgroup>\n            <tr>' + Object.keys(this._fields).map(this._renderHeaderColumn.bind(this)).join('') + '</tr>\n        </table>';
	        }
	    }, {
	        key: 'adjustHeader',
	        value: function adjustHeader() {
	            if (this.hasItems) {
	                var fields = serialize(this._fields);
	                var widths = [];
	                var hc = this._header.querySelector('colgroup').children;
	                var bc = this._body.querySelector('colgroup').children;
	                if (this._adjustMode === 'auto') {
	                    var row = this._body.querySelector('tr');
	                    if (row && row.children) {
	                        var cells = row.children;
	                        var cols = this._header.querySelectorAll('td');
	                        for (var i = 0; i < cells.length; ++i) {
	                            var c = cells[i].getBoundingClientRect();
	                            var h = cols[i].getBoundingClientRect();
	                            widths.push(Math.max(c.width, h.width));
	                        }
	                        for (var _i = 0; _i < hc.length; ++_i) {
	                            var w = widths[_i] + 'px';
	                            hc[_i].style.width = w;
	                            bc[_i].style.width = w;
	                        }
	                    }
	                } else {
	                    for (var _i2 = 0; _i2 < hc.length; ++_i2) {
	                        var _w = fields[_i2].width + 'px';
	                        hc[_i2].style.width = _w;
	                        bc[_i2].style.width = _w;
	                    }
	                }
	            }
	        }
	    }, {
	        key: '_clearEvents',
	        value: function _clearEvents() {
	            var rows = this._container.querySelectorAll('tr');
	            for (var i = 0; i < rows.length; ++i) {
	                var row = rows[i];
	                row.removeEventListener('mouseover', this._handleRowMouseOver);
	                row.removeEventListener('mouseout', this._handleRowMouseOut);
	                this._clearRowEvents(row);
	            }
	        }
	    }, {
	        key: '_clearRowEvents',
	        value: function _clearRowEvents(row) {
	            var cells = row.querySelectorAll('td');
	            for (var i = 0; i < cells.length; ++i) {
	                cells[i].removeEventListener('click', this._handleCellClick);
	            }
	        }
	    }, {
	        key: '_handleCellClick',
	        value: function _handleCellClick(row, cell, name, field, item, e) {

	            var event = document.createEvent('Event');
	            event.initEvent('cell:click', false, false);
	            event.detail = { row: row, cell: cell, name: name, field: field, item: item };
	            this.dispatchEvent(event);

	            e.stopPropagation();
	        }
	    }, {
	        key: '_handleRowMouseOver',
	        value: function _handleRowMouseOver(row, item, e) {
	            var _this4 = this;

	            var cells = row.querySelectorAll('td');
	            Object.keys(this._fields).map(function (k) {
	                return _this4._fields[k];
	            }).forEach(function (x, j) {
	                if (typeof x.edit === 'string') {
	                    var cell = cells[j];
	                    if (!cell.querySelector('input')) {
	                        cell.querySelector('i').classList.add(x.edit);
	                    }
	                }
	            });
	            var event = document.createEvent('Event');
	            event.initEvent('row:mouseover', false, false);
	            event.detail = { row: row, item: item };
	            this.dispatchEvent(event);

	            e.stopPropagation();
	        }
	    }, {
	        key: '_handleRowMouseOut',
	        value: function _handleRowMouseOut(row, item, e) {
	            var _this5 = this;

	            var cells = row.querySelectorAll('td');
	            Object.keys(this._fields).map(function (k) {
	                return _this5._fields[k];
	            }).forEach(function (x, j) {
	                if (typeof x.edit === 'string') {
	                    cells[j].querySelector('i').classList.remove(x.edit);
	                }
	            });

	            var event = document.createEvent('Event');
	            event.initEvent('row:mouseout', false, false);
	            event.detail = { row: row, item: item };
	            this.dispatchEvent(event);

	            e.stopPropagation();
	        }
	    }, {
	        key: '_handleCellEdit',
	        value: function _handleCellEdit(row, cell, val, btn, name, field, item) {
	            var _this6 = this;

	            var input = document.createElement('input');
	            input.className = 'cell-edit-input';
	            input.type = 'text';
	            input.value = cell.innerText;
	            input.style.width = '100%';
	            val.style.display = 'none';
	            btn.classList.remove(field.edit);
	            var detach = function detach() {
	                document.body.removeEventListener('click', change);
	                input.removeEventListener('keydown', handler);
	                // input.removeEventListener('blur', change);
	                input.removeEventListener('focus', _this6._stopPropagation);
	                input.removeEventListener('click', _this6._stopPropagation);
	                cell.removeChild(input);

	                _this6.adjustHeader();

	                var event = document.createEvent('Event');
	                event.initEvent('cell:edit', false, false);
	                event.detail = { row: row, cell: cell, name: name, field: field, item: item };
	                _this6.dispatchEvent(event);
	            };
	            var change = function change() {
	                val.innerText = input.value;
	                item[name] = val.innerText;
	                val.style.display = 'inline-block';
	                detach();
	            };
	            var revert = function revert() {
	                val.innerText = item[name];
	                val.style.display = 'inline-block';
	                detach();
	            };
	            var handler = function handler(e) {
	                switch (e.keyCode) {
	                    case 13:
	                        change();
	                        break;
	                    case 27:
	                        revert();
	                        break;
	                    default:
	                        break;
	                }
	            };
	            document.body.addEventListener('click', change);
	            input.addEventListener('focus', this._stopPropagation);
	            input.addEventListener('keydown', handler);
	            input.addEventListener('click', this._stopPropagation);
	            cell.insertBefore(input, val);
	            input.focus();
	            input.select();
	            // input.addEventListener('blur', change);
	        }
	    }, {
	        key: 'getRow',
	        value: function getRow(id) {
	            var items = this._body.querySelectorAll('[data-item-id]');
	            for (var i = 0; i < items.length; ++i) {
	                var item = items[i];
	                if (item.getAttribute('data-item-id') === id.toString()) {
	                    return item;
	                }
	            }
	            return null;
	        }
	    }, {
	        key: 'getCol',
	        value: function getCol(name) {
	            var items = this._header.querySelectorAll('[data-field]');
	            for (var i = 0; i < items.length; ++i) {
	                var item = items[i];
	                if (item.getAttribute('data-field') === name) {
	                    return item;
	                }
	            }
	            return null;
	        }
	    }, {
	        key: 'scrollToRow',
	        value: function scrollToRow(id) {
	            var rows = this._body.querySelectorAll('[data-item-id]');
	            for (var i = 0; i < rows.length; ++i) {
	                var row = rows[i];
	                if (row.getAttribute('data-item-id') === id.toString()) {
	                    var _row$getBoundingClien = row.getBoundingClientRect(),
	                        height = _row$getBoundingClien.height;

	                    this._body.scrollTop = i * height;
	                    break;
	                }
	            }
	        }
	    }, {
	        key: 'redrawRow',
	        value: function redrawRow(id, item) {
	            var row = this.getRow(id);
	            this._index[id] = item;
	            if (row) {
	                this._clearRowEvents(row);
	                row.insertAdjacentHTML('afterend', this._renderRow(item));
	                row.parentElement.removeChild(row);
	                this._attachRowEvents(this.getRow(id), item);
	                this._updateSelector();
	            }
	        }
	    }, {
	        key: 'items',
	        set: function set$$1(value) {
	            if (Array.isArray(value) && value.length > 0) {
	                this._index = create_index(value, this._indexBy);
	                if (this._sortBy.hasOwnProperty('field') && this._sortBy.hasOwnProperty('asc')) {
	                    var i = -1;
	                    var keys = Object.keys(this._fields);
	                    for (var k = 0; k < keys.length; ++k) {
	                        if (this._sortBy.field === keys[k]) {
	                            i = k;
	                            break;
	                        }
	                    }
	                    if (i >= 0) {
	                        this._renderHeader();
	                        this._reorder(i, this._sortBy.field, this._sortBy.asc);
	                        this._attachColumnsEvents();
	                    }
	                } else {
	                    this._render(this.items);
	                }
	            } else {
	                this._index = {};
	                this._render(this.items);
	            }
	        },
	        get: function get$$1() {
	            return sort(serialize(this._index), this._sortBy.field, this._sortBy.asc);
	        }
	    }, {
	        key: 'hasItems',
	        get: function get$$1() {
	            return Object.keys(this._index).length > 0;
	        }
	    }, {
	        key: 'filtered',
	        get: function get$$1() {
	            return this._filtered;
	        },
	        set: function set$$1(value) {
	            this._filtered = value;
	            this.refresh();
	        }
	    }, {
	        key: 'filteredItems',
	        get: function get$$1() {
	            var _this7 = this;

	            if (typeof this._filter === 'function' && this.filtered) {
	                return this.items.filter(function (item) {
	                    return _this7._filter(item);
	                });
	            } else {
	                return this.items;
	            }
	        }
	    }, {
	        key: 'filter',
	        set: function set$$1(value) {
	            this._filter = value;
	        }
	    }, {
	        key: 'count',
	        get: function get$$1() {
	            var rows = this._body.querySelectorAll('[data-item-id]');
	            if (rows && rows.length) {
	                return rows.length;
	            } else {
	                return 0;
	            }        }
	    }]);
	    return DataGrid;
	}(EventTarget);

	var ResultList = function (_EventTarget) {
	    inherits(ResultList, _EventTarget);

	    function ResultList(_ref) {
	        var application = _ref.application,
	            restricted = _ref.restricted;
	        classCallCheck(this, ResultList);

	        var _this = possibleConstructorReturn(this, (ResultList.__proto__ || Object.getPrototypeOf(ResultList)).call(this));

	        _this._cart = {};
	        _this._application = application;
	        _this._restricted = restricted;
	        _this._container = document.querySelector('#map div.leaflet-control div.panes div.results-pane');
	        _this._container.classList.add('result-list');
	        _this._onColumnClick = _this._onColumnClick.bind(_this);
	        _this._onCellClick = _this._onCellClick.bind(_this);
	        _this._onRowMouseOver = _this._onRowMouseOver.bind(_this);
	        _this._onRowMouseOut = _this._onRowMouseOut.bind(_this);
	        _this._onSort = _this._onSort.bind(_this);
	        _this._activeInfo = null;
	        _this._disableMouseHover = false;
	        _this._indexBy = 'gmx_id';
	        _this._fields = {
	            'visible': {
	                type: 'string',
	                icon: 'search',
	                default: false,
	                width: 30,
	                styler: function styler(item) {
	                    switch (item.visible) {
	                        case 'visible':
	                            return 'search search-visibility-off';
	                        case 'hidden':
	                            return 'search search-visibility-on';
	                        case 'loading':
	                            return 'search-visibility-loading';
	                        case 'failed':
	                            return 'search-visibility-failed';
	                        default:
	                            return '';
	                    }
	                }
	            },
	            'stereo': {
	                columnIcon: 'search search-stereo',
	                type: 'boolean',
	                icon: 'search',
	                yes: 'search-stereo',
	                sortable: true,
	                default: false,
	                tooltip: Translations$2.getText('results.stereo'),
	                width: 32,
	                formatter: function formatter(item) {
	                    switch (_typeof(item.stereo)) {
	                        case 'string':
	                            return item.stereo !== 'NONE' && item.stereo !== '';
	                        case 'boolean':
	                            return item.stereo;
	                        default:
	                            return false;
	                    }
	                }
	            },
	            'platform': {
	                type: 'string',
	                name: Translations$2.getText('results.satellite'),
	                sortable: true,
	                formatter: function formatter(item) {
	                    var satelliteName = '';
	                    switch (item.platform) {
	                        case 'SPOT6':
	                        case 'SPOT 6':
	                            satelliteName = item.islocal ? 'SPOT 6' : 'SPOT 6 (A)';
	                            break;
	                        case 'SPOT7':
	                        case 'SPOT 7':
	                            satelliteName = item.islocal ? 'SPOT 7' : 'SPOT 7 (A)';
	                            break;
	                        case 'SPOT-6':
	                            satelliteName = item.product ? 'SPOT 6 (P)' : 'SPOT 6';
	                            break;
	                        case 'SPOT-7':
	                            satelliteName = item.product ? 'SPOT 7 (P)' : 'SPOT 7';
	                            break;
	                        case 'SPOT 5':
	                            var sp5 = 'SPOT 5';
	                            if (item.sensor === 'J') {
	                                if (item.spot5_a_exists & item.spot5_b_exists) {
	                                    sp5 = 'SPOT 5 - 2.5ms';
	                                } else if (item.spot5_a_exists || item.spot5_b_exists) {
	                                    sp5 = 'SPOT 5 - 5ms';
	                                } else {
	                                    sp5 = 'SPOT 5 - 10ms';
	                                }
	                            } else if (item.sensor === 'A' || item.sensor === 'B' && !item.spot5_b_exists) {
	                                sp5 = 'SPOT 5 - 5pan';
	                            } else if (item.sensor === 'A' && item.spot5_b_exists) {
	                                sp5 = 'SPOT 5 - 2.5pan';
	                            }
	                            satelliteName = '' + sp5 + (item.islocal ? '' : ' (A)');
	                            break;
	                        case 'Ресурс-П1':
	                        case 'Ресурс-П2':
	                        case 'Ресурс-П3':
	                            if (item.spot5_a_exists && !item.spot5_b_exists) {
	                                satelliteName = item.platform + ' pan';
	                            } else if (item.spot5_b_exists) {
	                                satelliteName = item.platform + ' ms';
	                            } else {
	                                return item.platform;
	                            }
	                            break;
	                        case 'GF1':
	                            switch (item.sensor) {
	                                case 'A':
	                                    satelliteName = 'GaoFen-1 (2m)';
	                                    break;
	                                case 'B':
	                                    satelliteName = 'GaoFen-1 (16m)';
	                                    break;
	                                default:
	                                    satelliteName = 'GaoFen-1';
	                            }
	                            break;
	                        case '1A-PHR-1A':
	                            satelliteName = '1ATLAS (PHR-1A)';
	                            break;
	                        case '1A-PHR-1B':
	                            satelliteName = '1ATLAS (PHR-1B)';
	                            break;
	                        case '1A-SPOT-6':
	                            satelliteName = '1ATLAS (SP6)';
	                            break;
	                        case '1A-SPOT-7':
	                            satelliteName = '1ATLAS (SP7)';
	                            break;
	                        case 'TripleSat Constellation-1':
	                            satelliteName = 'Triplesat-1';
	                            break;
	                        case 'TripleSat Constellation-2':
	                            satelliteName = 'Triplesat-2';
	                            break;
	                        case 'TripleSat Constellation-3':
	                            satelliteName = 'Triplesat-3';
	                            break;
	                        case 'GJ1A':
	                            satelliteName = 'Superview-1 01';
	                            break;
	                        case 'GJ1B':
	                            satelliteName = 'Superview-1 02';
	                            break;
	                        case 'GJ1C':
	                            satelliteName = 'Superview-1 03';
	                            break;
	                        case 'GJ1D':
	                            satelliteName = 'Superview-1 04';
	                            break;
	                        case 'PHR1A':
	                        case 'PHR-1A':
	                            satelliteName = 'Pléiades-1A' + (item.islocal ? ' (L)' : '');
	                            break;
	                        case 'PHR1B':
	                        case 'PHR-1B':
	                            satelliteName = 'Pléiades-1B' + (item.islocal ? ' (L)' : '');
	                            break;
	                        default:
	                            satelliteName = '' + getSatelliteName$1(item.platform) + (item.islocal ? ' (L)' : '');
	                    }

	                    //const substredName = satelliteName.length > 14 ? satelliteName.substr(0, 12) + '..' : satelliteName;
	                    var substredName = satelliteName;

	                    return '<span title="' + satelliteName + '">' + substredName + '</span>';
	                },
	                width: 100
	            },
	            'cloudness': {
	                type: 'float',
	                name: Translations$2.getText('results.clouds'),
	                sortable: true,
	                formatter: function formatter(item) {
	                    var value = item.cloudness;
	                    return value < 0 ? '' : Math.round(value);
	                },
	                default: 0,
	                align: 'center',
	                width: 55
	            },
	            'tilt': {
	                type: 'float',
	                name: Translations$2.getText('results.angle'),
	                sortable: true,
	                formatter: function formatter(item) {
	                    var value = item.tilt;
	                    return value < 0 || typeof value !== 'number' ? '' : Math.round(value);
	                },
	                default: 0,
	                align: 'center',
	                width: 55
	            },
	            'acqdate': {
	                type: 'date',
	                name: Translations$2.getText('results.date'),
	                formatter: function formatter(item) {
	                    return item.acqdate.toLocaleDateString();
	                },
	                sortable: true,
	                width: 71
	            },
	            'info': {
	                type: 'boolean',
	                icon: 'search',
	                yes: 'search-info-off',
	                no: 'search-info-on',
	                width: 26
	            },
	            'cart': {
	                tooltip: Translations$2.getText('results.cart'),
	                columnIcon: 'cart-add cart-add-active',
	                type: 'boolean',
	                icon: 'cart-add',
	                yes: 'cart-add-active',
	                no: 'cart-add-passive',
	                width: 22
	            }
	        };

	        var sidebar = _this._application.getUiElement('sidebar');
	        var resultList = sidebar.getChildComponent('resultsTab.tableHeader');
	        var view = resultList.getView();

	        _this._grid = new DataGrid(_this._container, {
	            customHeader: view,
	            application: _this._application,
	            fields: _this.fields,
	            filter: function filter(item) {
	                return Boolean(item.checked);
	            },
	            sortBy: { field: 'acqdate', asc: false },
	            indexBy: _this._indexBy
	        });
	        _this._grid.addEventListener('cell:click', _this._onCellClick);
	        _this._grid.addEventListener('column:click', _this._onColumnClick);
	        _this._grid.addEventListener('row:mouseover', _this._onRowMouseOver);
	        _this._grid.addEventListener('row:mouseout', _this._onRowMouseOut);
	        _this._grid.addEventListener('sort', _this._onSort);

	        /*this._grid._platformConstructor.addEventListener('changeClientFilter', (e) => this._onCLientFilterChange(e));
	        this._grid._cloudnessConstructor.addEventListener('changeClientFilter', (e) => this._onCLientFilterChange(e));
	        this._grid._angleConstructor.addEventListener('changeClientFilter', (e) => this._onCLientFilterChange(e));
	        this._grid._acqdateConstructor.addEventListener('changeClientFilter', (e) => this._onCLientFilterChange(e));*/

	        _this._stopPropagation = _this._stopPropagation.bind(_this);
	        return _this;
	    }

	    createClass(ResultList, [{
	        key: '_onCLientFilterChange',
	        value: function _onCLientFilterChange(e) {
	            var _e$detail = e.detail,
	                detail = _e$detail === undefined ? {} : _e$detail;


	            var event = document.createEvent('Event');
	            event.initEvent('changeClientFilter', false, false);
	            event.detail = detail;
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_stopPropagation',
	        value: function _stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: 'resizeList',
	        value: function resizeList() {

	            var total = getPanelHeight(document.body.querySelector('.scanex-sidebar'), ['.results-header']);

	            this.resize(total);
	            this.adjustWidth();
	        }
	    }, {
	        key: 'getItemByIndex',
	        value: function getItemByIndex(id) {
	            return this._grid.getItemByIndex(id);
	        }
	    }, {
	        key: '_onSort',
	        value: function _onSort(e) {
	            var event = document.createEvent('Event');
	            event.initEvent('sort', false, false);
	            event.detail = this._grid.items;
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_onCellClick',
	        value: function _onCellClick(e) {
	            e.stopPropagation();
	            var _e$detail2 = e.detail,
	                row = _e$detail2.row,
	                cell = _e$detail2.cell,
	                name = _e$detail2.name,
	                field = _e$detail2.field,
	                item = _e$detail2.item;

	            var event = document.createEvent('Event');

	            switch (name) {
	                case 'cart':
	                    /*btn = cell.querySelector('i');
	                    if (btn.classList.contains('cart-add-active')) {
	                        btn.classList.remove('cart-add-active');
	                        btn.classList.add('cart-add-passive');
	                        item.cart = false;
	                    }
	                    else {
	                        btn.classList.remove('cart-add-passive');
	                        btn.classList.add('cart-add-active');
	                        item.cart = true;                    
	                    }*/

	                    event.initEvent('addToCart', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);
	                    break;
	                case 'visible':
	                    event.initEvent('setVisible', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);
	                    break;
	                case 'info':
	                    var _cell$getBoundingClie = cell.getBoundingClientRect(),
	                        left = _cell$getBoundingClie.left,
	                        top = _cell$getBoundingClie.top;

	                    var button = cell.querySelector('i');

	                    if (this._activeInfo) {
	                        this._activeInfo.classList.remove('search-info-off');
	                        this._activeInfo.classList.add('search-info-on');
	                    }

	                    this._activeInfo = button;

	                    event.initEvent('showInfo', false, false);
	                    event.detail = { item: item, left: left, top: top, button: button };
	                    this.dispatchEvent(event);
	                    break;
	                default:
	                    // k = Object.keys(this._fields).indexOf('visible');
	                    // btn = row.querySelectorAll('td')[k].querySelector('i');
	                    // btn.classList.remove('search-visibility-on');
	                    // btn.classList.add('search-visibility-off');
	                    // // item.visible = 'visible';

	                    // event.initEvent('visible', false, false);
	                    // event.detail = item;
	                    // this.dispatchEvent(event);
	                    break;
	            }
	            switch (name) {
	                case 'cart':
	                case 'info':
	                case 'visible':
	                    break;
	                default:
	                    event.initEvent('click', false, false);
	                    event.detail = e.detail;
	                    this.dispatchEvent(event);
	                    break;
	            }
	        }
	    }, {
	        key: '_updateChecked',
	        value: function _updateChecked(state) {
	            var btn = this._grid.getCol('cart').querySelector('i');
	            if (state) {
	                btn.classList.remove('cart-add-passive');
	                btn.classList.add('cart-add-active');
	            } else {
	                btn.classList.remove('cart-add-active');
	                btn.classList.add('cart-add-passive');
	            }
	        }
	    }, {
	        key: '_getChecked',
	        value: function _getChecked() {
	            if (this._grid.items.length === 0) {
	                return false;
	            }
	            var checked = false;
	            if (this._grid.items.every(function (x) {
	                return x.cart;
	            })) {
	                checked = true;
	            } else if (this._grid.items.every(function (x) {
	                return !x.cart;
	            })) {
	                checked = false;
	            }
	            return checked;
	        }
	    }, {
	        key: '_onColumnClick',
	        value: function _onColumnClick(e) {
	            e.stopPropagation();
	            var _e$detail3 = e.detail,
	                col = _e$detail3.col,
	                field = _e$detail3.field,
	                name = _e$detail3.name;

	            var event = document.createEvent('Event');
	            switch (name) {
	                case 'cart':
	                    //let newItems = this._grid.items.filter(item => !item.cart);
	                    // let state = !this._getChecked();
	                    //let state = true;
	                    //if (newItems.length + window.Catalog.favoritesList.items.length <= window.MAX_CART_SIZE) {                    
	                    //    this._grid.items.forEach(item => {
	                    //        item.checked = state;                        
	                    //    });
	                    //    this._grid.refresh();

	                    // this._updateChecked(state);

	                    event.initEvent('addAllToCart', false, false);
	                    event.detail = {};
	                    this.dispatchEvent(event);
	                    //}
	                    //else {
	                    //    event.initEvent('cart:limit', false, false);                    
	                    //    this.dispatchEvent(event);
	                    //}                
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: '_onRowMouseOver',
	        value: function _onRowMouseOver(e) {
	            if (!this._disableMouseHover) {
	                var event = document.createEvent('Event');
	                event.initEvent('mouseover', false, false);
	                event.detail = e.detail;
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: '_onRowMouseOut',
	        value: function _onRowMouseOut(e) {
	            if (!this._disableMouseHover) {
	                var event = document.createEvent('Event');
	                event.initEvent('mouseout', false, false);
	                event.detail = e.detail;
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: 'hilite',
	        value: function hilite(id) {
	            var row = this._grid.getRow(id);
	            if (row) {
	                row.classList.add('hilite');
	            }
	        }
	    }, {
	        key: 'dim',
	        value: function dim(id) {
	            var row = this._grid.getRow(id);
	            if (row) {
	                row.classList.remove('hilite');
	            }
	        }
	    }, {
	        key: 'resize',
	        value: function resize(total) {
	            var height = this._container.querySelector('.table-list-header').getBoundingClientRect().height;
	            this._container.querySelector('.table-list-body').style.maxHeight = total - height + 'px';
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            this._grid.refresh();
	            // this._updateChecked(this._getChecked());
	            var event = document.createEvent('Event');
	            event.initEvent('refreshed', false, false);
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: 'scrollToRow',
	        value: function scrollToRow(id) {
	            this._grid.scrollToRow(id);
	        }
	    }, {
	        key: 'enableFilter',
	        value: function enableFilter(enable) {
	            this._grid.filtered = enable;
	        }
	    }, {
	        key: 'adjustWidth',
	        value: function adjustWidth() {
	            this._grid.adjustHeader();
	        }
	    }, {
	        key: 'getRow',
	        value: function getRow(rowId) {
	            return this._grid.getRow(rowId);
	        }
	    }, {
	        key: 'redrawItem',
	        value: function redrawItem(id, item) {
	            this._disableMouseHover = true;
	            this._grid.redrawRow(id, item);
	            this._disableMouseHover = false;
	        }
	    }, {
	        key: 'sort',
	        value: function sort(sortData) {

	            this._grid.sort(sortData);
	        }
	    }, {
	        key: 'fields',
	        get: function get$$1() {
	            return this._fields;
	        }
	    }, {
	        key: 'sortBy',
	        get: function get$$1() {

	            return this._grid._sortBy;
	        }
	    }, {
	        key: 'indexBy',
	        get: function get$$1() {
	            return this._indexBy;
	        }
	    }, {
	        key: 'items',
	        set: function set$$1(value) {
	            if (Array.isArray(value)) {
	                this._grid.items = value;
	            }
	        },
	        get: function get$$1() {
	            return this._grid.items;
	        }
	    }, {
	        key: 'filteredItems',
	        get: function get$$1() {
	            return this._grid.filteredItems;
	        }
	    }, {
	        key: 'bbox',
	        get: function get$$1() {
	            return this._container.getBoundingClientRect();
	        }
	    }, {
	        key: 'filter',
	        set: function set$$1(value) {
	            this._grid.filter = value;
	        }
	    }, {
	        key: 'count',
	        get: function get$$1() {
	            return this._grid.count;
	        }
	    }]);
	    return ResultList;
	}(EventTarget);

	var ResultListComponent$1 = function (_BaseComponent) {
	    inherits(ResultListComponent, _BaseComponent);

	    function ResultListComponent() {
	        classCallCheck(this, ResultListComponent);
	        return possibleConstructorReturn(this, (ResultListComponent.__proto__ || Object.getPrototypeOf(ResultListComponent)).apply(this, arguments));
	    }

	    createClass(ResultListComponent, [{
	        key: 'init',
	        value: function init() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var userInfo = store.getData('userInfo');
	            var restricted = userInfo['IsAuthenticated'] && userInfo['Role'] === ACCESS_USER_ROLE;

	            this._view = new ResultList({
	                application: application,
	                restricted: restricted
	            });

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var events = application.getServiceEvents();
	            var store = application.getStore();
	            var ContourController = application.getBridgeController('contour');
	            var view = this.getView();

	            events.on('sidebar:tab:resize', function (e) {
	                return _this2._resizeList(e);
	            });
	            events.on('contours:showQuicklookList', this._redrawItemOnList.bind(this));
	            events.on('contours:scrollToRow', this._scrollToRow.bind(this));

	            store.on('currentTab:changeUI', function (e) {
	                return _this2._onTabChangeHandler(e);
	            });
	            store.on('contours:researchedList', this._updateList.bind(this));
	            store.on('clientFilter:changeList', this._updateList.bind(this));
	            store.on('contours:startResearchedList', this._updateList.bind(this));
	            store.on('contours:addAllToCartList', this._updateList.bind(this));
	            store.on('contours:removeSelectedFavoritesList', this._updateList.bind(this));
	            store.on('contours:addVisibleToFavoritesList', this._updateList.bind(this));
	            store.on('contours:addToCartList', this._redrawItemOnList.bind(this));
	            store.on('contours:showQuicklookList', this._redrawItemOnList.bind(this));
	            store.on('contours:setHoveredList', this._highliteItemOnList.bind(this));

	            view.addEventListener('showInfo', this._onInfoHandler.bind(this));
	            view.addEventListener('changeClientFilter', function (e) {
	                return _this2.events.trigger('filter:change', e);
	            });
	            view.addEventListener('click', function (e) {
	                return ContourController.zoomToContourOnMap(e);
	            });
	            view.addEventListener('setVisible', function (e) {
	                return ContourController.showQuicklookOnListAndMap(e);
	            });
	            view.addEventListener('mouseover', function (e) {
	                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	                return ContourController.hoverContour(e, state);
	            });
	            view.addEventListener('mouseout', function (e) {
	                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	                return ContourController.hoverContour(e, state);
	            });
	            view.addEventListener('addToCart', function (e) {
	                return ContourController.addToCartOnListAndMap(e);
	            });
	            view.addEventListener('addAllToCart', function (e) {
	                return ContourController.addAllToCartOnListAndMap(e);
	            });
	        }
	    }, {
	        key: '_onTabChangeHandler',
	        value: function _onTabChangeHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = store.getMetaItem('currentTab');

	            if (currentTab === TAB_RESULTS_NAME) {
	                var willUpdateResults = store.getMetaItem('updateResults');
	                var methodName = '_' + (willUpdateResults ? 'update' : 'resize') + 'List';
	                this[methodName]();
	            }
	        }
	    }, {
	        key: '_updateList',
	        value: function _updateList() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var clientFilter = store.getData('clientFilter');
	            var _clientFilter$isChang = clientFilter.isChanged,
	                isChanged = _clientFilter$isChang === undefined ? false : _clientFilter$isChang;

	            var resultsData = store.getResults(true);
	            var view = this.getView();

	            if (isChanged) {
	                var filteredItems = store.getFilteredResults(true);
	                view.items = filteredItems;
	            } else {
	                view.items = resultsData;
	            }

	            this._resizeList();
	        }
	    }, {
	        key: '_redrawItemOnList',
	        value: function _redrawItemOnList(itemId) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var view = this.getView();

	            var item = store.getData('contours', itemId);
	            var preparedItem = propertiesToItem(item['properties']);

	            view.redrawItem(itemId, preparedItem);
	        }
	    }, {
	        key: '_highliteItemOnList',
	        value: function _highliteItemOnList(itemId) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var view = this.getView();

	            var item = store.getData('contours', itemId);
	            var isHovered = getProperty(item, 'hover');

	            if (isHovered) {
	                view.hilite(itemId);
	            } else {
	                view.dim(itemId);
	            }
	        }
	    }, {
	        key: '_scrollToRow',
	        value: function _scrollToRow(gmxId, currentTab) {

	            var view = this.getView();

	            if (currentTab === TAB_RESULTS_NAME) {

	                view.scrollToRow(gmxId);
	                this._highliteItemOnList(gmxId);
	            }
	        }
	    }, {
	        key: '_resizeList',
	        value: function _resizeList() {

	            var view = this.getView();

	            view.resizeList();
	        }
	    }, {
	        key: '_onInfoHandler',
	        value: function _onInfoHandler(e) {

	            var view = this.getView();
	            var bBox = view.bbox;

	            this.events.trigger('imageDetails:show', e, bBox);
	        }
	    }, {
	        key: 'sortGrid',
	        value: function sortGrid(sortData) {

	            var view = this.getView();

	            view.sort(sortData);
	        }
	    }]);
	    return ResultListComponent;
	}(BaseComponent);

	/* src\js\components\uiElements\widgetElements\sidebar\components\resultsTab\components\tableHeader\view\Satellites.html generated by Svelte v2.16.1 */

	function isSortHidden(_ref) {
		var sort = _ref.sort,
		    isMouseHovered = _ref.isMouseHovered;
		var _sort$field = sort.field,
		    field = _sort$field === undefined ? '' : _sort$field;


		if (field === 'platform') {
			return false;
		}

		if (isMouseHovered) {
			return false;
		}

		return true;
	}

	function sortMethod(_ref2) {
		var sort = _ref2.sort;

		return !sort.asc ? 'down' : 'up';
	}

	function checkedSatellites(_ref3) {
		var satellites = _ref3.satellites,
		    unChecked = _ref3.unChecked;


		var checkedCount = 0;
		satellites.forEach(function (satellite) {
			var platforms = satellite.platforms;

			if (platforms.some(function (platform) {
				return unChecked.indexOf(platform) === -1;
			})) {
				checkedCount += 1;
			}
		});

		return checkedCount;
	}

	function data$d() {
		return {
			satellites: [],
			unChecked: [],
			tmpUnchecked: [],
			sort: { field: 'acqdate', asc: false },
			isMouseHovered: false,
			isToggledHidden: true
		};
	}
	function isInUnchecked(satellite, tmpUnchecked) {
		return satellite.platforms.some(function (platform) {
			return tmpUnchecked.indexOf(platform) !== -1;
		});
	}
	var methods$a = {
		onSortHover: function onSortHover() {

			this.set({ isMouseHovered: true });
		},
		onSortOut: function onSortOut() {

			this.set({ isMouseHovered: false });
		},
		onSortClick: function onSortClick() {
			var _get = this.get(),
			    _get$sort = _get.sort,
			    sort = _get$sort === undefined ? {} : _get$sort;

			var _sort$asc = sort.asc,
			    asc = _sort$asc === undefined ? false : _sort$asc;


			this.fire('setSorted', { field: 'platform', asc: !asc });
		},
		onHeaderClick: function onHeaderClick() {
			var _get2 = this.get(),
			    _get2$isToggledHidden = _get2.isToggledHidden,
			    isToggledHidden = _get2$isToggledHidden === undefined ? true : _get2$isToggledHidden,
			    _get2$unChecked = _get2.unChecked,
			    unChecked = _get2$unChecked === undefined ? [] : _get2$unChecked;

			var data = { isToggledHidden: !isToggledHidden };

			if (isToggledHidden === false) {
				data['tmpUnchecked'] = [].concat(toConsumableArray(unChecked));
			}

			this.set(data);

			this.fire('onHeaderClick', 'satellites');
		},
		onApplyClick: function onApplyClick() {
			var _get3 = this.get(),
			    _get3$tmpUnchecked = _get3.tmpUnchecked,
			    tmpUnchecked = _get3$tmpUnchecked === undefined ? [] : _get3$tmpUnchecked;

			var unChecked = [].concat(toConsumableArray(tmpUnchecked));

			this.set({ unChecked: unChecked, isToggledHidden: true });

			this.fire('changeClientFilter', { detail: { name: 'unChecked', value: unChecked } });
		},
		onCheckboxClick: function onCheckboxClick(e, id) {
			var target = e.target;
			var checked = target.checked;

			var _get4 = this.get(),
			    _get4$tmpUnchecked = _get4.tmpUnchecked,
			    tmpUnchecked = _get4$tmpUnchecked === undefined ? [] : _get4$tmpUnchecked;

			var currentPlatforms = this._getSatellitePlatformsById(id);

			var newUnchecked = [].concat(toConsumableArray(tmpUnchecked));

			currentPlatforms.forEach(function (platform) {
				var unCheckedIndex = newUnchecked.indexOf(platform);
				if (!checked) {
					if (unCheckedIndex === -1) {
						newUnchecked.push(platform);
					}
				} else {
					newUnchecked.splice(newUnchecked.indexOf(platform), 1);
				}
			});

			this.set({ tmpUnchecked: newUnchecked });
		},
		onAllCheckboxClick: function onAllCheckboxClick(e) {
			var target = e.target;
			var checked = target.checked;

			var _get5 = this.get(),
			    _get5$satellites = _get5.satellites,
			    satellites = _get5$satellites === undefined ? [] : _get5$satellites;

			if (checked) {
				this.set({ tmpUnchecked: [] });
			} else {
				var platforms = [];
				satellites.forEach(function (item) {
					var currentPlatforms = item.platforms;
					currentPlatforms.forEach(function (platform) {
						if (platforms.indexOf(platform) === -1) {
							platforms.push(platform);
						}
					});
				});
				this.set({ tmpUnchecked: platforms });
			}
		},
		_getSatellitePlatformsById: function _getSatellitePlatformsById(satelliteId) {

			var currentSatellite = this.get()['satellites'].filter(function (item) {
				return item['_id'] === satelliteId;
			});

			return currentSatellite[0]['_platforms'];
		}
	};

	function click_handler$1(event) {
		var _svelte = this._svelte,
		    component = _svelte.component,
		    ctx = _svelte.ctx;


		component.onCheckboxClick(event, ctx.satellite.id);
	}

	function get_each_context$2(ctx, list, i) {
		var child_ctx = Object.create(ctx);
		child_ctx.satellite = list[i];
		return child_ctx;
	}

	function create_main_fragment$c(component, ctx) {
		var td,
		    div5,
		    div2,
		    div1,
		    div0,
		    span0,
		    text0,
		    text1,
		    span1,
		    text2_value = ctx.satellites.length,
		    text2,
		    text3,
		    span2,
		    text4,
		    span2_class_value,
		    text5,
		    i,
		    i_class_value,
		    text6,
		    div4,
		    fieldset,
		    text7,
		    text8,
		    div3;

		function click_handler(event) {
			component.onHeaderClick();
		}

		function click_handler_1(event) {
			component.onSortClick();
		}

		var if_block = ctx.satellites.length > 3 && create_if_block$5(component, ctx);

		var each_value = ctx.satellites;

		var each_blocks = [];

		for (var i_1 = 0; i_1 < each_value.length; i_1 += 1) {
			each_blocks[i_1] = create_each_block$2(component, get_each_context$2(ctx, each_value, i_1));
		}

		function click_handler_2(event) {
			component.onApplyClick();
		}

		function mouseover_handler(event) {
			component.onSortHover();
		}

		function mouseout_handler(event) {
			component.onSortOut();
		}

		return {
			c: function c() {
				td = createElement("td");
				div5 = createElement("div");
				div2 = createElement("div");
				div1 = createElement("div");
				div0 = createElement("div");
				span0 = createElement("span");
				text0 = createText(ctx.checkedSatellites);
				text1 = createText("/");
				span1 = createElement("span");
				text2 = createText(text2_value);
				text3 = createText("\r\n            ");
				span2 = createElement("span");
				text4 = createText("Спутник");
				text5 = createText("\r\n            ");
				i = createElement("i");
				text6 = createText("\r\n        ");
				div4 = createElement("div");
				fieldset = createElement("fieldset");
				if (if_block) if_block.c();
				text7 = createText("\r\n                ");

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].c();
				}

				text8 = createText("\r\n            ");
				div3 = createElement("div");
				div3.textContent = "Применить";
				span0.className = "checked";
				span1.className = "all";
				setStyle(div0, "display", ctx.unChecked.length > 0 ? 'block' : 'none');
				div1.className = "filterable-applied";
				addListener(span2, "click", click_handler);
				span2.className = span2_class_value = "filterable-header-platform filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.unChecked.length > 0 ? 'applied' : '');
				addListener(i, "click", click_handler_1);
				i.className = i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod;
				setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
				div2.className = "on-hover-div";
				fieldset.className = "search-options-satellites-ms";
				addListener(div3, "click", click_handler_2);
				div3.className = "apply";
				setStyle(div4, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
				div4.className = "togglable-content-platform togglable-content filterable-satellites-container";
				div5.className = "filterable-field-container";
				addListener(td, "mouseover", mouseover_handler);
				addListener(td, "mouseout", mouseout_handler);
				setStyle(td, "padding-left", "0");
				td.className = "table-list-col";
				td.dataset.field = "platform";
			},
			m: function m(target, anchor) {
				insert(target, td, anchor);
				append(td, div5);
				append(div5, div2);
				append(div2, div1);
				append(div1, div0);
				append(div0, span0);
				append(span0, text0);
				append(div0, text1);
				append(div0, span1);
				append(span1, text2);
				append(div2, text3);
				append(div2, span2);
				append(span2, text4);
				append(div2, text5);
				append(div2, i);
				append(div5, text6);
				append(div5, div4);
				append(div4, fieldset);
				if (if_block) if_block.m(fieldset, null);
				append(fieldset, text7);

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].m(fieldset, null);
				}

				append(div4, text8);
				append(div4, div3);
			},
			p: function p(changed, ctx) {
				if (changed.checkedSatellites) {
					setData(text0, ctx.checkedSatellites);
				}

				if (changed.satellites && text2_value !== (text2_value = ctx.satellites.length)) {
					setData(text2, text2_value);
				}

				if (changed.unChecked) {
					setStyle(div0, "display", ctx.unChecked.length > 0 ? 'block' : 'none');
				}

				if ((changed.isToggledHidden || changed.unChecked) && span2_class_value !== (span2_class_value = "filterable-header-platform filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.unChecked.length > 0 ? 'applied' : ''))) {
					span2.className = span2_class_value;
				}

				if (changed.sortMethod && i_class_value !== (i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod)) {
					i.className = i_class_value;
				}

				if (changed.isSortHidden) {
					setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
				}

				if (ctx.satellites.length > 3) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$5(component, ctx);
						if_block.c();
						if_block.m(fieldset, text7);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (changed.satellites || changed.tmpUnchecked) {
					each_value = ctx.satellites;

					for (var i_1 = 0; i_1 < each_value.length; i_1 += 1) {
						var child_ctx = get_each_context$2(ctx, each_value, i_1);

						if (each_blocks[i_1]) {
							each_blocks[i_1].p(changed, child_ctx);
						} else {
							each_blocks[i_1] = create_each_block$2(component, child_ctx);
							each_blocks[i_1].c();
							each_blocks[i_1].m(fieldset, null);
						}
					}

					for (; i_1 < each_blocks.length; i_1 += 1) {
						each_blocks[i_1].d(1);
					}
					each_blocks.length = each_value.length;
				}

				if (changed.isToggledHidden) {
					setStyle(div4, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(td);
				}

				removeListener(span2, "click", click_handler);
				removeListener(i, "click", click_handler_1);
				if (if_block) if_block.d();

				destroyEach(each_blocks, detach);

				removeListener(div3, "click", click_handler_2);
				removeListener(td, "mouseover", mouseover_handler);
				removeListener(td, "mouseout", mouseout_handler);
			}
		};
	}

	// (28:16) {#if satellites.length > 3}
	function create_if_block$5(component, ctx) {
		var div, input, input_checked_value, text, strong;

		function click_handler(event) {
			component.onAllCheckboxClick(event);
		}

		return {
			c: function c() {
				div = createElement("div");
				input = createElement("input");
				text = createText("\r\n                        ");
				strong = createElement("strong");
				strong.textContent = "Все спутники";
				addListener(input, "click", click_handler);
				input.checked = input_checked_value = ctx.tmpUnchecked.length > 0 ? false : 'checked';
				setAttribute(input, "type", "checkbox");
				input.id = "sat_check_all";
				input.className = "all-checkbox";
				div.className = "satellite-col";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				append(div, text);
				append(div, strong);
			},
			p: function p(changed, ctx) {
				if (changed.tmpUnchecked && input_checked_value !== (input_checked_value = ctx.tmpUnchecked.length > 0 ? false : 'checked')) {
					input.checked = input_checked_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(input, "click", click_handler);
			}
		};
	}

	// (40:16) {#each satellites as satellite}
	function create_each_block$2(component, ctx) {
		var div,
		    input,
		    input_checked_value,
		    input_id_value,
		    input_value_value,
		    text0,
		    label,
		    text1_value = ctx.satellite.name,
		    text1,
		    label_for_value;

		return {
			c: function c() {
				div = createElement("div");
				input = createElement("input");
				text0 = createText("\r\n                        ");
				label = createElement("label");
				text1 = createText(text1_value);
				input._svelte = { component: component, ctx: ctx };

				addListener(input, "click", click_handler$1);
				input.checked = input_checked_value = !isInUnchecked(ctx.satellite, ctx.tmpUnchecked) ? 'checked' : false;
				setAttribute(input, "type", "checkbox");
				input.id = input_id_value = "sat_" + ctx.satellite.id;
				input.value = input_value_value = ctx.satellite.id;
				input.className = "s-checkbox";
				label.htmlFor = label_for_value = "sat_" + ctx.satellite.id;
				div.className = "satellite-col";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				append(div, text0);
				append(div, label);
				append(label, text1);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				input._svelte.ctx = ctx;
				if ((changed.satellites || changed.tmpUnchecked) && input_checked_value !== (input_checked_value = !isInUnchecked(ctx.satellite, ctx.tmpUnchecked) ? 'checked' : false)) {
					input.checked = input_checked_value;
				}

				if (changed.satellites && input_id_value !== (input_id_value = "sat_" + ctx.satellite.id)) {
					input.id = input_id_value;
				}

				if (changed.satellites && input_value_value !== (input_value_value = ctx.satellite.id)) {
					input.value = input_value_value;
				}

				if (changed.satellites && text1_value !== (text1_value = ctx.satellite.name)) {
					setData(text1, text1_value);
				}

				if (changed.satellites && label_for_value !== (label_for_value = "sat_" + ctx.satellite.id)) {
					label.htmlFor = label_for_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(input, "click", click_handler$1);
			}
		};
	}

	function Satellites(options) {
		init(this, options);
		this._state = assign(data$d(), options.data);

		this._recompute({ sort: 1, isMouseHovered: 1, satellites: 1, unChecked: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$c(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Satellites.prototype, proto$4);
	assign(Satellites.prototype, methods$a);

	Satellites.prototype._recompute = function _recompute(changed, state) {
		if (changed.sort || changed.isMouseHovered) {
			if (this._differs(state.isSortHidden, state.isSortHidden = isSortHidden(state))) changed.isSortHidden = true;
		}

		if (changed.sort) {
			if (this._differs(state.sortMethod, state.sortMethod = sortMethod(state))) changed.sortMethod = true;
		}

		if (changed.satellites || changed.unChecked) {
			if (this._differs(state.checkedSatellites, state.checkedSatellites = checkedSatellites(state))) changed.checkedSatellites = true;
		}
	};

	var ExtendedSliderWidget = function (_SliderWidget) {
	    inherits(ExtendedSliderWidget, _SliderWidget);

	    function ExtendedSliderWidget() {
	        var _ref;

	        classCallCheck(this, ExtendedSliderWidget);

	        for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
	            props[_key] = arguments[_key];
	        }

	        var _this = possibleConstructorReturn(this, (_ref = ExtendedSliderWidget.__proto__ || Object.getPrototypeOf(ExtendedSliderWidget)).call.apply(_ref, [this].concat(props)));

	        var parent = _this._container.parentNode;

	        _this._leftInput = parent.querySelector('.min-input');
	        _this._rightInput = parent.querySelector('.max-input');

	        _this._leftInput.addEventListener('change', _this._handleLeftInput.bind(_this));
	        _this._leftInput.addEventListener('focus', function (e) {
	            return _this._leftInput.select();
	        });
	        _this._rightInput.addEventListener('change', _this._handleRightInput.bind(_this));
	        _this._rightInput.addEventListener('focus', function (e) {
	            return _this._rightInput.select();
	        });

	        _this.addEventListener('change', function () {
	            _this._leftInput.value = _this._lo;
	            _this._rightInput.value = _this._hi;
	        });
	        return _this;
	    }

	    createClass(ExtendedSliderWidget, [{
	        key: 'setLimits',
	        value: function setLimits(min, max) {

	            this.options.min = min;
	            this.options.max = max;
	        }
	    }, {
	        key: '_handleLeftInput',
	        value: function _handleLeftInput(e) {
	            var lo = this.options.mode === 'integer' ? parseInt(this._leftInput.value, 10) : new Date(this._leftInput.value.getTime());
	            var hi = this.options.mode === 'integer' ? parseInt(this._rightInput.value, 10) : new Date(this._rightInput.value.getTime());
	            if (!isNaN(lo) && this.options.min <= lo && lo <= this.options.max) {
	                this.values = [lo, hi];
	            } else {
	                this._leftInput.value = this.options.mode === 'integer' ? Math.round(this._lo) : this._lo.toFixed(1);
	            }

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);

	            event.initEvent('stop', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_handleRightInput',
	        value: function _handleRightInput(e) {
	            var lo = this.options.mode === 'integer' ? parseInt(this._leftInput.value, 10) : parseFloat(this._leftInput.value);
	            var hi = this.options.mode === 'integer' ? parseInt(this._rightInput.value, 10) : parseFloat(this._rightInput.value);
	            if (!isNaN(hi) && this.options.min <= hi && hi <= this.options.max) {
	                this.values = [lo, hi];
	            } else {
	                this._rightInput.value = this.options.mode === 'integer' ? Math.round(this._hi) : this._hi.toFixed(1);
	            }

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);

	            event.initEvent('stop', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: 'setValues',
	        value: function setValues(values) {

	            this.values = values;

	            this._leftInput.value = values[0];
	            this._rightInput.value = values[1];
	        }
	    }]);
	    return ExtendedSliderWidget;
	}(SliderWidget);

	/* src\js\components\uiElements\widgetElements\sidebar\components\resultsTab\components\tableHeader\view\Cloudness.html generated by Svelte v2.16.1 */

	function isSortHidden$1(_ref) {
		var sort = _ref.sort,
		    isMouseHovered = _ref.isMouseHovered;
		var _sort$field = sort.field,
		    field = _sort$field === undefined ? '' : _sort$field;


		if (field === 'cloudness') {
			return false;
		}

		if (isMouseHovered) {
			return false;
		}

		return true;
	}

	function sortMethod$1(_ref2) {
		var sort = _ref2.sort;

		return !sort.asc ? 'down' : 'up';
	}

	function isFilterApplied(_ref3) {
		var value = _ref3.value,
		    clouds = _ref3.clouds;

		return value[0] !== clouds[0] || value[1] !== clouds[1];
	}

	function data$e() {
		return {
			sort: { field: 'acqdate', asc: false },
			isMouseHovered: false,
			isToggledHidden: true,
			value: [0, 100],
			tmpValue: [0, 100],
			clouds: [0, 100]

		};
	}
	var methods$b = {
		onFilterHover: function onFilterHover(ev) {

			ev.stopPropagation();
		},
		onSortHover: function onSortHover() {

			this.set({ isMouseHovered: true });
		},
		onSortOut: function onSortOut() {

			this.set({ isMouseHovered: false });
		},
		onSortClick: function onSortClick() {
			var _get = this.get(),
			    _get$sort = _get.sort,
			    sort = _get$sort === undefined ? {} : _get$sort;

			var _sort$asc = sort.asc,
			    asc = _sort$asc === undefined ? false : _sort$asc;


			this.fire('setSorted', { field: 'cloudness', asc: !asc });
		},
		onApplyClick: function onApplyClick() {
			var _get2 = this.get(),
			    _get2$tmpValue = _get2.tmpValue,
			    tmpValue = _get2$tmpValue === undefined ? [] : _get2$tmpValue;

			this.set({ value: [].concat(toConsumableArray(tmpValue)), isToggledHidden: true });

			this.fire('changeClientFilter', { detail: { name: 'clouds', value: tmpValue } });
		},
		onHeaderClick: function onHeaderClick() {
			var _get3 = this.get(),
			    _get3$isToggledHidden = _get3.isToggledHidden,
			    isToggledHidden = _get3$isToggledHidden === undefined ? true : _get3$isToggledHidden,
			    _get3$value = _get3.value,
			    value = _get3$value === undefined ? [] : _get3$value;

			var data = { isToggledHidden: !isToggledHidden };

			if (isToggledHidden === false) {
				this._slider.values = value;
			}

			this.set(data);

			this.fire('onHeaderClick', 'clouds');
		},
		onSliderStopHandler: function onSliderStopHandler(e) {
			var _e$detail = e.detail,
			    detail = _e$detail === undefined ? [0, 100] : _e$detail;


			this.set({ tmpValue: detail });
		},
		clearFilter: function clearFilter(clouds) {

			this.set({ isToggledHidden: true, value: clouds, tmpValue: clouds, clouds: clouds });
			this._slider.values = clouds;

			this._slider.setLimits(clouds[0], clouds[1]);

			var rangeWidth = this._slider._bar.querySelector('.slider-widget-range').style.width;
			this._slider._bar.querySelector('.slider-widget-range').style.width = '215px';
		}
	};

	function oncreate$2() {
		var _get4 = this.get(),
		    clouds = _get4.clouds,
		    value = _get4.value;

		var limits = { min: clouds[0], max: clouds[1] };

		this._slider = new ExtendedSliderWidget(this.refs.sliderContainer, limits);
		this._slider.values = value;

		this._slider._bar.querySelector('.slider-widget-range').style.width = '215px';

		this._slider.addEventListener('stop', this.onSliderStopHandler.bind(this));
	}
	function create_main_fragment$d(component, ctx) {
		var td,
		    div10,
		    div2,
		    div1,
		    div0,
		    span0,
		    text0_value = ctx.value[0],
		    text0,
		    text1,
		    span1,
		    text2_value = ctx.value[1],
		    text2,
		    text3,
		    span2,
		    text4,
		    span2_class_value,
		    text5,
		    i,
		    i_class_value,
		    text6,
		    div9,
		    div3,
		    input0,
		    input0_value_value,
		    text7,
		    input1,
		    input1_value_value,
		    text8,
		    div4,
		    text9,
		    div5,
		    text10_value = ctx.clouds[0],
		    text10,
		    text11,
		    div6,
		    text12_value = ctx.clouds[1],
		    text12,
		    text13,
		    div7,
		    text14,
		    div8;

		function click_handler(event) {
			component.onHeaderClick();
		}

		function click_handler_1(event) {
			component.onSortClick();
		}

		function click_handler_2(event) {
			component.onApplyClick();
		}

		function mouseover_handler(event) {
			component.onFilterHover(event);
		}

		function mouseover_handler_1(event) {
			component.onSortHover();
		}

		function mouseout_handler(event) {
			component.onSortOut();
		}

		return {
			c: function c() {
				td = createElement("td");
				div10 = createElement("div");
				div2 = createElement("div");
				div1 = createElement("div");
				div0 = createElement("div");
				span0 = createElement("span");
				text0 = createText(text0_value);
				text1 = createText("-");
				span1 = createElement("span");
				text2 = createText(text2_value);
				text3 = createText("\r\n            ");
				span2 = createElement("span");
				text4 = createText("Обл.");
				text5 = createText("\r\n            ");
				i = createElement("i");
				text6 = createText("\r\n        ");
				div9 = createElement("div");
				div3 = createElement("div");
				input0 = createElement("input");
				text7 = createText("\r\n                -\r\n                ");
				input1 = createElement("input");
				text8 = createText("\r\n            ");
				div4 = createElement("div");
				text9 = createText("\r\n            ");
				div5 = createElement("div");
				text10 = createText(text10_value);
				text11 = createText("\r\n            ");
				div6 = createElement("div");
				text12 = createText(text12_value);
				text13 = createText("\r\n            ");
				div7 = createElement("div");
				text14 = createText("\r\n            ");
				div8 = createElement("div");
				div8.textContent = "Применить";
				span0.className = "min";
				span1.className = "max";
				setStyle(div0, "display", ctx.isFilterApplied ? 'block' : 'none');
				div1.className = "filterable-applied";
				addListener(span2, "click", click_handler);
				span2.className = span2_class_value = "filterable-header-platform filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.isFilterApplied ? 'applied' : '');
				addListener(i, "click", click_handler_1);
				i.className = i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod;
				setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
				div2.className = "on-hover-div";
				input0.className = "extended-slider-input min-input";
				setAttribute(input0, "type", "text");
				input0.value = input0_value_value = ctx.value[0];
				input1.className = "extended-slider-input max-input";
				setAttribute(input1, "type", "text");
				input1.value = input1_value_value = ctx.value[1];
				setStyle(div3, "text-align", "left");
				div4.className = "results-cloudness-slider-container";
				div5.className = "min-value";
				div6.className = "max-value";
				setStyle(div7, "clear", "both");
				addListener(div8, "click", click_handler_2);
				div8.className = "apply";
				addListener(div9, "mouseover", mouseover_handler);
				setStyle(div9, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
				setStyle(div9, "padding-top", "10px");
				div9.className = "togglable-content-cloudness togglable-content filterable-cloudness-container";
				div10.className = "filterable-field-container";
				addListener(td, "mouseover", mouseover_handler_1);
				addListener(td, "mouseout", mouseout_handler);
				setStyle(td, "padding-left", "3px");
				td.className = "table-list-col";
				td.dataset.field = "cloudness";
			},
			m: function m(target, anchor) {
				insert(target, td, anchor);
				append(td, div10);
				append(div10, div2);
				append(div2, div1);
				append(div1, div0);
				append(div0, span0);
				append(span0, text0);
				append(div0, text1);
				append(div0, span1);
				append(span1, text2);
				append(div2, text3);
				append(div2, span2);
				append(span2, text4);
				append(div2, text5);
				append(div2, i);
				append(div10, text6);
				append(div10, div9);
				append(div9, div3);
				append(div3, input0);
				append(div3, text7);
				append(div3, input1);
				append(div9, text8);
				append(div9, div4);
				component.refs.sliderContainer = div4;
				append(div9, text9);
				append(div9, div5);
				append(div5, text10);
				append(div9, text11);
				append(div9, div6);
				append(div6, text12);
				append(div9, text13);
				append(div9, div7);
				append(div9, text14);
				append(div9, div8);
			},
			p: function p(changed, ctx) {
				if (changed.value && text0_value !== (text0_value = ctx.value[0])) {
					setData(text0, text0_value);
				}

				if (changed.value && text2_value !== (text2_value = ctx.value[1])) {
					setData(text2, text2_value);
				}

				if (changed.isFilterApplied) {
					setStyle(div0, "display", ctx.isFilterApplied ? 'block' : 'none');
				}

				if ((changed.isToggledHidden || changed.isFilterApplied) && span2_class_value !== (span2_class_value = "filterable-header-platform filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.isFilterApplied ? 'applied' : ''))) {
					span2.className = span2_class_value;
				}

				if (changed.sortMethod && i_class_value !== (i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod)) {
					i.className = i_class_value;
				}

				if (changed.isSortHidden) {
					setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
				}

				if (changed.value && input0_value_value !== (input0_value_value = ctx.value[0])) {
					input0.value = input0_value_value;
				}

				if (changed.value && input1_value_value !== (input1_value_value = ctx.value[1])) {
					input1.value = input1_value_value;
				}

				if (changed.clouds && text10_value !== (text10_value = ctx.clouds[0])) {
					setData(text10, text10_value);
				}

				if (changed.clouds && text12_value !== (text12_value = ctx.clouds[1])) {
					setData(text12, text12_value);
				}

				if (changed.isToggledHidden) {
					setStyle(div9, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(td);
				}

				removeListener(span2, "click", click_handler);
				removeListener(i, "click", click_handler_1);
				if (component.refs.sliderContainer === div4) component.refs.sliderContainer = null;
				removeListener(div8, "click", click_handler_2);
				removeListener(div9, "mouseover", mouseover_handler);
				removeListener(td, "mouseover", mouseover_handler_1);
				removeListener(td, "mouseout", mouseout_handler);
			}
		};
	}

	function Cloudness(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$e(), options.data);

		this._recompute({ sort: 1, isMouseHovered: 1, value: 1, clouds: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$d(this, this._state);

		this.root._oncreate.push(function () {
			oncreate$2.call(_this);
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(Cloudness.prototype, proto$4);
	assign(Cloudness.prototype, methods$b);

	Cloudness.prototype._recompute = function _recompute(changed, state) {
		if (changed.sort || changed.isMouseHovered) {
			if (this._differs(state.isSortHidden, state.isSortHidden = isSortHidden$1(state))) changed.isSortHidden = true;
		}

		if (changed.sort) {
			if (this._differs(state.sortMethod, state.sortMethod = sortMethod$1(state))) changed.sortMethod = true;
		}

		if (changed.value || changed.clouds) {
			if (this._differs(state.isFilterApplied, state.isFilterApplied = isFilterApplied(state))) changed.isFilterApplied = true;
		}
	};

	/* src\js\components\uiElements\widgetElements\sidebar\components\resultsTab\components\tableHeader\view\Angles.html generated by Svelte v2.16.1 */

	function isSortHidden$2(_ref) {
		var sort = _ref.sort,
		    isMouseHovered = _ref.isMouseHovered;
		var _sort$field = sort.field,
		    field = _sort$field === undefined ? '' : _sort$field;


		if (field === 'cloudness') {
			return false;
		}

		if (isMouseHovered) {
			return false;
		}

		return true;
	}

	function sortMethod$2(_ref2) {
		var sort = _ref2.sort;

		return !sort.asc ? 'down' : 'up';
	}

	function isFilterApplied$1(_ref3) {
		var value = _ref3.value,
		    angle = _ref3.angle;

		return value[0] !== angle[0] || value[1] !== angle[1];
	}

	function data$f() {
		return {
			sort: { field: 'acqdate', asc: false },
			isMouseHovered: false,
			isToggledHidden: true,
			value: [0, 80],
			tmpValue: [0, 80],
			angle: [0, 80]

		};
	}
	var methods$c = {
		onFilterHover: function onFilterHover(ev) {

			ev.stopPropagation();
		},
		onSortHover: function onSortHover() {

			this.set({ isMouseHovered: true });
		},
		onSortOut: function onSortOut() {

			this.set({ isMouseHovered: false });
		},
		onSortClick: function onSortClick() {
			var _get = this.get(),
			    _get$sort = _get.sort,
			    sort = _get$sort === undefined ? {} : _get$sort;

			var _sort$asc = sort.asc,
			    asc = _sort$asc === undefined ? false : _sort$asc;


			this.fire('setSorted', { field: 'cloudness', asc: !asc });
		},
		onApplyClick: function onApplyClick() {
			var _get2 = this.get(),
			    _get2$tmpValue = _get2.tmpValue,
			    tmpValue = _get2$tmpValue === undefined ? [] : _get2$tmpValue;

			this.set({ value: [].concat(toConsumableArray(tmpValue)), isToggledHidden: true });

			this.fire('changeClientFilter', { detail: { name: 'angle', value: tmpValue } });
		},
		onHeaderClick: function onHeaderClick() {
			var _get3 = this.get(),
			    _get3$isToggledHidden = _get3.isToggledHidden,
			    isToggledHidden = _get3$isToggledHidden === undefined ? true : _get3$isToggledHidden,
			    _get3$value = _get3.value,
			    value = _get3$value === undefined ? [] : _get3$value;

			var data = { isToggledHidden: !isToggledHidden };

			if (isToggledHidden === false) {
				this._slider.values = value;
			}

			this.set(data);

			this.fire('onHeaderClick', 'angles');
		},
		onSliderStopHandler: function onSliderStopHandler(e) {
			var _e$detail = e.detail,
			    detail = _e$detail === undefined ? [0, 100] : _e$detail;


			this.set({ tmpValue: detail });
		},
		clearFilter: function clearFilter(angle) {

			this.set({ isToggledHidden: true, value: angle, tmpValue: angle, angle: angle });
			this._slider.values = angle;

			this._slider.setLimits(angle[0], angle[1]);

			this._slider._bar.querySelector('.slider-widget-range').style.width = '215px';
		}
	};

	function oncreate$3() {
		var _get4 = this.get(),
		    angle = _get4.angle,
		    value = _get4.value;

		var limits = { min: angle[0], max: angle[1] };

		this._slider = new ExtendedSliderWidget(this.refs.sliderContainer, limits);
		this._slider.values = value;

		this._slider._bar.querySelector('.slider-widget-range').style.width = '215px';

		this._slider.addEventListener('stop', this.onSliderStopHandler.bind(this));
	}
	function create_main_fragment$e(component, ctx) {
		var td,
		    div10,
		    div2,
		    div1,
		    div0,
		    span0,
		    text0_value = ctx.value[0],
		    text0,
		    text1,
		    span1,
		    text2_value = ctx.value[1],
		    text2,
		    text3,
		    span2,
		    text4,
		    span2_class_value,
		    text5,
		    i,
		    i_class_value,
		    text6,
		    div9,
		    div3,
		    input0,
		    input0_value_value,
		    text7,
		    input1,
		    input1_value_value,
		    text8,
		    div4,
		    text9,
		    div5,
		    text10_value = ctx.angle[0],
		    text10,
		    text11,
		    div6,
		    text12_value = ctx.angle[1],
		    text12,
		    text13,
		    div7,
		    text14,
		    div8;

		function click_handler(event) {
			component.onHeaderClick();
		}

		function click_handler_1(event) {
			component.onSortClick();
		}

		function click_handler_2(event) {
			component.onApplyClick();
		}

		function mouseover_handler(event) {
			component.onFilterHover(event);
		}

		function mouseover_handler_1(event) {
			component.onSortHover();
		}

		function mouseout_handler(event) {
			component.onSortOut();
		}

		return {
			c: function c() {
				td = createElement("td");
				div10 = createElement("div");
				div2 = createElement("div");
				div1 = createElement("div");
				div0 = createElement("div");
				span0 = createElement("span");
				text0 = createText(text0_value);
				text1 = createText("-");
				span1 = createElement("span");
				text2 = createText(text2_value);
				text3 = createText("\r\n            ");
				span2 = createElement("span");
				text4 = createText("Угол");
				text5 = createText("\r\n            ");
				i = createElement("i");
				text6 = createText("\r\n        ");
				div9 = createElement("div");
				div3 = createElement("div");
				input0 = createElement("input");
				text7 = createText("\r\n                -\r\n                ");
				input1 = createElement("input");
				text8 = createText("\r\n            ");
				div4 = createElement("div");
				text9 = createText("\r\n            ");
				div5 = createElement("div");
				text10 = createText(text10_value);
				text11 = createText("\r\n            ");
				div6 = createElement("div");
				text12 = createText(text12_value);
				text13 = createText("\r\n            ");
				div7 = createElement("div");
				text14 = createText("\r\n            ");
				div8 = createElement("div");
				div8.textContent = "Применить";
				span0.className = "min";
				span1.className = "max";
				setStyle(div0, "display", ctx.isFilterApplied ? 'block' : 'none');
				div1.className = "filterable-applied";
				addListener(span2, "click", click_handler);
				span2.className = span2_class_value = "filterable-header-angle filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.isFilterApplied ? 'applied' : '');
				addListener(i, "click", click_handler_1);
				i.className = i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod;
				setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
				div2.className = "on-hover-div";
				input0.className = "extended-slider-input min-input";
				setAttribute(input0, "type", "text");
				input0.value = input0_value_value = ctx.value[0];
				input1.className = "extended-slider-input max-input";
				setAttribute(input1, "type", "text");
				input1.value = input1_value_value = ctx.value[1];
				setStyle(div3, "text-align", "left");
				div4.className = "results-angle-slider-container";
				div5.className = "min-value";
				div6.className = "max-value";
				setStyle(div7, "clear", "both");
				addListener(div8, "click", click_handler_2);
				div8.className = "apply";
				addListener(div9, "mouseover", mouseover_handler);
				setStyle(div9, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
				setStyle(div9, "padding-top", "10px");
				div9.className = "togglable-content-angle togglable-content filterable-cloudness-container";
				div10.className = "filterable-field-container";
				addListener(td, "mouseover", mouseover_handler_1);
				addListener(td, "mouseout", mouseout_handler);
				setStyle(td, "padding-left", "3px");
				td.className = "table-list-col";
				td.dataset.field = "tilt";
			},
			m: function m(target, anchor) {
				insert(target, td, anchor);
				append(td, div10);
				append(div10, div2);
				append(div2, div1);
				append(div1, div0);
				append(div0, span0);
				append(span0, text0);
				append(div0, text1);
				append(div0, span1);
				append(span1, text2);
				append(div2, text3);
				append(div2, span2);
				append(span2, text4);
				append(div2, text5);
				append(div2, i);
				append(div10, text6);
				append(div10, div9);
				append(div9, div3);
				append(div3, input0);
				append(div3, text7);
				append(div3, input1);
				append(div9, text8);
				append(div9, div4);
				component.refs.sliderContainer = div4;
				append(div9, text9);
				append(div9, div5);
				append(div5, text10);
				append(div9, text11);
				append(div9, div6);
				append(div6, text12);
				append(div9, text13);
				append(div9, div7);
				append(div9, text14);
				append(div9, div8);
			},
			p: function p(changed, ctx) {
				if (changed.value && text0_value !== (text0_value = ctx.value[0])) {
					setData(text0, text0_value);
				}

				if (changed.value && text2_value !== (text2_value = ctx.value[1])) {
					setData(text2, text2_value);
				}

				if (changed.isFilterApplied) {
					setStyle(div0, "display", ctx.isFilterApplied ? 'block' : 'none');
				}

				if ((changed.isToggledHidden || changed.isFilterApplied) && span2_class_value !== (span2_class_value = "filterable-header-angle filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.isFilterApplied ? 'applied' : ''))) {
					span2.className = span2_class_value;
				}

				if (changed.sortMethod && i_class_value !== (i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod)) {
					i.className = i_class_value;
				}

				if (changed.isSortHidden) {
					setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
				}

				if (changed.value && input0_value_value !== (input0_value_value = ctx.value[0])) {
					input0.value = input0_value_value;
				}

				if (changed.value && input1_value_value !== (input1_value_value = ctx.value[1])) {
					input1.value = input1_value_value;
				}

				if (changed.angle && text10_value !== (text10_value = ctx.angle[0])) {
					setData(text10, text10_value);
				}

				if (changed.angle && text12_value !== (text12_value = ctx.angle[1])) {
					setData(text12, text12_value);
				}

				if (changed.isToggledHidden) {
					setStyle(div9, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(td);
				}

				removeListener(span2, "click", click_handler);
				removeListener(i, "click", click_handler_1);
				if (component.refs.sliderContainer === div4) component.refs.sliderContainer = null;
				removeListener(div8, "click", click_handler_2);
				removeListener(div9, "mouseover", mouseover_handler);
				removeListener(td, "mouseover", mouseover_handler_1);
				removeListener(td, "mouseout", mouseout_handler);
			}
		};
	}

	function Angles(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$f(), options.data);

		this._recompute({ sort: 1, isMouseHovered: 1, value: 1, angle: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$e(this, this._state);

		this.root._oncreate.push(function () {
			oncreate$3.call(_this);
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(Angles.prototype, proto$4);
	assign(Angles.prototype, methods$c);

	Angles.prototype._recompute = function _recompute(changed, state) {
		if (changed.sort || changed.isMouseHovered) {
			if (this._differs(state.isSortHidden, state.isSortHidden = isSortHidden$2(state))) changed.isSortHidden = true;
		}

		if (changed.sort) {
			if (this._differs(state.sortMethod, state.sortMethod = sortMethod$2(state))) changed.sortMethod = true;
		}

		if (changed.value || changed.angle) {
			if (this._differs(state.isFilterApplied, state.isFilterApplied = isFilterApplied$1(state))) changed.isFilterApplied = true;
		}
	};

	var ExtendedSliderWidget$1 = function (_SliderWidget) {
	    inherits(ExtendedSliderWidget, _SliderWidget);

	    function ExtendedSliderWidget() {
	        var _ref;

	        classCallCheck(this, ExtendedSliderWidget);

	        for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
	            props[_key] = arguments[_key];
	        }

	        var _this = possibleConstructorReturn(this, (_ref = ExtendedSliderWidget.__proto__ || Object.getPrototypeOf(ExtendedSliderWidget)).call.apply(_ref, [this].concat(props)));

	        var parent = _this._container.parentNode;

	        _this._leftInput = parent.querySelector('.min-input');
	        _this._rightInput = parent.querySelector('.max-input');

	        _this._leftInput.addEventListener('change', _this._handleLeftInput.bind(_this));
	        _this._rightInput.addEventListener('change', _this._handleRightInput.bind(_this));

	        _this._startDate = _this.options.startDate || null;
	        _this._endDate = _this.options.endDate || null;

	        _this.addEventListener('change', function () {
	            //console.log(this._lo);
	            //console.log(this._hi)
	            _this._startDate.setDate(new Date(_this._lo));
	            _this._endDate.setDate(new Date(_this._hi));
	        });
	        return _this;
	    }

	    createClass(ExtendedSliderWidget, [{
	        key: '_compareDates',
	        value: function _compareDates(one, two) {

	            var oneDate = new Date(one);
	            var twoDate = new Date(two);

	            return oneDate.getDay() === twoDate.getDay() && oneDate.getMonth() === twoDate.getMonth() && oneDate.getYear() === twoDate.getYear();
	        }
	    }, {
	        key: '_handleLeftInput',
	        value: function _handleLeftInput(e) {
	            var lo = this._startDate.getDate();
	            var hi = this._endDate.getDate();
	            var loTime = lo.getTime();
	            var hiTime = hi.getTime();

	            if (this._compareDates(this._lo, loTime)) {
	                return;
	            }

	            if (!isNaN(loTime) && this.options.min <= loTime && lo <= this.options.max) {
	                this.values = [loTime, hiTime];
	            } else {
	                var prevLo = this._lo;
	                var prevLoDate = new Date(prevLo);

	                this._startDate.setDate(prevLoDate);
	            }

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);

	            event.initEvent('stop', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_handleRightInput',
	        value: function _handleRightInput(e) {
	            var lo = this._startDate.getDate();
	            var hi = this._endDate.getDate();
	            var loTime = lo.getTime();
	            var hiTime = hi.getTime();

	            if (this._compareDates(this._hi, hiTime)) {
	                return;
	            }

	            if (!isNaN(hiTime) && this.options.min <= hiTime && hiTime <= this.options.max) {
	                this.values = [loTime, hiTime];
	            } else {
	                var prevHi = this._hi;
	                var prevHiDate = new Date(prevHi);

	                this._endDate.setDate(prevHiDate);
	            }

	            // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

	            var event = document.createEvent('Event');
	            event.initEvent('change', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);

	            event.initEvent('stop', false, false);
	            event.detail = [this._lo, this._hi];
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_updateBounds',
	        value: function _updateBounds() {
	            var _bar$getBoundingClien = this._bar.getBoundingClientRect(),
	                width = _bar$getBoundingClien.width,
	                left = _bar$getBoundingClien.left;

	            var leftRect = this._leftTick.getBoundingClientRect();
	            var rightRect = this._rightTick.getBoundingClientRect();

	            var k = (this.options.max - this.options.min) / (width - leftRect.width - rightRect.width);
	            var lo = leftRect.left - left;
	            this._lo = this.options.min + lo * k < this.options.min ? this.options.min : this.options.min + lo * k;
	            var hi = rightRect.left - rightRect.width - left;
	            this._hi = this.options.min + hi * k > this.options.max ? this.options.max : this.options.min + hi * k;
	        }
	    }, {
	        key: 'setLimits',
	        value: function setLimits(min, max) {

	            this.options.min = min;
	            this.options.max = max;
	        }
	    }, {
	        key: 'setValues',
	        value: function setValues(values) {

	            this.values = values;

	            this._leftInput.value = values[0];
	            this._rightInput.value = values[1];

	            //this._leftInput.value = this.getCorrectDay(values[0]) + '.' + this.getCorrectMonth(values[0]) + '.' + values[0].getFullYear();
	            //this._rightInput.value = this.getCorrectDay(values[1]) + '.' + this.getCorrectMonth(values[1]) + '.' + values[1].getFullYear();
	        }
	    }, {
	        key: 'getCorrectDay',
	        value: function getCorrectDay(date) {

	            var day = String(date.getDate());
	            return day.length === 1 ? '0' + day : day;
	        }
	    }, {
	        key: 'getCorrectMonth',
	        value: function getCorrectMonth(date) {

	            var month = String(date.getMonth() + 1);
	            return month.length === 1 ? '0' + month : month;
	        }
	    }]);
	    return ExtendedSliderWidget;
	}(SliderWidget);

	/* src\js\components\uiElements\widgetElements\sidebar\components\resultsTab\components\tableHeader\view\Data.html generated by Svelte v2.16.1 */

	var now = new Date();

	function isSortHidden$3(_ref) {
					var sort = _ref.sort,
					    isMouseHovered = _ref.isMouseHovered;
					var _sort$field = sort.field,
					    field = _sort$field === undefined ? '' : _sort$field;


					if (field === 'acqdate') {
									return false;
					}

					if (isMouseHovered) {
									return false;
					}

					return true;
	}

	function isFilterApplied$2(_ref2) {
					var value = _ref2.value,
					    date = _ref2.date;


					var minDate = date[0] ? date[0] : now;
					var maxDate = date[1] ? date[1] : now;
					var minValue = value[0] ? value[0] : now;
					var maxValue = value[1] ? value[1] : now;

					return !compareDates(minDate, minValue) || !compareDates(maxDate, maxValue);
	}

	function sortMethod$3(_ref3) {
					var sort = _ref3.sort;

					return !sort.asc ? 'down' : 'up';
	}

	function datesDiff(_ref4) {
					var value = _ref4.value;


					var minValue = value[0] ? value[0] : now;
					var maxValue = value[1] ? value[1] : now;

					return getDifferenceBetweenDates(minValue, maxValue);
	}

	function minDate(_ref5) {
					var date = _ref5.date;

					return date ? date[0] : now;
	}

	function maxDate(_ref6) {
					var date = _ref6.date;

					return date ? date[1] : now;
	}

	function data$g() {
					return {
									sort: { field: 'acqdate', asc: false },
									isMouseHovered: false,
									isToggledHidden: true,
									value: [now, now],
									tmpValue: [now, now],
									date: [now, now]
					};
	}
	function getMonthName(month) {

					var monthObject = {
									0: 'янв',
									1: 'фев',
									2: 'мар',
									3: 'апр',
									4: 'май',
									5: 'июн',
									6: 'июл',
									7: 'авг',
									8: 'сен',
									9: 'окт',
									10: 'ноя',
									11: 'дек'
					};

					return monthObject[parseInt(month)];
	}
	var methods$d = {
					setData: function setData$$1(filterDate) {
									var setLimits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


									this.set({ date: filterDate, value: filterDate, tmpValue: filterDate, isToggledHidden: true });

									if (setLimits) {
													this._dateSlider.setLimits(filterDate[0].getTime(), filterDate[1].getTime());
									}
									this._dateSlider.values = [filterDate[0].getTime(), filterDate[1].getTime()];

									if (setLimits) {
													this._dateSlider._bar.querySelector('.slider-widget-range').style.width = '195px';
									}

									this._startDate.setDate(new Date(filterDate[0]));
									this._endDate.setDate(new Date(filterDate[1]));
					},
					clearFilter: function clearFilter(filterDate) {
									this.setData(filterDate);
					},
					onSortHover: function onSortHover() {

									this.set({ isMouseHovered: true });
					},
					onSortOut: function onSortOut() {

									this.set({ isMouseHovered: false });
					},
					onSortClick: function onSortClick() {
									var _get = this.get(),
									    _get$sort = _get.sort,
									    sort = _get$sort === undefined ? {} : _get$sort;

									var _sort$asc = sort.asc,
									    asc = _sort$asc === undefined ? false : _sort$asc;


									this.fire('setSorted', { field: 'acqdate', asc: !asc });
					},
					onHeaderClick: function onHeaderClick() {
									var _get2 = this.get(),
									    _get2$isToggledHidden = _get2.isToggledHidden,
									    isToggledHidden = _get2$isToggledHidden === undefined ? true : _get2$isToggledHidden,
									    _get2$value = _get2.value,
									    value = _get2$value === undefined ? [] : _get2$value;

									var data = { isToggledHidden: !isToggledHidden };

									this.set(data);

									if (!isToggledHidden) {

													this.setData(value, false);
									}

									this.fire('onHeaderClick', 'data');
					},
					initDatePicker: function initDatePicker() {
									var _get3 = this.get(),
									    minDate = _get3.minDate,
									    maxDate = _get3.maxDate;

									this._dateFormat = 'dd.mm.yy';
									var i18n = {
													previousMonth: 'Предыдущий месяц',
													nextMonth: 'Следующий месяц',
													months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
													weekdays: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
													weekdaysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']
									};
									switch (Translations$2.getLanguage()) {
													default:
													case 'rus':
																	moment.locale('ru');
																	break;
													case 'eng':
																	moment.locale('en');
																	i18n = {
																					previousMonth: 'Previous Month',
																					nextMonth: 'Next Month',
																					months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
																					weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
																					weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
																	};
																	break;
									}

									this._startDate = new pikaday({
													field: this.refs.startDate,
													format: 'DD.MM.YYYY',
													yearRange: 20,
													i18n: i18n,
													keyboardInput: false,
													blurFieldOnSelect: false
									});

									this._endDate = new pikaday({
													field: this.refs.endDate,
													format: 'DD.MM.YYYY',
													yearRange: 20,
													i18n: i18n,
													keyboardInput: false,
													blurFieldOnSelect: false
									});

									this._startDate.setDate(minDate);
									this._endDate.setDate(maxDate);
					},
					initSlider: function initSlider() {
									var _get4 = this.get(),
									    minDate = _get4.minDate,
									    maxDate = _get4.maxDate,
									    _get4$value = _get4.value;

									this._dateSlider = new ExtendedSliderWidget$1(this.refs.sliderContainer, {
													mode: 'date',
													min: minDate.getTime(),
													max: maxDate.getTime(),
													startDate: this._startDate,
													endDate: this._endDate
									});

									var intValues = [minDate.getTime(), maxDate.getTime()];

									this._dateSlider.values = intValues;
									this._dateSlider._bar.querySelector('.slider-widget-range').style.width = '195px';

									this._dateSlider.addEventListener('stop', this.onSliderStopHandler.bind(this));
					},
					onSliderStopHandler: function onSliderStopHandler(e) {

									var nowTime = now.getTime();
									var _e$detail = e.detail,
									    detail = _e$detail === undefined ? [nowTime, nowTime] : _e$detail;

									var correctData = [new Date(detail[0]), new Date(detail[1])];

									this.set({ tmpValue: correctData });
					},
					onApplyClick: function onApplyClick() {
									var _get5 = this.get(),
									    _get5$tmpValue = _get5.tmpValue,
									    tmpValue = _get5$tmpValue === undefined ? [] : _get5$tmpValue;

									this.set({ value: [].concat(toConsumableArray(tmpValue)), isToggledHidden: true });

									this.fire('changeClientFilter', { detail: { name: 'date', value: tmpValue } });
					}
	};

	function oncreate$4() {

					this.initDatePicker();
					this.initSlider();
	}
	function create_main_fragment$f(component, ctx) {
					var td,
					    div9,
					    div2,
					    div1,
					    div0,
					    span0,
					    text0,
					    text1,
					    span1,
					    text2,
					    span1_class_value,
					    text3,
					    i,
					    i_class_value,
					    text4,
					    div8,
					    div3,
					    input0,
					    text5,
					    input1,
					    text6,
					    div4,
					    text7,
					    div5,
					    text8_value = getMonthName(ctx.minDate.getMonth()),
					    text8,
					    text9,
					    text10_value = ctx.minDate.getFullYear(),
					    text10,
					    text11,
					    div6,
					    text12_value = getMonthName(ctx.maxDate.getMonth()),
					    text12,
					    text13,
					    text14_value = ctx.maxDate.getFullYear(),
					    text14,
					    text15,
					    div7;

					function click_handler(event) {
									component.onHeaderClick();
					}

					function click_handler_1(event) {
									component.onSortClick();
					}

					function click_handler_2(event) {
									component.onApplyClick();
					}

					function mouseover_handler(event) {
									component.onSortHover();
					}

					function mouseout_handler(event) {
									component.onSortOut();
					}

					return {
									c: function c() {
													td = createElement("td");
													div9 = createElement("div");
													div2 = createElement("div");
													div1 = createElement("div");
													div0 = createElement("div");
													span0 = createElement("span");
													text0 = createText(ctx.datesDiff);
													text1 = createText("\r\n            ");
													span1 = createElement("span");
													text2 = createText("Дата");
													text3 = createText("\r\n            ");
													i = createElement("i");
													text4 = createText("\r\n        ");
													div8 = createElement("div");
													div3 = createElement("div");
													input0 = createElement("input");
													text5 = createText("\r\n                -\r\n                ");
													input1 = createElement("input");
													text6 = createText("\r\n            ");
													div4 = createElement("div");
													text7 = createText("\r\n            ");
													div5 = createElement("div");
													text8 = createText(text8_value);
													text9 = createText(" ");
													text10 = createText(text10_value);
													text11 = createText("\r\n            ");
													div6 = createElement("div");
													text12 = createText(text12_value);
													text13 = createText(" ");
													text14 = createText(text14_value);
													text15 = createText("\r\n            ");
													div7 = createElement("div");
													div7.textContent = "Применить";
													span0.className = "date-diff";
													setStyle(div0, "display", ctx.isFilterApplied ? 'block' : 'none');
													div1.className = "filterable-applied";
													addListener(span1, "click", click_handler);
													span1.className = span1_class_value = "filterable-header-date filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.isFilterApplied ? ' applied' : '');
													addListener(i, "click", click_handler_1);
													i.className = i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod;
													setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
													div2.className = "on-hover-div";
													setAttribute(input0, "type", "text");
													input0.value = "";
													input0.className = "search-options-period-from-value min-input results-filter-date-start-container";
													setAttribute(input1, "type", "text");
													input1.value = "";
													input1.className = "search-options-period-to-value  max-input results-filter-date-end-container";
													setStyle(div3, "text-align", "left");
													setStyle(div3, "padding-top", "10px");
													div4.className = "results-date-slider-container";
													div5.className = "min-value";
													div6.className = "max-value";
													addListener(div7, "click", click_handler_2);
													div7.className = "apply";
													setStyle(div7, "margin-top", "25px");
													setStyle(div8, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
													div8.className = "togglable-content-date togglable-content filterable-date-container";
													div9.className = "filterable-field-container";
													addListener(td, "mouseover", mouseover_handler);
													addListener(td, "mouseout", mouseout_handler);
													setStyle(td, "padding-left", "10px");
													td.className = "table-list-col";
													td.dataset.field = "acqdate";
									},
									m: function m(target, anchor) {
													insert(target, td, anchor);
													append(td, div9);
													append(div9, div2);
													append(div2, div1);
													append(div1, div0);
													append(div0, span0);
													append(span0, text0);
													append(div2, text1);
													append(div2, span1);
													append(span1, text2);
													append(div2, text3);
													append(div2, i);
													append(div9, text4);
													append(div9, div8);
													append(div8, div3);
													append(div3, input0);
													component.refs.startDate = input0;
													append(div3, text5);
													append(div3, input1);
													component.refs.endDate = input1;
													append(div8, text6);
													append(div8, div4);
													component.refs.sliderContainer = div4;
													append(div8, text7);
													append(div8, div5);
													append(div5, text8);
													append(div5, text9);
													append(div5, text10);
													append(div8, text11);
													append(div8, div6);
													append(div6, text12);
													append(div6, text13);
													append(div6, text14);
													append(div8, text15);
													append(div8, div7);
									},
									p: function p(changed, ctx) {
													if (changed.datesDiff) {
																	setData(text0, ctx.datesDiff);
													}

													if (changed.isFilterApplied) {
																	setStyle(div0, "display", ctx.isFilterApplied ? 'block' : 'none');
													}

													if ((changed.isToggledHidden || changed.isFilterApplied) && span1_class_value !== (span1_class_value = "filterable-header-date filterable-header " + (ctx.isToggledHidden ? '' : 'active') + " " + (ctx.isFilterApplied ? ' applied' : ''))) {
																	span1.className = span1_class_value;
													}

													if (changed.sortMethod && i_class_value !== (i_class_value = "table-list-sort table-list-sort-" + ctx.sortMethod)) {
																	i.className = i_class_value;
													}

													if (changed.isSortHidden) {
																	setStyle(i, "visibility", ctx.isSortHidden ? 'hidden' : 'visible');
													}

													if (changed.minDate && text8_value !== (text8_value = getMonthName(ctx.minDate.getMonth()))) {
																	setData(text8, text8_value);
													}

													if (changed.minDate && text10_value !== (text10_value = ctx.minDate.getFullYear())) {
																	setData(text10, text10_value);
													}

													if (changed.maxDate && text12_value !== (text12_value = getMonthName(ctx.maxDate.getMonth()))) {
																	setData(text12, text12_value);
													}

													if (changed.maxDate && text14_value !== (text14_value = ctx.maxDate.getFullYear())) {
																	setData(text14, text14_value);
													}

													if (changed.isToggledHidden) {
																	setStyle(div8, "visibility", ctx.isToggledHidden ? 'hidden' : 'visible');
													}
									},
									d: function d(detach) {
													if (detach) {
																	detachNode(td);
													}

													removeListener(span1, "click", click_handler);
													removeListener(i, "click", click_handler_1);
													if (component.refs.startDate === input0) component.refs.startDate = null;
													if (component.refs.endDate === input1) component.refs.endDate = null;
													if (component.refs.sliderContainer === div4) component.refs.sliderContainer = null;
													removeListener(div7, "click", click_handler_2);
													removeListener(td, "mouseover", mouseover_handler);
													removeListener(td, "mouseout", mouseout_handler);
									}
					};
	}

	function Data(options) {
					var _this = this;

					init(this, options);
					this.refs = {};
					this._state = assign(data$g(), options.data);

					this._recompute({ sort: 1, isMouseHovered: 1, value: 1, date: 1 }, this._state);
					this._intro = true;

					this._fragment = create_main_fragment$f(this, this._state);

					this.root._oncreate.push(function () {
									oncreate$4.call(_this);
									_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
					});

					if (options.target) {
									this._fragment.c();
									this._mount(options.target, options.anchor);

									flush(this);
					}
	}

	assign(Data.prototype, proto$4);
	assign(Data.prototype, methods$d);

	Data.prototype._recompute = function _recompute(changed, state) {
					if (changed.sort || changed.isMouseHovered) {
									if (this._differs(state.isSortHidden, state.isSortHidden = isSortHidden$3(state))) changed.isSortHidden = true;
					}

					if (changed.value || changed.date) {
									if (this._differs(state.isFilterApplied, state.isFilterApplied = isFilterApplied$2(state))) changed.isFilterApplied = true;
					}

					if (changed.sort) {
									if (this._differs(state.sortMethod, state.sortMethod = sortMethod$3(state))) changed.sortMethod = true;
					}

					if (changed.value) {
									if (this._differs(state.datesDiff, state.datesDiff = datesDiff(state))) changed.datesDiff = true;
					}

					if (changed.date) {
									if (this._differs(state.minDate, state.minDate = minDate(state))) changed.minDate = true;
									if (this._differs(state.maxDate, state.maxDate = maxDate(state))) changed.maxDate = true;
					}
	};

	/* src\js\components\uiElements\widgetElements\sidebar\components\resultsTab\components\tableHeader\view\View.html generated by Svelte v2.16.1 */

	var now$1 = new Date();

	function data$h() {
		return {
			clientFilter: {
				unChecked: [],
				clouds: [0, 100],
				angle: [0, 80],
				date: [now$1, now$1]
			},
			sort: { field: 'acqdate', asc: true }
		};
	}
	var methods$e = {
		onCancelClick: function onCancelClick() {

			this.set({ hidden: true });
		},
		onCopyClick: function onCopyClick() {

			var input = this.refs.textInput;

			this.fire('copy', input);
			this.set({ hidden: true });
		},
		changeSorting: function changeSorting(data) {

			this.set({ sort: data });
			this.fire('setSorted', data);
		},
		changeClientFilter: function changeClientFilter(event) {

			this.fire('changeClientFilter', event);
		},
		setData: function setData$$1(data) {
			var _data$satellites = data.satellites,
			    satellites = _data$satellites === undefined ? [] : _data$satellites,
			    _data$clientFilter$fi = data.clientFilter.filterData,
			    _data$clientFilter$fi2 = _data$clientFilter$fi.clouds,
			    clouds = _data$clientFilter$fi2 === undefined ? [] : _data$clientFilter$fi2,
			    _data$clientFilter$fi3 = _data$clientFilter$fi.angle,
			    angle = _data$clientFilter$fi3 === undefined ? [] : _data$clientFilter$fi3,
			    _data$clientFilter$fi4 = _data$clientFilter$fi.date,
			    filterDate = _data$clientFilter$fi4 === undefined ? [] : _data$clientFilter$fi4;


			this.refs.satellites.set({ satellites: satellites, isToggledHidden: true });
			this.refs.cloudness.set({ clouds: clouds, value: clouds, tmpValue: clouds, isToggledHidden: true });
			this.refs.angle.set({ angle: angle, value: angle, tmpValue: angle, isToggledHidden: true });
			this.refs.data.setData(filterDate);
		},
		clearFilter: function clearFilter(filterData) {
			var _filterData$clientFil = filterData.clientFilter.filterData,
			    _filterData$clientFil2 = _filterData$clientFil.unChecked,
			    unChecked = _filterData$clientFil2 === undefined ? [] : _filterData$clientFil2,
			    _filterData$clientFil3 = _filterData$clientFil.clouds,
			    clouds = _filterData$clientFil3 === undefined ? [] : _filterData$clientFil3,
			    _filterData$clientFil4 = _filterData$clientFil.angle,
			    angle = _filterData$clientFil4 === undefined ? [] : _filterData$clientFil4,
			    _filterData$clientFil5 = _filterData$clientFil.date,
			    date = _filterData$clientFil5 === undefined ? [] : _filterData$clientFil5;


			this.refs.satellites.set({
				unChecked: unChecked,
				tmpUnchecked: unChecked,
				isToggledHidden: true
			});

			this.refs.cloudness.clearFilter(clouds);

			this.refs.angle.clearFilter(angle);

			this.refs.data.clearFilter(date);
		},
		onHeaderClick: function onHeaderClick(state) {

			if (state === 'satellites') {
				this.refs.cloudness.set({ isToggledHidden: true });
				this.refs.angle.set({ isToggledHidden: true });
				this.refs.data.set({ isToggledHidden: true });
			} else if (state === 'clouds') {
				this.refs.satellites.set({ isToggledHidden: true });
				this.refs.angle.set({ isToggledHidden: true });
				this.refs.data.set({ isToggledHidden: true });
			} else if (state === 'angles') {
				this.refs.satellites.set({ isToggledHidden: true });
				this.refs.cloudness.set({ isToggledHidden: true });
				this.refs.data.set({ isToggledHidden: true });
			} else {
				this.refs.satellites.set({ isToggledHidden: true });
				this.refs.cloudness.set({ isToggledHidden: true });
				this.refs.angle.set({ isToggledHidden: true });
			}
		},
		onAddAllToCartClick: function onAddAllToCartClick() {

			this.fire('addAllToCart');
		}
	};

	function create_main_fragment$g(component, ctx) {
		var div, table, colgroup, text7, tbody, tr, td0, text8, td1, text10, text11, text12, text13, text14, td2, text15, td3;

		var satellites_initial_data = {
			sort: ctx.sort,
			unChecked: ctx.clientFilter['unChecked'],
			tmpUnchecked: ctx.clientFilter['unChecked']
		};
		var satellites = new Satellites({
			root: component.root,
			store: component.store,
			data: satellites_initial_data
		});

		satellites.on("setSorted", function (event) {
			component.changeSorting(event);
		});
		satellites.on("changeClientFilter", function (event) {
			component.changeClientFilter(event);
		});
		satellites.on("onHeaderClick", function (event) {
			component.onHeaderClick(event);
		});

		component.refs.satellites = satellites;

		var cloudness_initial_data = {
			clouds: ctx.clientFilter['clouds'],
			sort: ctx.sort
		};
		var cloudness = new Cloudness({
			root: component.root,
			store: component.store,
			data: cloudness_initial_data
		});

		cloudness.on("setSorted", function (event) {
			component.changeSorting(event);
		});
		cloudness.on("onHeaderClick", function (event) {
			component.onHeaderClick(event);
		});
		cloudness.on("changeClientFilter", function (event) {
			component.changeClientFilter(event);
		});

		component.refs.cloudness = cloudness;

		var angles_initial_data = {
			angle: ctx.clientFilter['angle'],
			sort: ctx.sort
		};
		var angles = new Angles({
			root: component.root,
			store: component.store,
			data: angles_initial_data
		});

		angles.on("setSorted", function (event) {
			component.changeSorting(event);
		});
		angles.on("onHeaderClick", function (event) {
			component.onHeaderClick(event);
		});
		angles.on("changeClientFilter", function (event) {
			component.changeClientFilter(event);
		});

		component.refs.angle = angles;

		var data_1_initial_data = { date: ctx.clientFilter['date'], sort: ctx.sort };
		var data_1 = new Data({
			root: component.root,
			store: component.store,
			data: data_1_initial_data
		});

		data_1.on("setSorted", function (event) {
			component.changeSorting(event);
		});
		data_1.on("onHeaderClick", function (event) {
			component.onHeaderClick(event);
		});
		data_1.on("changeClientFilter", function (event) {
			component.changeClientFilter(event);
		});

		component.refs.data = data_1;

		function click_handler(event) {
			component.onAddAllToCartClick();
		}

		return {
			c: function c() {
				div = createElement("div");
				table = createElement("table");
				colgroup = createElement("colgroup");
				colgroup.innerHTML = '<col>\n\t\t\t            <col>\n\t\t\t            <col>\n\t\t\t            <col>\n\t\t\t            <col>\n\t\t\t            <col>\n\t\t\t            <col>\n\t\t\t            <col>';
				text7 = createText("\r\n        ");
				tbody = createElement("tbody");
				tr = createElement("tr");
				td0 = createElement("td");
				td0.innerHTML = '<i class="table-list-sort" style="display: none"></i>';
				text8 = createText("\r\n                ");
				td1 = createElement("td");
				td1.innerHTML = '<i class="search search-stereo"></i>\n\t\t\t                    <i class="table-list-sort"></i>';
				text10 = createText("\r\n                ");
				satellites._fragment.c();
				text11 = createText("\r\n\r\n                ");
				cloudness._fragment.c();
				text12 = createText("\r\n\r\n                ");
				angles._fragment.c();
				text13 = createText("\r\n\r\n                ");
				data_1._fragment.c();
				text14 = createText("\r\n                \r\n                ");
				td2 = createElement("td");
				td2.innerHTML = '<i class="table-list-sort" style="display: none"></i>';
				text15 = createText("\r\n                ");
				td3 = createElement("td");
				td3.innerHTML = '<i class="cart-add cart-add-active"></i>\n\t\t\t                    <i class="table-list-sort" style="display: none"></i>';
				td0.className = "table-list-col";
				td0.dataset.field = "visible";
				setStyle(td0, "padding-top", "20px");
				td1.title = "Стерео";
				td1.className = "table-list-col";
				td1.dataset.field = "stereo";
				setStyle(td1, "padding-top", "20px");
				setStyle(td1, "padding-left", "0px");
				td2.className = "table-list-col";
				td2.dataset.field = "info";
				setStyle(td2, "padding-top", "20px");
				addListener(td3, "click", click_handler);
				td3.title = "Добавить все в корзину";
				td3.className = "table-list-col";
				td3.dataset.field = "cart";
				setStyle(td3, "padding-top", "20px");
				div.className = "table-list-header";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, table);
				append(table, colgroup);
				append(table, text7);
				append(table, tbody);
				append(tbody, tr);
				append(tr, td0);
				append(tr, text8);
				append(tr, td1);
				append(tr, text10);
				satellites._mount(tr, null);
				append(tr, text11);
				cloudness._mount(tr, null);
				append(tr, text12);
				angles._mount(tr, null);
				append(tr, text13);
				data_1._mount(tr, null);
				append(tr, text14);
				append(tr, td2);
				append(tr, text15);
				append(tr, td3);
				component.refs.header = div;
			},
			p: function p(changed, ctx) {
				var satellites_changes = {};
				if (changed.sort) satellites_changes.sort = ctx.sort;
				if (changed.clientFilter) satellites_changes.unChecked = ctx.clientFilter['unChecked'];
				if (changed.clientFilter) satellites_changes.tmpUnchecked = ctx.clientFilter['unChecked'];
				satellites._set(satellites_changes);

				var cloudness_changes = {};
				if (changed.clientFilter) cloudness_changes.clouds = ctx.clientFilter['clouds'];
				if (changed.sort) cloudness_changes.sort = ctx.sort;
				cloudness._set(cloudness_changes);

				var angles_changes = {};
				if (changed.clientFilter) angles_changes.angle = ctx.clientFilter['angle'];
				if (changed.sort) angles_changes.sort = ctx.sort;
				angles._set(angles_changes);

				var data_1_changes = {};
				if (changed.clientFilter) data_1_changes.date = ctx.clientFilter['date'];
				if (changed.sort) data_1_changes.sort = ctx.sort;
				data_1._set(data_1_changes);
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				satellites.destroy();
				if (component.refs.satellites === satellites) component.refs.satellites = null;
				cloudness.destroy();
				if (component.refs.cloudness === cloudness) component.refs.cloudness = null;
				angles.destroy();
				if (component.refs.angle === angles) component.refs.angle = null;
				data_1.destroy();
				if (component.refs.data === data_1) component.refs.data = null;
				removeListener(td3, "click", click_handler);
				if (component.refs.header === div) component.refs.header = null;
			}
		};
	}

	function View$5(options) {
		init(this, options);
		this.refs = {};
		this._state = assign(data$h(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$g(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(View$5.prototype, proto$4);
	assign(View$5.prototype, methods$e);

	var TableHeaderComponent = function (_BaseComponent) {
	    inherits(TableHeaderComponent, _BaseComponent);

	    function TableHeaderComponent() {
	        classCallCheck(this, TableHeaderComponent);
	        return possibleConstructorReturn(this, (TableHeaderComponent.__proto__ || Object.getPrototypeOf(TableHeaderComponent)).apply(this, arguments));
	    }

	    createClass(TableHeaderComponent, [{
	        key: 'init',
	        value: function init() {

	            this._view = new View$5({
	                target: document.querySelector('#map div.leaflet-control div.panes div.results-pane')
	            });

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var store = application.getStore();
	            var view = this.getView();
	            var ContourController = application.getBridgeController('contour');

	            store.on('contours:researchedListHeader', this._onSetSatellites.bind(this));
	            store.on('contours:startResearchedListHeader', this._onSetSatellites.bind(this));
	            store.on('clientFilter:clear', this._onClearFilter.bind(this));
	            view.on('setSorted', this._onSetSorted.bind(this));
	            view.on('changeClientFilter', function (e) {
	                return _this2.events.trigger('filter:change', e);
	            });
	            view.on('addAllToCart', function () {
	                return ContourController.addAllToCartOnListAndMap();
	            });
	        }
	    }, {
	        key: '_onSetSorted',
	        value: function _onSetSorted(data) {

	            this.events.trigger('sortGrid', data);
	        }
	    }, {
	        key: '_onClearFilter',
	        value: function _onClearFilter() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var view = this.getView();

	            var _store$getData = store.getData('searchCriteria'),
	                clouds = _store$getData.clouds,
	                angle = _store$getData.angle,
	                date = _store$getData.date;

	            var clearedFilter = {
	                isChanged: false,
	                filterData: {
	                    unChecked: [],
	                    clouds: clouds,
	                    angle: angle,
	                    date: date
	                }
	            };

	            view.clearFilter({ clientFilter: clearedFilter });
	        }
	    }, {
	        key: '_onSetSatellites',
	        value: function _onSetSatellites() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var view = this.getView();

	            var results = store.getResults();

	            var _store$getData2 = store.getData('searchCriteria'),
	                satellites = _store$getData2.satellites,
	                clouds = _store$getData2.clouds,
	                angle = _store$getData2.angle,
	                date = _store$getData2.date;

	            var clearedFilter = {
	                isChanged: false,
	                filterData: {
	                    unChecked: [],
	                    clouds: clouds,
	                    angle: angle,
	                    date: date
	                }
	            };

	            var resultPlatforms = [];
	            results.forEach(function (item) {
	                var platform = getProperty(item, 'platform');
	                if (resultPlatforms.indexOf(platform) === -1) {
	                    resultPlatforms.push(platform);
	                }
	            });

	            var correctSatellites = [];
	            satellites.ms.forEach(function (item) {
	                //console.log(item.name, item.platforms)
	                var hasInResults = item.platforms.some(function (item) {
	                    return resultPlatforms.indexOf(item) !== -1;
	                });
	                item.checked && hasInResults && correctSatellites.push(item);
	            });
	            satellites.pc.forEach(function (item) {
	                //console.log(item.name, item.platforms)
	                var hasInResults = item.platforms.some(function (item) {
	                    return resultPlatforms.indexOf(item) !== -1;
	                });
	                item.checked && hasInResults && correctSatellites.push(item);
	            });

	            view.setData({
	                satellites: correctSatellites,
	                clientFilter: clearedFilter
	            });
	        }
	    }]);
	    return TableHeaderComponent;
	}(BaseComponent);

	var View$6 = function View(_ref) {
	    var sidebarView = _ref.sidebarView;
	    classCallCheck(this, View);


	    return sidebarView.addTab({
	        id: 'results',
	        icon: 'sidebar-results',
	        opened: 'sidebar-results-opened',
	        closed: 'sidebar-results-closed',
	        tooltip: Translations$2.getText('results.title')
	    });
	};

	var ResultTabComponent = function (_BaseCompositedCompon) {
	    inherits(ResultTabComponent, _BaseCompositedCompon);

	    function ResultTabComponent() {
	        classCallCheck(this, ResultTabComponent);
	        return possibleConstructorReturn(this, (ResultTabComponent.__proto__ || Object.getPrototypeOf(ResultTabComponent)).apply(this, arguments));
	    }

	    createClass(ResultTabComponent, [{
	        key: 'init',
	        value: function init() {

	            var parent = this.getParentComponent();
	            var sidebarView = parent.getView();

	            this._view = new View$6({
	                sidebarView: sidebarView
	            });

	            this.initChildren([{
	                index: 'header',
	                constructor: HeaderComponent
	            }, {
	                index: 'tableHeader',
	                constructor: TableHeaderComponent
	            }, {
	                index: 'list',
	                constructor: ResultListComponent$1
	            }]);

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var store = application.getStore();
	            var tableHeader = this.getChildComponent('tableHeader');
	            var list = this.getChildComponent('list');

	            store.on('currentTab:changeAfter', function () {
	                return _this2._onAfterTabChangeHandler();
	            });
	            tableHeader.events.on('sortGrid', function (sortData) {
	                return list.sortGrid(sortData);
	            });
	        }
	    }, {
	        key: '_onAfterTabChangeHandler',
	        value: function _onAfterTabChangeHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = store.getMetaItem('currentTab');
	            var resultsUpdated = store.getMetaItem('updateResults');

	            if (currentTab === TAB_RESULTS_NAME && resultsUpdated) {
	                store.setMetaItem('updateResults', false);
	            }
	        }
	    }]);
	    return ResultTabComponent;
	}(BaseCompositedComponent);

	var OverriddenTristate = function () {
		function OverriddenTristate(target, items) {
			classCallCheck(this, OverriddenTristate);

			this._target = target;
			this._items = items;
			this._handleClick = this._handleClick.bind(this);
			this.update = this.update.bind(this);
			this._target.addEventListener('click', this._handleClick);
			this._attachEvents(this._items);
			this.state = this._items;
		}

		createClass(OverriddenTristate, [{
			key: '_handleClick',
			value: function _handleClick() {
				var state = this._target.checked;
				for (var i = 0; i < this._items.length; ++i) {
					var checked = this._items[i].checked;
				}
			}
		}, {
			key: '_attachEvents',
			value: function _attachEvents(items) {
				for (var i = 0; i < items.length; ++i) {
					items[i].addEventListener('click', this.update);
				}
			}
		}, {
			key: 'update',
			value: function update() {
				if (this._items.length > 1) {
					var _state = this.state,
					    indeterminate = _state.indeterminate,
					    checked = _state.checked;

					this._target.indeterminate = indeterminate;
					if (!indeterminate) {
						this._target.checked = checked;
					}
				}
			}
		}, {
			key: 'state',
			set: function set$$1(items) {
				this._items = items;
				this._attachEvents(this._items);
				this.update();
			},
			get: function get$$1() {
				var checked = this._items[0].checked;
				for (var i = 1; i < this._items.length; i++) {
					if (this._items[i].checked != checked) {
						return { indeterminate: true };
					}
				}
				return { indeterminate: false, checked: checked };
			}
		}]);
		return OverriddenTristate;
	}();

	var OverriddenDataGrid = function (_DataGrid) {
	    inherits(OverriddenDataGrid, _DataGrid);

	    function OverriddenDataGrid() {
	        classCallCheck(this, OverriddenDataGrid);
	        return possibleConstructorReturn(this, (OverriddenDataGrid.__proto__ || Object.getPrototypeOf(OverriddenDataGrid)).apply(this, arguments));
	    }

	    createClass(OverriddenDataGrid, [{
	        key: '_attachColumnsEvents',
	        value: function _attachColumnsEvents() {
	            var _this2 = this;

	            if (this.hasItems) {
	                var cols = this._header.querySelectorAll('td');
	                var names = Object.keys(this._fields);

	                var _loop = function _loop(i) {
	                    var name = names[i];
	                    var field = _this2._fields[name];
	                    var col = cols[i];
	                    if (field.sortable) {
	                        col.addEventListener('click', _this2._handleSort.bind(_this2, i));
	                    }
	                    if (field.type === 'selector') {
	                        var ts = col.querySelector('.table-list-tristate');
	                        //ts.addEventListener('click', this._stopPropagation);
	                        var items = _this2._body.querySelectorAll('td:nth-child(' + (i + 1) + ') input[type="checkbox"]');
	                        field.tristate = new OverriddenTristate(ts, items);
	                    }
	                    col.addEventListener('click', function (e) {
	                        var event = document.createEvent('Event');
	                        event.initEvent('column:click', false, false);
	                        event.detail = { col: col, field: field, name: name };
	                        _this2.dispatchEvent(event);
	                    });
	                };

	                for (var i = 0; i < cols.length; ++i) {
	                    _loop(i);
	                }
	            }
	        }
	    }]);
	    return OverriddenDataGrid;
	}(DataGrid);

	var FavoritesList = function (_EventTarget) {
	    inherits(FavoritesList, _EventTarget);

	    function FavoritesList(_ref) {
	        var restricted = _ref.restricted;
	        classCallCheck(this, FavoritesList);

	        var _this = possibleConstructorReturn(this, (FavoritesList.__proto__ || Object.getPrototypeOf(FavoritesList)).call(this));

	        _this._cart = {};
	        _this._restricted = restricted;
	        _this._container = document.querySelector('#map div.leaflet-control div.panes div.favorites-pane');
	        _this._container.classList.add('favorites-list');
	        _this._onCellClick = _this._onCellClick.bind(_this);
	        _this._onColumnClick = _this._onColumnClick.bind(_this);
	        _this._onRowMouseOver = _this._onRowMouseOver.bind(_this);
	        _this._onRowMouseOut = _this._onRowMouseOut.bind(_this);
	        _this._onSort = _this._onSort.bind(_this);
	        _this._activeInfo = null;
	        _this._disableMouseHover = false;
	        _this._indexBy = 'gmx_id';
	        _this._fields = {
	            'selected': {
	                type: 'selector',
	                default: false
	            },
	            'visible': {
	                type: 'string',
	                columnIcon: 'search search-visibility-off',
	                default: false,
	                width: 30,
	                styler: function styler(item) {
	                    switch (item.visible) {
	                        case 'visible':
	                            return 'search search-visibility-off';
	                        case 'hidden':
	                            return 'search search-visibility-on';
	                        case 'loading':
	                            return 'search-visibility-loading';
	                        case 'failed':
	                            return 'search-visibility-failed';
	                        default:
	                            return '';
	                    }
	                }
	            },
	            'stereo': {
	                columnIcon: 'search search-stereo',
	                type: 'boolean',
	                icon: 'search',
	                yes: 'search-stereo',
	                sortable: true,
	                default: false,
	                tooltip: Translations$2.getText('results.stereo'),
	                formatter: function formatter(item) {
	                    switch (_typeof(item.stereo)) {
	                        case 'string':
	                            return item.stereo !== 'NONE' && item.stereo !== '';
	                        case 'boolean':
	                            return item.stereo;
	                        default:
	                            return false;
	                    }
	                }
	            },
	            'platform': {
	                type: 'string',
	                name: Translations$2.getText('results.satellite'),
	                sortable: true,
	                formatter: function formatter(item) {
	                    switch (item.platform) {
	                        case 'SPOT6':
	                        case 'SPOT 6':
	                            return item.islocal ? 'SPOT 6' : 'SPOT 6 (A)';
	                        case 'SPOT7':
	                        case 'SPOT 7':
	                            return item.islocal ? 'SPOT 7' : 'SPOT 7 (A)';
	                        case 'SPOT-6':
	                            return item.product ? 'SPOT 6 (P)' : 'SPOT 6';
	                        case 'SPOT-7':
	                            return item.product ? 'SPOT 7 (P)' : 'SPOT 7';
	                        case 'SPOT 5':
	                            var sp5 = 'SPOT 5';
	                            if (item.sensor === 'J') {
	                                if (item.spot5_a_exists & item.spot5_b_exists) {
	                                    sp5 = 'SPOT 5 - 2.5ms';
	                                } else if (item.spot5_a_exists || item.spot5_b_exists) {
	                                    sp5 = 'SPOT 5 - 5ms';
	                                } else {
	                                    sp5 = 'SPOT 5 - 10ms';
	                                }
	                            } else if (item.sensor === 'A' || item.sensor === 'B' && !item.spot5_b_exists) {
	                                sp5 = 'SPOT 5 - 5pan';
	                            } else if (item.sensor === 'A' && item.spot5_b_exists) {
	                                sp5 = 'SPOT 5 - 2.5pan';
	                            }
	                            return '' + sp5 + (item.islocal ? '' : ' (A)');
	                        case 'Ресурс-П1':
	                        case 'Ресурс-П2':
	                        case 'Ресурс-П3':
	                            if (item.spot5_a_exists && !item.spot5_b_exists) {
	                                return item.platform + ' pan';
	                            } else if (item.spot5_b_exists) {
	                                return item.platform + ' ms';
	                            } else {
	                                return item.platform;
	                            }
	                        case 'GF1':
	                            switch (item.sensor) {
	                                case 'A':
	                                    return 'GaoFen-1 (2m)';
	                                case 'B':
	                                    return 'GaoFen-1 (16m)';
	                                default:
	                                    return 'GaoFen-1';
	                            }
	                        case '1A-PHR-1A':
	                            return '1ATLAS (PHR-1A)';
	                        case '1A-PHR-1B':
	                            return '1ATLAS (PHR-1B)';
	                        case '1A-SPOT-6':
	                            return '1ATLAS (SP6)';
	                        case '1A-SPOT-7':
	                            return '1ATLAS (SP7)';
	                        case 'TripleSat Constellation-1':
	                            return 'Triplesat-1';
	                        case 'TripleSat Constellation-2':
	                            return 'Triplesat-2';
	                        case 'TripleSat Constellation-3':
	                            return 'Triplesat-3';
	                        case 'GJ1A':
	                            return 'Superview-1 01';
	                        case 'GJ1B':
	                            return 'Superview-1 02';
	                        case 'GJ1C':
	                            return 'Superview-1 03';
	                        case 'GJ1D':
	                            return 'Superview-1 04';
	                        default:
	                            return '' + getSatelliteName$1(item.platform) + (item.islocal ? ' (L)' : '');
	                    }
	                }
	            },
	            'cloudness': {
	                type: 'float',
	                name: Translations$2.getText('results.clouds'),
	                sortable: true,
	                formatter: function formatter(item) {
	                    return Math.round(item.cloudness);
	                },
	                default: 0,
	                align: 'center'
	            },
	            'tilt': {
	                type: 'float',
	                name: Translations$2.getText('results.angle'),
	                sortable: true,
	                formatter: function formatter(item) {
	                    return typeof item.tilt === 'number' ? Math.round(item.tilt) : '';
	                },
	                default: 0,
	                align: 'center'
	            },
	            'acqdate': {
	                type: 'date',
	                name: Translations$2.getText('results.date'),
	                formatter: function formatter(item) {
	                    return item.acqdate.toLocaleDateString();
	                },
	                sortable: true
	            },
	            'info': {
	                type: 'boolean',
	                icon: 'search',
	                yes: 'search-info-off',
	                no: 'search-info-on'
	            }

	        };

	        _this._grid = new OverriddenDataGrid(_this._container, {
	            fields: _this.fields,
	            sortBy: { field: 'acqdate', asc: false },
	            indexBy: _this._indexBy
	        });
	        _this._grid.addEventListener('cell:click', _this._onCellClick);
	        _this._grid.addEventListener('column:click', _this._onColumnClick);
	        _this._grid.addEventListener('row:mouseover', _this._onRowMouseOver);
	        _this._grid.addEventListener('row:mouseout', _this._onRowMouseOut);
	        _this._grid.addEventListener('sort', _this._onSort);
	        _this._stopPropagation = _this._stopPropagation.bind(_this);
	        return _this;
	    }

	    createClass(FavoritesList, [{
	        key: '_onSort',
	        value: function _onSort(e) {
	            var event = document.createEvent('Event');
	            event.initEvent('sort', false, false);
	            event.detail = this._grid.items;
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_stopPropagation',
	        value: function _stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: 'getItemByIndex',
	        value: function getItemByIndex(id) {
	            return this._grid.getItemByIndex(id);
	        }
	    }, {
	        key: '_onCellClick',
	        value: function _onCellClick(e) {
	            e.stopPropagation();
	            var _e$detail = e.detail,
	                i = _e$detail.i,
	                j = _e$detail.j,
	                row = _e$detail.row,
	                cell = _e$detail.cell,
	                name = _e$detail.name,
	                field = _e$detail.field,
	                item = _e$detail.item;

	            var event = document.createEvent('Event');

	            switch (name) {
	                case 'selected':
	                    item.selected = Boolean(cell.querySelector('input[type=checkbox]').checked);
	                    event.initEvent('setSelected', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);
	                    break;
	                case 'visible':
	                    event.initEvent('setVisible', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);
	                    break;
	                case 'info':
	                    var _cell$getBoundingClie = cell.getBoundingClientRect(),
	                        left = _cell$getBoundingClie.left,
	                        top = _cell$getBoundingClie.top;

	                    var button = cell.querySelector('i');

	                    if (this._activeInfo) {
	                        this._activeInfo.classList.remove('search-info-off');
	                        this._activeInfo.classList.add('search-info-on');
	                    }

	                    this._activeInfo = button;

	                    event.initEvent('showInfo', false, false);
	                    event.detail = { item: item, left: left, top: top, button: button };
	                    this.dispatchEvent(event);

	                    break;
	                default:
	                    /*k = Object.keys(this._fields).indexOf('visible');
	                    btn = row.querySelectorAll('td')[k].querySelector('i');
	                    btn.classList.remove('search-visibility-on');
	                    btn.classList.add('search-visibility-off');
	                    item.visible = true;*/

	                    event.initEvent('visible', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);
	                    break;
	            }
	            switch (name) {
	                case 'selected':
	                case 'info':
	                case 'visible':
	                    break;
	                default:
	                    event.initEvent('click', false, false);
	                    event.detail = e.detail;
	                    this.dispatchEvent(event);
	                    break;
	            }
	        }
	    }, {
	        key: '_onColumnClick',
	        value: function _onColumnClick(e) {
	            e.stopPropagation();
	            var _e$detail2 = e.detail,
	                col = _e$detail2.col,
	                field = _e$detail2.field,
	                name = _e$detail2.name;

	            var event = document.createEvent('Event');
	            switch (name) {
	                case 'selected':
	                    e.preventDefault();
	                    event.initEvent('setAllSelected', false, false);
	                    this.dispatchEvent(event);
	                    break;
	                case 'visible':
	                    var state = false;
	                    if (this._grid.items.every(function (x) {
	                        return x.visible !== 'hidden';
	                    })) {
	                        state = false;
	                    } else if (this._grid.items.every(function (x) {
	                        return x.visible === 'hidden';
	                    })) {
	                        state = true;
	                    } else {
	                        state = col.querySelector('i').classList.contains('favorites-select-quicklooks-active');
	                    }
	                    var btn = this._grid.getCol(name).querySelector('i');
	                    if (state) {
	                        btn.classList.add('favorites-select-quicklooks-passive');
	                        btn.classList.remove('favorites-select-quicklooks-active');
	                    } else {
	                        btn.classList.add('favorites-select-quicklooks-active');
	                        btn.classList.remove('favorites-select-quicklooks-passive');
	                    }
	                    event.initEvent('setAllVisible', false, false);
	                    event.detail = state;
	                    this.dispatchEvent(event);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: '_onRowMouseOver',
	        value: function _onRowMouseOver(e) {
	            if (!this._disableMouseHover) {
	                var event = document.createEvent('Event');
	                event.initEvent('mouseover', false, false);
	                event.detail = e.detail;
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: '_onRowMouseOut',
	        value: function _onRowMouseOut(e) {
	            if (!this._disableMouseHover) {
	                var event = document.createEvent('Event');
	                event.initEvent('mouseout', false, false);
	                event.detail = e.detail;
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: 'hilite',
	        value: function hilite(id) {
	            var row = this._grid.getRow(id);
	            if (row) {
	                row.classList.add('hilite');
	            }
	        }
	    }, {
	        key: 'dim',
	        value: function dim(id) {
	            var row = this._grid.getRow(id);
	            if (row) {
	                row.classList.remove('hilite');
	            }
	        }
	    }, {
	        key: 'resize',
	        value: function resize(total) {
	            var height = this._container.querySelector('.table-list-header').getBoundingClientRect().height;
	            var body = this._container.querySelector('.table-list-body');
	            body.style.maxHeight = total - height + 'px';
	            body.style.height = body.style.maxHeight;
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            this._grid.refresh();
	            var event = document.createEvent('Event');
	            event.initEvent('refreshed', false, false);
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: 'scrollToRow',
	        value: function scrollToRow(id) {
	            this._grid.scrollToRow(id);
	        }
	    }, {
	        key: 'enableFilter',
	        value: function enableFilter(enable) {
	            this._grid.filtered = enable;
	        }
	    }, {
	        key: 'adjustWidth',
	        value: function adjustWidth() {
	            this._grid.adjustHeader();
	        }
	    }, {
	        key: 'getRow',
	        value: function getRow(rowId) {
	            return this._grid.getRow(rowId);
	        }
	    }, {
	        key: 'redrawItem',
	        value: function redrawItem(id, item) {
	            this._disableMouseHover = true;
	            this._grid.redrawRow(id, item);
	            this._disableMouseHover = false;
	        }
	    }, {
	        key: 'fields',
	        get: function get$$1() {
	            return this._fields;
	        }
	    }, {
	        key: 'indexBy',
	        get: function get$$1() {
	            return this._indexBy;
	        }
	    }, {
	        key: 'items',
	        set: function set$$1(value) {
	            if (Array.isArray(value)) {
	                this._grid.items = value;
	            }
	        },
	        get: function get$$1() {
	            return this._grid.items;
	        }
	    }, {
	        key: 'filteredItems',
	        get: function get$$1() {
	            return this._grid.filteredItems;
	        }
	    }, {
	        key: 'bbox',
	        get: function get$$1() {
	            return this._container.getBoundingClientRect();
	        }
	    }, {
	        key: 'filter',
	        set: function set$$1(value) {
	            this._grid.filter = value;
	        }
	    }, {
	        key: 'count',
	        get: function get$$1() {
	            return this._grid.count;
	        }
	    }]);
	    return FavoritesList;
	}(EventTarget);

	var FavoritesListComponent = function (_BaseComponent) {
	        inherits(FavoritesListComponent, _BaseComponent);

	        function FavoritesListComponent() {
	                classCallCheck(this, FavoritesListComponent);
	                return possibleConstructorReturn(this, (FavoritesListComponent.__proto__ || Object.getPrototypeOf(FavoritesListComponent)).apply(this, arguments));
	        }

	        createClass(FavoritesListComponent, [{
	                key: 'init',
	                value: function init() {

	                        var application = this.getApplication();
	                        var store = application.getStore();

	                        var userInfo = store.getData('userInfo');
	                        var restricted = userInfo['IsAuthenticated'] && userInfo['Role'] === ACCESS_USER_ROLE;

	                        this._searchContainer = this.getParentComponent().getView();

	                        this._view = new FavoritesList({
	                                restricted: restricted
	                        });

	                        this._bindEvents();
	                }
	        }, {
	                key: '_bindEvents',
	                value: function _bindEvents() {
	                        var _this2 = this;

	                        var application = this.getApplication();
	                        var events = application.getServiceEvents();
	                        var store = application.getStore();
	                        var view = this.getView();
	                        var ContourController = application.getBridgeController('contour');

	                        events.on('sidebar:tab:resize', function (e) {
	                                return _this2._resizeFavoritesList(e);
	                        });
	                        events.on('contours:showQuicklookList', this._redrawItemOnList.bind(this));
	                        events.on('contours:allQuicklooksList', this._redrawItemOnList.bind(this));
	                        events.on('contours:scrollToRow', this._scrollToRow.bind(this));

	                        store.on('currentTab:changeUI', function (e) {
	                                return _this2._onTabChangeHandler(e);
	                        });
	                        store.on('contours:addAllToCartList', this._updateList.bind(this));
	                        store.on('contours:setSelected', this._redrawItemOnList.bind(this));
	                        store.on('contours:showQuicklookList', this._redrawItemOnList.bind(this));
	                        store.on('contours:allQuicklooksList', this._redrawItemOnList.bind(this));
	                        store.on('contours:setHoveredList', this._highliteItemOnList.bind(this));
	                        store.on('contours:setAllSelectedList', this._updateList.bind(this));
	                        store.on('contours:removeSelectedFavoritesList', this._updateList.bind(this));
	                        store.on('contours:addVisibleToFavoritesList', this._updateList.bind(this));
	                        store.on('contours:addToCartList', this._updateList.bind(this));
	                        store.on('contours:startResearchedList', this._updateList.bind(this));

	                        view.addEventListener('showInfo', this._onInfoHandler.bind(this));
	                        view.addEventListener('setSelected', function (e) {
	                                return ContourController.setSelectedOnListAndMap(e);
	                        });
	                        view.addEventListener('setAllSelected', function (e) {
	                                return ContourController.setAllSelectedOnListAndMap(e);
	                        });
	                        view.addEventListener('click', function (e) {
	                                return ContourController.zoomToContourOnMap(e);
	                        });
	                        view.addEventListener('setVisible', function (e) {
	                                return ContourController.showQuicklookOnListAndMap(e);
	                        });
	                        view.addEventListener('setAllVisible', function (e) {
	                                return ContourController.showAllQuicklooksOnListAndMap(e);
	                        });
	                        view.addEventListener('mouseover', function (e) {
	                                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	                                return ContourController.hoverContour(e, state);
	                        });
	                        view.addEventListener('mouseout', function (e) {
	                                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	                                return ContourController.hoverContour(e, state);
	                        });
	                }
	        }, {
	                key: '_onTabChangeHandler',
	                value: function _onTabChangeHandler() {

	                        var application = this.getApplication();
	                        var store = application.getStore();
	                        var currentTab = store.getMetaItem('currentTab');

	                        currentTab === TAB_FAVORITES_NAME && this._resizeFavoritesList();
	                }
	        }, {
	                key: '_updateList',
	                value: function _updateList() {

	                        var application = this.getApplication();
	                        var store = application.getStore();
	                        var favoritesData = store.getFavorites(true);

	                        this.getView().items = favoritesData;

	                        this._resizeFavoritesList();
	                }
	        }, {
	                key: '_redrawItemOnList',
	                value: function _redrawItemOnList(itemId) {

	                        var application = this.getApplication();
	                        var store = application.getStore();
	                        var view = this.getView();

	                        var item = store.getData('contours', itemId);
	                        var preparedItem = propertiesToItem(item['properties']);

	                        view.redrawItem(itemId, preparedItem);
	                }
	        }, {
	                key: '_highliteItemOnList',
	                value: function _highliteItemOnList(itemId) {

	                        var application = this.getApplication();
	                        var store = application.getStore();
	                        var view = this.getView();

	                        var item = store.getData('contours', itemId);
	                        var isHovered = getProperty(item, 'hover');

	                        if (isHovered) {
	                                view.hilite(itemId);
	                        } else {
	                                view.dim(itemId);
	                        }
	                }
	        }, {
	                key: '_scrollToRow',
	                value: function _scrollToRow(gmxId, currentTab) {

	                        var view = this.getView();

	                        if (currentTab === TAB_FAVORITES_NAME) {

	                                view.scrollToRow(gmxId);
	                                this._highliteItemOnList(gmxId);
	                        }
	                }
	        }, {
	                key: '_resizeFavoritesList',
	                value: function _resizeFavoritesList() {

	                        var view = this.getView();

	                        var total = getPanelHeight(document.body.querySelector('.scanex-sidebar'), ['.favorites-header', '.favorites-footer']);

	                        view.resize(total);
	                        view.adjustWidth();
	                }
	        }, {
	                key: '_onInfoHandler',
	                value: function _onInfoHandler(e) {

	                        var view = this.getView();
	                        var bBox = view.bbox;

	                        this.events.trigger('imageDetails:show', e, bBox);
	                }
	        }]);
	        return FavoritesListComponent;
	}(BaseComponent);

	var FavouritesTabComponent = function (_BaseCompositedCompon) {
	    inherits(FavouritesTabComponent, _BaseCompositedCompon);

	    function FavouritesTabComponent() {
	        classCallCheck(this, FavouritesTabComponent);
	        return possibleConstructorReturn(this, (FavouritesTabComponent.__proto__ || Object.getPrototypeOf(FavouritesTabComponent)).apply(this, arguments));
	    }

	    createClass(FavouritesTabComponent, [{
	        key: 'init',
	        value: function init() {

	            this._addTabToSidebar();
	            this._createCartNumberPlace();

	            this.initChildren([{
	                index: 'list',
	                constructor: FavoritesListComponent
	            }]);

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var store = application.getStore();
	            var removeButton = this._getFavoritesRemoveButton();
	            var orderButton = this._getFavoritesOrderButton();
	            var ContourController = application.getBridgeController('contour');

	            store.on('contours:addToCartList', this._onAddToCartHandler.bind(this));
	            store.on('contours:addAllToCartList', this._onAddToCartHandler.bind(this));
	            store.on('contours:setSelected', this._onSetSelectedHandler.bind(this));
	            store.on('contours:setAllSelectedList', this._onSetSelectedHandler.bind(this));
	            store.on('contours:startResearchedList', this._onAddToCartHandler.bind(this));
	            store.on('contours:removeSelectedFavoritesList', this._onAddToCartHandler.bind(this));
	            store.on('contours:addVisibleToFavoritesList', this._onAddToCartHandler.bind(this));

	            removeButton.addEventListener('click', function (e) {
	                return ContourController.removeSelectedFavoritesFromListAndMap(e);
	            });
	            orderButton.addEventListener('click', function (e) {
	                return _this2.events.trigger('makeOrder:click', e);
	            });
	        }
	    }, {
	        key: '_addTabToSidebar',
	        value: function _addTabToSidebar() {

	            this._view = this.getParentComponent().getView().addTab({
	                id: 'favorites',
	                icon: 'sidebar-favorites',
	                opened: 'sidebar-favorites-opened',
	                closed: 'sidebar-favorites-closed',
	                tooltip: Translations$2.getText('results.favorites')
	            });

	            this.getView().innerHTML = '<div class="favorites-header">\n            <span class="favorites-title">' + Translations$2.getText('results.favorites') + '</span>\n            <span class="favorites-number">0</span>\n            <div class="favorites-buttons">\n                <i title="' + Translations$2.getText('favorites.delete') + '" class="favorites-delete-button"></i>\n            </div>\n        </div>\n        <div class="favorites-pane"></div>\n        <div class="favorites-footer">\n            <div class="favorites-order-button">\n                <div>' + Translations$2.getText('cart.add') + '</div>\n            </div>\n        </div>';
	        }
	    }, {
	        key: '_onSetSelectedHandler',
	        value: function _onSetSelectedHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();

	            var isSomeSelected = store.hasSelectedFavorites();

	            this._updateOrderAndRemoveButtons(isSomeSelected);
	        }
	    }, {
	        key: '_onAddToCartHandler',
	        value: function _onAddToCartHandler() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var commonData = store.getFavorites();
	            var selectedData = store.getSelectedFavorites();
	            var dataLength = commonData.length;
	            var selectedLength = selectedData.length;

	            this._updateCartNumber(dataLength);
	            this._updateOrderAndRemoveButtons(selectedLength > 0);
	        }
	    }, {
	        key: '_updateCartNumber',
	        value: function _updateCartNumber(number) {

	            var cartNumSpan = this._getCartNumberSpan();
	            var innerNumSpan = this._getCartInnerNumberSpan();

	            cartNumSpan.style.visibility = number > 0 ? 'visible' : 'hidden';

	            cartNumSpan.innerText = number;
	            innerNumSpan.innerText = number;
	        }
	    }, {
	        key: '_updateOrderAndRemoveButtons',
	        value: function _updateOrderAndRemoveButtons(state) {

	            var btnOrder = this._getFavoritesOrderButton();
	            var btnDelete = this._getFavoritesRemoveButton();

	            if (state) {
	                btnOrder.classList.remove('favorites-order-button-passive');
	                btnDelete.classList.remove('favorites-delete-button-passive');
	                btnOrder.classList.add('favorites-order-button-active');
	                btnDelete.classList.add('favorites-delete-button-active');
	            } else {
	                btnOrder.classList.remove('favorites-order-button-active');
	                btnDelete.classList.remove('favorites-delete-button-active');
	                btnOrder.classList.add('favorites-order-button-passive');
	                btnDelete.classList.add('favorites-delete-button-passive');
	            }
	        }
	    }, {
	        key: '_createCartNumberPlace',
	        value: function _createCartNumberPlace() {

	            var container = document.body.querySelector('.scanex-sidebar [data-tab-id=favorites] .sidebar-favorites');
	            var el = container.querySelector('.cart-number');
	            if (el === null) {
	                el = document.createElement('span');
	                el.className = 'cart-number';
	                el.style.visibility = 'hidden';
	                container.appendChild(el);
	            }
	        }
	    }, {
	        key: '_getFavoritesOrderButton',
	        value: function _getFavoritesOrderButton() {

	            return document.body.querySelector('[data-pane-id=favorites] .favorites-order-button');
	        }
	    }, {
	        key: '_getFavoritesRemoveButton',
	        value: function _getFavoritesRemoveButton() {

	            return document.body.querySelector('[data-pane-id=favorites] .favorites-delete-button');
	        }
	    }, {
	        key: '_getCartNumberSpan',
	        value: function _getCartNumberSpan() {

	            var sidebarComponent = this.getParentComponent();
	            var sidebarView = sidebarComponent.getView();
	            var sidebarContainer = sidebarView.getContainer();

	            var cartNumSpan = sidebarContainer.querySelector('.cart-number');

	            return cartNumSpan;
	        }
	    }, {
	        key: '_getCartInnerNumberSpan',
	        value: function _getCartInnerNumberSpan() {

	            var sidebarComponent = this.getParentComponent();
	            var sidebarView = sidebarComponent.getView();
	            var sidebarContainer = sidebarView.getContainer();

	            var favoritesNumSpan = sidebarContainer.querySelector('.favorites-number');

	            return favoritesNumSpan;
	        }
	    }]);
	    return FavouritesTabComponent;
	}(BaseCompositedComponent);

	var ImageDetails = function (_EventTarget) {
	    inherits(ImageDetails, _EventTarget);

	    function ImageDetails(container, _ref) {
	        var left = _ref.left,
	            top = _ref.top;
	        classCallCheck(this, ImageDetails);

	        var _this = possibleConstructorReturn(this, (ImageDetails.__proto__ || Object.getPrototypeOf(ImageDetails)).call(this));

	        _this._container = container;
	        _this._container.classList.add('image-info');
	        _this.stopPropagation = _this.stopPropagation.bind(_this);
	        _this._container.addEventListener('click', _this.stopPropagation);
	        _this._left = left;
	        _this._top = top;
	        _this.hide();
	        return _this;
	    }

	    createClass(ImageDetails, [{
	        key: 'stopPropagation',
	        value: function stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            var _this2 = this;

	            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { left: this._left, top: this._top };
	            var left = options.left,
	                top = options.top;

	            var header = document.body.querySelector('#header').getBoundingClientRect();
	            var body = document.body.getBoundingClientRect();
	            var above_top = function above_top(value) {
	                return top < header.top + header.height;
	            };
	            var below_bottom = function below_bottom(value) {
	                return top + _this2._height > body.height - header.height;
	            };
	            this._container.style.left = left + 'px';
	            if (above_top(top)) {
	                this._container.style.top = top + this._height + 'px';
	            } else {
	                this._container.style.top = top + 'px';
	            }

	            if (below_bottom(top)) {
	                this._container.style.top = top - this._height + 'px';
	            } else {
	                this._container.style.top = top + 'px';
	            }
	            this._container.style.visibility = 'visible';
	            if (this.button) {
	                this.button.classList.add('search-info-off');
	                this.button.classList.remove('search-info-on');
	            }

	            // this.dispatchEvent(new CustomEvent('show', {
	            //     detail: {item: this._item, button: this.button},
	            // }));

	            var event = document.createEvent('Event');
	            event.initEvent('show', false, false);
	            event.detail = { item: this._item, button: this.button };
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this._container.style.visibility = 'hidden';
	            if (this.button) {
	                this.button.classList.remove('search-info-off');
	                this.button.classList.add('search-info-on');
	            }

	            // this.dispatchEvent(new CustomEvent('hide', {
	            //     detail: {item: this._item, button: this.button},
	            // }));

	            var event = document.createEvent('Event');
	            event.initEvent('hide', false, false);
	            event.detail = { item: this._item, button: this.button };
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: 'item',
	        set: function set$$1(value) {
	            var _this3 = this;

	            this._item = value;
	            this._container.innerHTML = '<i title="\u0417\u0430\u043A\u0440\u044B\u0442\u044C" class="panel-icon-close" style="top:0px;right:0px;"></i>\n        <table>\n            <tbody>\n                <tr>\n                    <td class="image-info-id-label">ID:</td>\n                    <td class="image-info-id-value">' + this._item.sceneid + '</td>\n                </tr>\n                <tr>\n                    <td class="image-info-id-label" colspan="2">\n                        <a href="' + this._item.url + '" target="_blank">' + Translations$2.getText('quicklook') + '</a>\n                    </td>\n                </tr>\n            </tbody>\n        </table>';

	            var clickIcon = this._container.querySelector('.panel-icon-close');
	            clickIcon.addEventListener('click', function () {
	                return _this3.hide();
	            });
	        },
	        get: function get$$1() {
	            return this._item;
	        }
	    }, {
	        key: 'visible',
	        get: function get$$1() {
	            return this._container.style.visibility === 'visible';
	        }
	    }]);
	    return ImageDetails;
	}(EventTarget);

	var ImageDetailsComponent = function (_BaseComponent) {
	    inherits(ImageDetailsComponent, _BaseComponent);

	    function ImageDetailsComponent() {
	        classCallCheck(this, ImageDetailsComponent);
	        return possibleConstructorReturn(this, (ImageDetailsComponent.__proto__ || Object.getPrototypeOf(ImageDetailsComponent)).apply(this, arguments));
	    }

	    createClass(ImageDetailsComponent, [{
	        key: 'init',
	        value: function init() {

	            this._view = new ImageDetails(createContainer(), { left: 600, top: 300 });

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var store = application.getStore();

	            store.on('currentTab:changeAfter', function () {
	                return _this2.hide();
	            });
	            store.on('clientFilter:changeList', function () {
	                return _this2.hide();
	            });
	        }
	    }, {
	        key: 'toggle',
	        value: function toggle(e, bBox) {

	            var view = this.getView();

	            var _e$detail = e.detail,
	                item = _e$detail.item,
	                top = _e$detail.top,
	                button = _e$detail.button;
	            var left = bBox.left,
	                width = bBox.width;


	            view.button = button;

	            if (view.visible && view.item.sceneid == item.sceneid) {
	                view.hide();
	            } else {
	                view.hide();
	                view.item = item;
	                view.show({ left: left + width + 20, top: top });
	            }
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {

	            var view = this.getView();

	            view.hide();
	        }
	    }]);
	    return ImageDetailsComponent;
	}(BaseComponent);

	var Sidebar = function (_EventTarget) {
	    inherits(Sidebar, _EventTarget);

	    function Sidebar(container) {
	        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	            _ref$position = _ref.position,
	            position = _ref$position === undefined ? 'left' : _ref$position;

	        classCallCheck(this, Sidebar);

	        var _this = possibleConstructorReturn(this, (Sidebar.__proto__ || Object.getPrototypeOf(Sidebar)).call(this));

	        _this._container = container;
	        _this._container.innerHTML = '<div class="scanex-sidebar">\n            <div class="' + (position === 'left' ? 'tabs' : 'panes') + '"></div>\n            <div class="' + (position === 'left' ? 'panes' : 'tabs') + '"></div>\n        </div>';

	        _this._tabContainer = _this._container.querySelector('.tabs');
	        _this._paneContainer = _this._container.querySelector('.panes');

	        _this._current = null;
	        _this._data = {};
	        return _this;
	    }

	    createClass(Sidebar, [{
	        key: 'enable',
	        value: function enable(id) {
	            if (this._data[id]) {
	                this._data[id].enabled = true;
	                var tab = this._tabContainer.querySelector('[data-tab-id=' + id + ']');
	                tab.classList.remove('tab-disabled');
	            }
	        }
	    }, {
	        key: 'enabled',
	        value: function enabled(id) {
	            var _ref2 = id && this._data[id] ? this._data[id] : { enabled: false },
	                enabled = _ref2.enabled;

	            return enabled;
	        }
	    }, {
	        key: 'disable',
	        value: function disable(id) {
	            if (this._data[id]) {
	                if (id === this.current) {
	                    this.current = null;
	                }
	                this._data[id].enabled = false;
	                var tab = this._tabContainer.querySelector('[data-tab-id=' + id + ']');
	                tab.classList.add('tab-disabled');
	            }
	        }
	    }, {
	        key: 'addTab',
	        value: function addTab(_ref3) {
	            var id = _ref3.id,
	                icon = _ref3.icon,
	                opened = _ref3.opened,
	                closed = _ref3.closed,
	                tooltip = _ref3.tooltip,
	                _ref3$enabled = _ref3.enabled,
	                enabled = _ref3$enabled === undefined ? true : _ref3$enabled;

	            var tab = document.createElement('div');
	            var ic = document.createElement('i');
	            icon.split(/\s+/g).forEach(function (x) {
	                return ic.classList.add(x);
	            });
	            ic.classList.add(id === this._current ? opened : closed);
	            tab.appendChild(ic);
	            tab.setAttribute('data-tab-id', id);
	            if (!enabled) {
	                tab.classList.add('tab-disabled');
	            }
	            if (tooltip) {
	                tab.setAttribute('title', tooltip);
	            }
	            tab.addEventListener('click', this._toggle.bind(this, id));
	            this._tabContainer.appendChild(tab);

	            var pane = document.createElement('div');
	            pane.setAttribute('data-pane-id', id);
	            pane.classList.add(this.visible && this.current === id ? 'shown' : 'hidden');
	            this._paneContainer.appendChild(pane);

	            this._data[id] = { icon: icon, opened: opened, closed: closed, enabled: enabled };

	            return pane;
	        }
	    }, {
	        key: 'removeTab',
	        value: function removeTab(id) {
	            var tab = this._tabContainer.querySelector('[data-tab-id=' + id + ']');
	            tab.removeEventListener('click', this._toggle.bind(this, id));
	            this._tabContainer.removeChild(tab);

	            var pane = this._paneContainer.querySelector('[data-pane-id=' + id + ']');
	            this._paneContainer.removeChild(pane);

	            for (var i = 0; i < this._data.length; ++i) {
	                if (this._data[i].id === id) {
	                    this._data.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    }, {
	        key: '_toggle',
	        value: function _toggle(current) {
	            if (this.enabled(current)) {
	                this.current = this.current === current ? null : current;
	            }
	        }
	    }, {
	        key: 'getPane',
	        value: function getPane(id) {
	            return this._paneContainer.querySelector('[data-pane-id=' + id + ']');
	        }
	    }, {
	        key: 'current',
	        get: function get$$1() {
	            return this._current;
	        },
	        set: function set$$1(current) {
	            var tabs = this._tabContainer.children;
	            var panes = this._paneContainer.children;
	            var success = false;

	            for (var i = 0; i < tabs.length; ++i) {
	                var id = tabs[i].getAttribute('data-tab-id');
	                var _data$id = this._data[id],
	                    opened = _data$id.opened,
	                    closed = _data$id.closed,
	                    enabled = _data$id.enabled;

	                var tab = tabs[i].querySelector('i');
	                var pane = panes[i];
	                if (id === current) {
	                    tab.classList.remove(closed);
	                    tab.classList.add(opened);

	                    pane.classList.remove('hidden');
	                    pane.classList.add('shown');

	                    success = true;
	                } else {
	                    tab.classList.remove(opened);
	                    tab.classList.add(closed);

	                    pane.classList.remove('shown');
	                    pane.classList.add('hidden');
	                }
	            }
	            this._current = success ? current : null;
	            var event = document.createEvent('Event');
	            event.detail = { current: this._current };
	            event.initEvent('change', false, false);
	            this.dispatchEvent(event);
	        }
	    }]);
	    return Sidebar;
	}(EventTarget);

	var SidebarControl = L.Control.extend({
	    includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,

	    initialize: function initialize(options) {
	        L.setOptions(this, options);
	    },

	    enable: function enable(id) {
	        this._sidebar.enable(id);
	    },

	    enabled: function enabled(id) {
	        return this._sidebar.enabled(id);
	    },

	    disable: function disable(id) {
	        this._sidebar.disable(id);
	    },

	    getCurrent: function getCurrent() {
	        return this._sidebar.current;
	    },

	    setCurrent: function setCurrent(current) {
	        this._sidebar.current = current;
	    },

	    addTab: function addTab(_ref) {
	        var id = _ref.id,
	            icon = _ref.icon,
	            opened = _ref.opened,
	            closed = _ref.closed,
	            tooltip = _ref.tooltip,
	            enabled = _ref.enabled;

	        return this._sidebar.addTab({ id: id, icon: icon, opened: opened, closed: closed, tooltip: tooltip, enabled: enabled });
	    },

	    removeTab: function removeTab(id) {
	        this._sidebar.removeTab(id);
	    },

	    getPane: function getPane(id) {
	        return this._sidebar.getPane(id);
	    },

	    onAdd: function onAdd(map) {
	        var _this = this;

	        this._container = L.DomUtil.create('div');
	        var stop = L.DomEvent.stopPropagation;
	        var fakeStop = L.DomEvent._fakeStop || stop;
	        L.DomEvent.on(this._container, 'contextmenu', stop).on(this._container, 'click', fakeStop).on(this._container, 'mousedown', stop).on(this._container, 'touchstart', stop).on(this._container, 'dblclick', fakeStop).on(this._container, 'mousewheel', stop).on(this._container, 'MozMousePixelScroll', stop);
	        var position = this.options.position;

	        this._sidebar = new Sidebar(this._container, { position: position === 'topleft' || position === 'bottomleft' ? 'left' : 'right' });
	        this._sidebar.addEventListener('change', function (e) {
	            _this.fire('change', e);
	        });
	        return this._container;
	    },

	    addTo: function addTo(map) {
	        L.Control.prototype.addTo.call(this, map);
	        if (this.options.addBefore) {
	            this.addBefore(this.options.addBefore);
	        }
	        return this;
	    },

	    addBefore: function addBefore(id) {
	        var parentNode = this._parent && this._parent._container;
	        if (!parentNode) {
	            parentNode = this._map && this._map._controlCorners[this.getPosition()];
	        }
	        if (!parentNode) {
	            this.options.addBefore = id;
	        } else {
	            for (var i = 0, len = parentNode.childNodes.length; i < len; i++) {
	                var it = parentNode.childNodes[i];
	                if (id === it._id) {
	                    parentNode.insertBefore(this._container, it);
	                    break;
	                }
	            }
	        }
	        return this;
	    }
	});

	var View$7 = function View(_ref) {
	        var map = _ref.map;
	        classCallCheck(this, View);


	        this._main = new SidebarControl({ position: 'topleft' });

	        map.addControl(this._main);

	        this._main.getContainer().classList.add('noselect');

	        return this._main;
	};

	/* src\js\components\uiElements\widgetElements\sidebar\dialogs\DownloadDialog.html generated by Svelte v2.16.1 */

	function data$i() {
		return {
			isAuthentificated: false
		};
	}
	function translate$c(text) {
		return Translations$2.getText(text);
	}
	var methods$f = {
		onApplyHandler: function onApplyHandler() {
			this.fire('apply');
		},
		onCloseHandler: function onCloseHandler() {
			this.fire('close');
		}
	};

	function create_main_fragment$h(component, ctx) {
		var div2, div0, text, div1;

		function select_block_type(ctx) {
			if (!ctx.isAuthentificated) return create_if_block_1$2;
			return create_else_block_1;
		}

		var current_block_type = select_block_type(ctx);
		var if_block0 = current_block_type(component, ctx);

		function select_block_type_1(ctx) {
			if (!ctx.isAuthentificated) return create_if_block$6;
			return create_else_block$2;
		}

		var current_block_type_1 = select_block_type_1(ctx);
		var if_block1 = current_block_type_1(component, ctx);

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				if_block0.c();
				text = createText("\r\n    ");
				div1 = createElement("div");
				if_block1.c();
				div0.className = "dialog-content";
				div1.className = "dialog-footer";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				if_block0.m(div0, null);
				append(div2, text);
				append(div2, div1);
				if_block1.m(div1, null);
			},
			p: function p(changed, ctx) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if_block0.d(1);
					if_block0 = current_block_type(component, ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}

				if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
					if_block1.d(1);
					if_block1 = current_block_type_1(component, ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				if_block0.d();
				if_block1.d();
			}
		};
	}

	// (5:8) {:else}
	function create_else_block_1(component, ctx) {
		var raw_value = translate$c('results.download'),
		    raw_before,
		    raw_after;

		return {
			c: function c() {
				raw_before = createElement('noscript');
				raw_after = createElement('noscript');
			},
			m: function m(target, anchor) {
				insert(target, raw_before, anchor);
				raw_before.insertAdjacentHTML("afterend", raw_value);
				insert(target, raw_after, anchor);
			},
			d: function d(detach) {
				if (detach) {
					detachBetween(raw_before, raw_after);
					detachNode(raw_before);
					detachNode(raw_after);
				}
			}
		};
	}

	// (3:8) {#if !isAuthentificated}
	function create_if_block_1$2(component, ctx) {
		var raw_value = translate$c('results.change'),
		    raw_before,
		    raw_after;

		return {
			c: function c() {
				raw_before = createElement('noscript');
				raw_after = createElement('noscript');
			},
			m: function m(target, anchor) {
				insert(target, raw_before, anchor);
				raw_before.insertAdjacentHTML("afterend", raw_value);
				insert(target, raw_after, anchor);
			},
			d: function d(detach) {
				if (detach) {
					detachBetween(raw_before, raw_after);
					detachNode(raw_before);
					detachNode(raw_after);
				}
			}
		};
	}

	// (15:8) {:else}
	function create_else_block$2(component, ctx) {
		var button0,
		    text0_value = translate$c('download.ok'),
		    text0,
		    text1,
		    button1,
		    text2_value = translate$c('download.cancel'),
		    text2;

		function click_handler(event) {
			component.onApplyHandler();
		}

		function click_handler_1(event) {
			component.onCloseHandler();
		}

		return {
			c: function c() {
				button0 = createElement("button");
				text0 = createText(text0_value);
				text1 = createText("\r\n            ");
				button1 = createElement("button");
				text2 = createText(text2_value);
				addListener(button0, "click", click_handler);
				button0.className = "dialog-primary-button";
				addListener(button1, "click", click_handler_1);
				button1.className = "dialog-cancel-button";
			},
			m: function m(target, anchor) {
				insert(target, button0, anchor);
				append(button0, text0);
				insert(target, text1, anchor);
				insert(target, button1, anchor);
				append(button1, text2);
			},
			d: function d(detach) {
				if (detach) {
					detachNode(button0);
				}

				removeListener(button0, "click", click_handler);
				if (detach) {
					detachNode(text1);
					detachNode(button1);
				}

				removeListener(button1, "click", click_handler_1);
			}
		};
	}

	// (10:8) {#if !isAuthentificated}
	function create_if_block$6(component, ctx) {
		var button,
		    text_value = translate$c('alerts.ok'),
		    text;

		function click_handler(event) {
			component.onCloseHandler();
		}

		return {
			c: function c() {
				button = createElement("button");
				text = createText(text_value);
				addListener(button, "click", click_handler);
				button.className = "dialog-primary-button";
			},
			m: function m(target, anchor) {
				insert(target, button, anchor);
				append(button, text);
			},
			d: function d(detach) {
				if (detach) {
					detachNode(button);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	function DownloadDialog(options) {
		init(this, options);
		this._state = assign(data$i(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$h(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(DownloadDialog.prototype, proto$4);
	assign(DownloadDialog.prototype, methods$f);

	/* src\js\components\uiElements\widgetElements\sidebar\dialogs\OrderDialog.html generated by Svelte v2.16.1 */

	var isInternalRestricted = ['Email', 'FullName', 'project', 'number', 'customer'];
	var defaultRestricted = ['Email', 'FullName'];

	function isButtonValid(_ref) {
		var isInternal = _ref.isInternal,
		    inputValues = _ref.inputValues,
		    cartType = _ref.cartType;
		var _inputValues$Email = inputValues.Email,
		    Email = _inputValues$Email === undefined ? '' : _inputValues$Email,
		    _inputValues$FullName = inputValues.FullName,
		    FullName = _inputValues$FullName === undefined ? '' : _inputValues$FullName,
		    _inputValues$project = inputValues.project,
		    project = _inputValues$project === undefined ? '' : _inputValues$project,
		    _inputValues$number = inputValues.number,
		    number = _inputValues$number === undefined ? '' : _inputValues$number,
		    _inputValues$customer = inputValues.customer,
		    customer = _inputValues$customer === undefined ? '' : _inputValues$customer;


		if (isInternal) {
			var isProjectNumber = cartType !== 'commercial' ? true : number;
			return Boolean(Email && FullName && project && isProjectNumber && customer);
		} else {
			return Boolean(Email && FullName);
		}

		return false;
	}

	function data$j() {
		return {
			permalink: '',
			items: '',
			isAuthed: false,
			isInternal: false,
			isLoading: false,
			isSuccess: false,
			hasError: false,
			errorText: '',

			inputValues: {
				FullName: '',
				Organization: '',
				Email: '',
				customer: '',
				project: '',
				number: '',
				comment: ''
			},
			cartType: 'commercial',

			inputErrors: {
				FullName: false,
				Email: false,
				customer: false,
				project: false,
				number: false
			}
		};
	}
	function translate$d(text) {
		var replaceBreaks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

		if (replaceBreaks) {
			return Translations$2.getText(text).replace(/\r\n/, '<br />');
		}
		return Translations$2.getText(text);
	}
	var methods$g = {
		onLoginHandler: function onLoginHandler() {
			this.fire('login');
		},
		onCloseHandler: function onCloseHandler() {
			this.fire('close');
		},
		onTextInputChange: function onTextInputChange(ev, fieldName) {
			var _get = this.get(),
			    isInternal = _get.isInternal,
			    _get$inputValues = _get.inputValues,
			    inputValues = _get$inputValues === undefined ? {} : _get$inputValues,
			    _get$inputErrors = _get.inputErrors,
			    inputErrors = _get$inputErrors === undefined ? {} : _get$inputErrors,
			    _get$cartType = _get.cartType,
			    cartType = _get$cartType === undefined ? 'commercial' : _get$cartType;

			var restrictedFields = isInternal ? isInternalRestricted : defaultRestricted;
			var value = ev.target.value;


			var dataForSet = { inputValues: _extends({}, inputValues), inputErrors: _extends({}, inputErrors) };

			dataForSet['inputValues'][fieldName] = value;

			if (restrictedFields.indexOf(fieldName) !== -1 && !Boolean(value)) {
				if (fieldName !== 'number') {
					dataForSet['inputErrors'][fieldName] = true;
				} else {
					dataForSet['inputErrors']['number'] = cartType === 'commercial';
				}
			} else {
				dataForSet['inputErrors'][fieldName] = false;
			}

			this.set(dataForSet);
		},
		onTextInputPaste: function onTextInputPaste(ev, fieldName) {
			var _this = this;

			setTimeout(function () {
				return _this.onTextInputChange(ev, fieldName);
			}, 0);
		},
		onSubmitClick: function onSubmitClick() {
			var _get2 = this.get(),
			    isButtonValid = _get2.isButtonValid;

			if (!isButtonValid) {
				return;
			}

			this.set({ isLoading: true });

			var dataToSend = this.getSendData();

			this.fire('submit', { dataToSend: dataToSend, view: this });
		},
		showSuccess: function showSuccess() {

			this.set({ isSuccess: true, isLoading: false });
		},
		getSendData: function getSendData() {
			var _get3 = this.get(),
			    permalink = _get3.permalink,
			    inputValues = _get3.inputValues,
			    isInternal = _get3.isInternal,
			    items = _get3.items,
			    cartType = _get3.cartType;

			var projectType = this.getProjectType(isInternal ? cartType : 'commercial');

			var dataToSend = {
				TinyReference: permalink,
				ReceiveWay: '',
				Customer: inputValues['customer'],
				Project: isInternal ? inputValues['project'] : '',
				ProjectType: projectType,
				ContractNumber: isInternal ? inputValues['number'] : '',
				Name: '',
				Surname: inputValues['FullName'],
				Organization: isInternal ? inputValues['Organization'] : '',
				Email: inputValues['Email'],
				Phone: '',
				Comment: inputValues['comment'],
				Scenes: items,
				Internal: isInternal
			};

			return dataToSend;
		},
		getProjectType: function getProjectType(type) {

			switch (type) {
				case 'commercial':
					return 'К';
				case 'internal':
					return 'ВН';
				case 'presale':
					return 'ПС';
				default:
					throw 'unknown project type';
			}
		}
	};

	function oncreate$5() {
		var _this2 = this;

		var warningContainer = this.refs.warningContainer;

		if (warningContainer) {

			var link = this.refs.warningContainer.querySelector('.link');

			var _get4 = this.get(),
			    permalink = _get4.permalink;

			link.addEventListener('click', function () {
				return _this2.fire('warning', permalink);
			});
		}
	}
	function create_main_fragment$i(component, ctx) {
		var if_block_anchor;

		function select_block_type(ctx) {
			if (!ctx.isAuthed) return create_if_block$7;
			if (!ctx.isSuccess) return create_if_block_1$3;
			return create_else_block$3;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c: function c() {
				if_block.c();
				if_block_anchor = createComment();
			},
			m: function m(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p: function p(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			d: function d(detach) {
				if_block.d(detach);
				if (detach) {
					detachNode(if_block_anchor);
				}
			}
		};
	}

	// (164:4) {:else}
	function create_else_block$3(component, ctx) {
		var div5,
		    div3,
		    div0,
		    text0_value = translate$d('cart.success.header'),
		    text0,
		    text1,
		    div1,
		    text2_value = translate$d('cart.success.content'),
		    text2,
		    text3,
		    div2,
		    text4_value = translate$d('cart.success.footer'),
		    text4,
		    text5,
		    div4,
		    button,
		    text6_value = translate$d('alerts.close'),
		    text6;

		function click_handler(event) {
			component.onCloseHandler();
		}

		return {
			c: function c() {
				div5 = createElement("div");
				div3 = createElement("div");
				div0 = createElement("div");
				text0 = createText(text0_value);
				text1 = createText("\r\n            ");
				div1 = createElement("div");
				text2 = createText(text2_value);
				text3 = createText("\r\n            ");
				div2 = createElement("div");
				text4 = createText(text4_value);
				text5 = createText("\r\n        ");
				div4 = createElement("div");
				button = createElement("button");
				text6 = createText(text6_value);
				div3.className = "dialog-content";
				setStyle(div3, "color", "#8394a8");
				setStyle(div3, "text-align", "left");
				addListener(button, "click", click_handler);
				button.className = "dialog-login-button";
				div4.className = "dialog-footer";
				setStyle(div4, "padding-bottom", "25px");
				div5.className = "auth-dialog";
			},
			m: function m(target, anchor) {
				insert(target, div5, anchor);
				append(div5, div3);
				append(div3, div0);
				append(div0, text0);
				append(div3, text1);
				append(div3, div1);
				append(div1, text2);
				append(div3, text3);
				append(div3, div2);
				append(div2, text4);
				append(div5, text5);
				append(div5, div4);
				append(div4, button);
				append(button, text6);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(div5);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	// (14:4) {#if !isSuccess}
	function create_if_block_1$3(component, ctx) {
		var div6,
		    div5,
		    div0,
		    text0_value = translate$d('cart.header'),
		    text0,
		    text1,
		    div4,
		    div2,
		    div1,
		    raw_value = translate$d('cart.warning', true),
		    text2,
		    table,
		    tbody,
		    tr0,
		    td0,
		    label0,
		    text3_value = translate$d('cart.customer'),
		    text3,
		    text4,
		    td1,
		    input0,
		    input0_class_value,
		    input0_value_value,
		    text5,
		    td2,
		    text6_value = ctx.isInternal ? '*' : '',
		    text6,
		    text7,
		    text8,
		    tr1,
		    td3,
		    label1,
		    text9_value = translate$d('cart.person'),
		    text9,
		    text10,
		    td4,
		    input1,
		    input1_class_value,
		    input1_value_value,
		    text11,
		    td5,
		    text13,
		    text14,
		    tr2,
		    td6,
		    label2,
		    text15_value = translate$d('cart.email'),
		    text15,
		    text16,
		    td7,
		    input2,
		    input2_class_value,
		    input2_value_value,
		    text17,
		    td8,
		    text19,
		    tr3,
		    td9,
		    label3,
		    text20_value = translate$d('cart.comment'),
		    text20,
		    text21,
		    td10,
		    textarea,
		    textarea_value_value,
		    text22,
		    td11,
		    text23,
		    div3,
		    button,
		    text24_value = translate$d('cart.submit'),
		    text24,
		    button_disabled_value,
		    button_class_value;

		function keyup_handler(event) {
			component.onTextInputChange(event, 'customer');
		}

		function paste_handler(event) {
			component.onTextInputPaste(event, 'customer');
		}

		var if_block0 = ctx.isInternal && create_if_block_3$1(component, ctx);

		function keyup_handler_1(event) {
			component.onTextInputChange(event, 'FullName');
		}

		function paste_handler_1(event) {
			component.onTextInputPaste(event, 'FullName');
		}

		var if_block1 = ctx.isInternal && create_if_block_2$2(component, ctx);

		function keyup_handler_2(event) {
			component.onTextInputChange(event, 'Email');
		}

		function paste_handler_2(event) {
			component.onTextInputPaste(event, 'Email');
		}

		function keyup_handler_3(event) {
			component.onTextInputChange(event, 'comment');
		}

		function paste_handler_3(event) {
			component.onTextInputPaste(event, 'comment');
		}

		function click_handler(event) {
			component.onSubmitClick();
		}

		return {
			c: function c() {
				div6 = createElement("div");
				div5 = createElement("div");
				div0 = createElement("div");
				text0 = createText(text0_value);
				text1 = createText("\r\n            ");
				div4 = createElement("div");
				div2 = createElement("div");
				div1 = createElement("div");
				text2 = createText("\r\n                    ");
				table = createElement("table");
				tbody = createElement("tbody");
				tr0 = createElement("tr");
				td0 = createElement("td");
				label0 = createElement("label");
				text3 = createText(text3_value);
				text4 = createText("\r\n                                ");
				td1 = createElement("td");
				input0 = createElement("input");
				text5 = createText("\r\n                                ");
				td2 = createElement("td");
				text6 = createText(text6_value);
				text7 = createText("\r\n                            ");
				if (if_block0) if_block0.c();
				text8 = createText("\r\n                            ");
				tr1 = createElement("tr");
				td3 = createElement("td");
				label1 = createElement("label");
				text9 = createText(text9_value);
				text10 = createText("\r\n                                ");
				td4 = createElement("td");
				input1 = createElement("input");
				text11 = createText("\r\n                                ");
				td5 = createElement("td");
				td5.textContent = "*";
				text13 = createText("\r\n                            ");
				if (if_block1) if_block1.c();
				text14 = createText("\r\n                            ");
				tr2 = createElement("tr");
				td6 = createElement("td");
				label2 = createElement("label");
				text15 = createText(text15_value);
				text16 = createText("\r\n                                ");
				td7 = createElement("td");
				input2 = createElement("input");
				text17 = createText("\r\n                                ");
				td8 = createElement("td");
				td8.textContent = "*";
				text19 = createText("\r\n                            ");
				tr3 = createElement("tr");
				td9 = createElement("td");
				label3 = createElement("label");
				text20 = createText(text20_value);
				text21 = createText("\r\n                                ");
				td10 = createElement("td");
				textarea = createElement("textarea");
				text22 = createText("\r\n                                ");
				td11 = createElement("td");
				text23 = createText("\r\n                ");
				div3 = createElement("div");
				button = createElement("button");
				text24 = createText(text24_value);
				div0.className = "header";
				setStyle(div0, "padding-top", "10px");
				setStyle(div0, "font-size", "16px");
				setStyle(div0, "text-align", "left");
				div1.className = "cart-order-warning";
				setStyle(div1, "text-align", "center");
				addListener(input0, "keyup", keyup_handler);
				addListener(input0, "paste", paste_handler);
				input0.disabled = ctx.isLoading;
				setAttribute(input0, "type", "text");
				input0.className = input0_class_value = ctx.inputErrors['customer'] ? 'invalid-field' : '';
				input0.value = input0_value_value = ctx.inputValues['customer'];
				tr0.className = "cart-customer";
				addListener(input1, "keyup", keyup_handler_1);
				addListener(input1, "paste", paste_handler_1);
				setAttribute(input1, "type", "text");
				input1.disabled = ctx.isLoading;
				input1.className = input1_class_value = ctx.inputErrors['FullName'] ? 'invalid-field' : '';
				input1.value = input1_value_value = ctx.inputValues['FullName'];
				tr1.className = "cart-person";
				addListener(input2, "keyup", keyup_handler_2);
				addListener(input2, "paste", paste_handler_2);
				setAttribute(input2, "type", "text");
				input2.disabled = ctx.isLoading;
				input2.className = input2_class_value = ctx.inputErrors['Email'] ? 'invalid-field' : '';
				input2.value = input2_value_value = ctx.inputValues['Email'];
				tr2.className = "cart-email";
				addListener(textarea, "keyup", keyup_handler_3);
				addListener(textarea, "paste", paste_handler_3);
				textarea.disabled = ctx.isLoading;
				textarea.maxLength = "1000";
				textarea.value = textarea_value_value = ctx.inputValues['comment'];
				tr3.className = "cart-comment";
				div2.className = "cart-order-form";
				addListener(button, "click", click_handler);
				button.disabled = button_disabled_value = !ctx.isButtonValid || ctx.isLoading;
				button.className = button_class_value = "cart-order-submit " + (!ctx.isButtonValid || ctx.isLoading ? 'button-disabled' : '');
				div3.className = "cart-order-footer";
				div4.className = "cart-order";
				div5.className = "cart";
				setStyle(div5, "border-radius", "5px");
				div6.className = "noselect order-main-dialog";
			},
			m: function m(target, anchor) {
				insert(target, div6, anchor);
				append(div6, div5);
				append(div5, div0);
				append(div0, text0);
				append(div5, text1);
				append(div5, div4);
				append(div4, div2);
				append(div2, div1);
				div1.innerHTML = raw_value;
				component.refs.warningContainer = div1;
				append(div2, text2);
				append(div2, table);
				append(table, tbody);
				append(tbody, tr0);
				append(tr0, td0);
				append(td0, label0);
				append(label0, text3);
				append(tr0, text4);
				append(tr0, td1);
				append(td1, input0);
				append(tr0, text5);
				append(tr0, td2);
				append(td2, text6);
				append(tbody, text7);
				if (if_block0) if_block0.m(tbody, null);
				append(tbody, text8);
				append(tbody, tr1);
				append(tr1, td3);
				append(td3, label1);
				append(label1, text9);
				append(tr1, text10);
				append(tr1, td4);
				append(td4, input1);
				append(tr1, text11);
				append(tr1, td5);
				append(tbody, text13);
				if (if_block1) if_block1.m(tbody, null);
				append(tbody, text14);
				append(tbody, tr2);
				append(tr2, td6);
				append(td6, label2);
				append(label2, text15);
				append(tr2, text16);
				append(tr2, td7);
				append(td7, input2);
				append(tr2, text17);
				append(tr2, td8);
				append(tbody, text19);
				append(tbody, tr3);
				append(tr3, td9);
				append(td9, label3);
				append(label3, text20);
				append(tr3, text21);
				append(tr3, td10);
				append(td10, textarea);
				append(tr3, text22);
				append(tr3, td11);
				append(div4, text23);
				append(div4, div3);
				append(div3, button);
				append(button, text24);
			},
			p: function p(changed, ctx) {
				if (changed.isLoading) {
					input0.disabled = ctx.isLoading;
				}

				if (changed.inputErrors && input0_class_value !== (input0_class_value = ctx.inputErrors['customer'] ? 'invalid-field' : '')) {
					input0.className = input0_class_value;
				}

				if (changed.inputValues && input0_value_value !== (input0_value_value = ctx.inputValues['customer'])) {
					input0.value = input0_value_value;
				}

				if (changed.isInternal && text6_value !== (text6_value = ctx.isInternal ? '*' : '')) {
					setData(text6, text6_value);
				}

				if (ctx.isInternal) {
					if (if_block0) {
						if_block0.p(changed, ctx);
					} else {
						if_block0 = create_if_block_3$1(component, ctx);
						if_block0.c();
						if_block0.m(tbody, text8);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (changed.isLoading) {
					input1.disabled = ctx.isLoading;
				}

				if (changed.inputErrors && input1_class_value !== (input1_class_value = ctx.inputErrors['FullName'] ? 'invalid-field' : '')) {
					input1.className = input1_class_value;
				}

				if (changed.inputValues && input1_value_value !== (input1_value_value = ctx.inputValues['FullName'])) {
					input1.value = input1_value_value;
				}

				if (ctx.isInternal) {
					if (if_block1) {
						if_block1.p(changed, ctx);
					} else {
						if_block1 = create_if_block_2$2(component, ctx);
						if_block1.c();
						if_block1.m(tbody, text14);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (changed.isLoading) {
					input2.disabled = ctx.isLoading;
				}

				if (changed.inputErrors && input2_class_value !== (input2_class_value = ctx.inputErrors['Email'] ? 'invalid-field' : '')) {
					input2.className = input2_class_value;
				}

				if (changed.inputValues && input2_value_value !== (input2_value_value = ctx.inputValues['Email'])) {
					input2.value = input2_value_value;
				}

				if (changed.isLoading) {
					textarea.disabled = ctx.isLoading;
				}

				if (changed.inputValues && textarea_value_value !== (textarea_value_value = ctx.inputValues['comment'])) {
					textarea.value = textarea_value_value;
				}

				if ((changed.isButtonValid || changed.isLoading) && button_disabled_value !== (button_disabled_value = !ctx.isButtonValid || ctx.isLoading)) {
					button.disabled = button_disabled_value;
				}

				if ((changed.isButtonValid || changed.isLoading) && button_class_value !== (button_class_value = "cart-order-submit " + (!ctx.isButtonValid || ctx.isLoading ? 'button-disabled' : ''))) {
					button.className = button_class_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div6);
				}

				if (component.refs.warningContainer === div1) component.refs.warningContainer = null;
				removeListener(input0, "keyup", keyup_handler);
				removeListener(input0, "paste", paste_handler);
				if (if_block0) if_block0.d();
				removeListener(input1, "keyup", keyup_handler_1);
				removeListener(input1, "paste", paste_handler_1);
				if (if_block1) if_block1.d();
				removeListener(input2, "keyup", keyup_handler_2);
				removeListener(input2, "paste", paste_handler_2);
				removeListener(textarea, "keyup", keyup_handler_3);
				removeListener(textarea, "paste", paste_handler_3);
				removeListener(button, "click", click_handler);
			}
		};
	}

	// (1:0) {#if !isAuthed}
	function create_if_block$7(component, ctx) {
		var div2,
		    div0,
		    text0_value = translate$d('alerts.authenticate'),
		    text0,
		    text1,
		    div1,
		    button,
		    text2_value = translate$d('alerts.login'),
		    text2;

		function click_handler(event) {
			component.onLoginHandler();
		}

		return {
			c: function c() {
				div2 = createElement("div");
				div0 = createElement("div");
				text0 = createText(text0_value);
				text1 = createText("\r\n    ");
				div1 = createElement("div");
				button = createElement("button");
				text2 = createText(text2_value);
				div0.className = "dialog-content";
				setStyle(div0, "color", "#8394a8");
				addListener(button, "click", click_handler);
				button.className = "dialog-login-button";
				div1.className = "dialog-footer";
				setStyle(div1, "padding-bottom", "25px");
				div2.className = "auth-dialog";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div0);
				append(div0, text0);
				append(div2, text1);
				append(div2, div1);
				append(div1, button);
				append(button, text2);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(div2);
				}

				removeListener(button, "click", click_handler);
			}
		};
	}

	// (46:28) {#if isInternal}
	function create_if_block_3$1(component, ctx) {
		var tr0,
		    td0,
		    label0,
		    text0_value = translate$d('cart.project.name'),
		    text0,
		    text1,
		    td1,
		    input0,
		    input0_class_value,
		    input0_value_value,
		    text2,
		    td2,
		    text4,
		    tr1,
		    td3,
		    label1,
		    text5_value = translate$d('cart.project.type.title'),
		    text5,
		    text6,
		    td4,
		    select,
		    option0,
		    text7_value = translate$d('cart.project.type.commercial'),
		    text7,
		    option1,
		    text8_value = translate$d('cart.project.type.internal'),
		    text8,
		    option2,
		    text9_value = translate$d('cart.project.type.presale'),
		    text9,
		    select_updating = false,
		    text10,
		    td5,
		    text12,
		    tr2,
		    td6,
		    label2,
		    text13_value = translate$d('cart.project.number'),
		    text13,
		    text14,
		    td7,
		    input1,
		    input1_class_value,
		    input1_value_value,
		    input1_readonly_value,
		    text15,
		    td8,
		    text16_value = ctx.cartType === 'commercial' ? '*' : '',
		    text16;

		function keyup_handler(event) {
			component.onTextInputChange(event, 'project');
		}

		function paste_handler(event) {
			component.onTextInputPaste(event, 'project');
		}

		function select_change_handler() {
			select_updating = true;
			component.set({ cartType: selectValue(select) });
			select_updating = false;
		}

		function keyup_handler_1(event) {
			component.onTextInputChange(event, 'number');
		}

		function paste_handler_1(event) {
			component.onTextInputPaste(event, 'number');
		}

		return {
			c: function c() {
				tr0 = createElement("tr");
				td0 = createElement("td");
				label0 = createElement("label");
				text0 = createText(text0_value);
				text1 = createText("\r\n                                ");
				td1 = createElement("td");
				input0 = createElement("input");
				text2 = createText("\r\n                                ");
				td2 = createElement("td");
				td2.textContent = "*";
				text4 = createText("\r\n                            ");
				tr1 = createElement("tr");
				td3 = createElement("td");
				label1 = createElement("label");
				text5 = createText(text5_value);
				text6 = createText("\r\n                                ");
				td4 = createElement("td");
				select = createElement("select");
				option0 = createElement("option");
				text7 = createText(text7_value);
				option1 = createElement("option");
				text8 = createText(text8_value);
				option2 = createElement("option");
				text9 = createText(text9_value);
				text10 = createText("\r\n                                ");
				td5 = createElement("td");
				td5.textContent = "*";
				text12 = createText("\r\n                            ");
				tr2 = createElement("tr");
				td6 = createElement("td");
				label2 = createElement("label");
				text13 = createText(text13_value);
				text14 = createText("\r\n                                ");
				td7 = createElement("td");
				input1 = createElement("input");
				text15 = createText("\r\n                                ");
				td8 = createElement("td");
				text16 = createText(text16_value);
				addListener(input0, "keyup", keyup_handler);
				addListener(input0, "paste", paste_handler);
				input0.disabled = ctx.isLoading;
				setAttribute(input0, "type", "text");
				input0.className = input0_class_value = ctx.inputErrors['project'] ? 'invalid-field' : '';
				input0.value = input0_value_value = ctx.inputValues['project'];
				tr0.className = "cart-project";
				option0.__value = "commercial";
				option0.value = option0.__value;
				option1.__value = "internal";
				option1.value = option1.__value;
				option2.__value = "presale";
				option2.value = option2.__value;
				addListener(select, "change", select_change_handler);
				if (!('cartType' in ctx)) component.root._beforecreate.push(select_change_handler);
				select.disabled = ctx.isLoading;
				tr1.className = "cart-project-type";
				addListener(input1, "keyup", keyup_handler_1);
				addListener(input1, "paste", paste_handler_1);
				setAttribute(input1, "type", "text");
				input1.disabled = ctx.isLoading;
				input1.className = input1_class_value = "cart-project-number " + (ctx.cartType !== 'commercial' ? 'read-only' : '') + " " + (ctx.inputErrors['number'] ? 'invalid-field' : '');
				input1.value = input1_value_value = ctx.inputValues['number'];
				input1.readOnly = input1_readonly_value = ctx.cartType !== 'commercial';
				tr2.className = "cart-project-number";
			},
			m: function m(target, anchor) {
				insert(target, tr0, anchor);
				append(tr0, td0);
				append(td0, label0);
				append(label0, text0);
				append(tr0, text1);
				append(tr0, td1);
				append(td1, input0);
				append(tr0, text2);
				append(tr0, td2);
				insert(target, text4, anchor);
				insert(target, tr1, anchor);
				append(tr1, td3);
				append(td3, label1);
				append(label1, text5);
				append(tr1, text6);
				append(tr1, td4);
				append(td4, select);
				append(select, option0);
				append(option0, text7);
				append(select, option1);
				append(option1, text8);
				append(select, option2);
				append(option2, text9);

				selectOption(select, ctx.cartType);

				append(tr1, text10);
				append(tr1, td5);
				insert(target, text12, anchor);
				insert(target, tr2, anchor);
				append(tr2, td6);
				append(td6, label2);
				append(label2, text13);
				append(tr2, text14);
				append(tr2, td7);
				append(td7, input1);
				append(tr2, text15);
				append(tr2, td8);
				append(td8, text16);
			},
			p: function p(changed, ctx) {
				if (changed.isLoading) {
					input0.disabled = ctx.isLoading;
				}

				if (changed.inputErrors && input0_class_value !== (input0_class_value = ctx.inputErrors['project'] ? 'invalid-field' : '')) {
					input0.className = input0_class_value;
				}

				if (changed.inputValues && input0_value_value !== (input0_value_value = ctx.inputValues['project'])) {
					input0.value = input0_value_value;
				}

				if (!select_updating && changed.cartType) selectOption(select, ctx.cartType);
				if (changed.isLoading) {
					select.disabled = ctx.isLoading;
					input1.disabled = ctx.isLoading;
				}

				if ((changed.cartType || changed.inputErrors) && input1_class_value !== (input1_class_value = "cart-project-number " + (ctx.cartType !== 'commercial' ? 'read-only' : '') + " " + (ctx.inputErrors['number'] ? 'invalid-field' : ''))) {
					input1.className = input1_class_value;
				}

				if (changed.inputValues && input1_value_value !== (input1_value_value = ctx.inputValues['number'])) {
					input1.value = input1_value_value;
				}

				if (changed.cartType && input1_readonly_value !== (input1_readonly_value = ctx.cartType !== 'commercial')) {
					input1.readOnly = input1_readonly_value;
				}

				if (changed.cartType && text16_value !== (text16_value = ctx.cartType === 'commercial' ? '*' : '')) {
					setData(text16, text16_value);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(tr0);
				}

				removeListener(input0, "keyup", keyup_handler);
				removeListener(input0, "paste", paste_handler);
				if (detach) {
					detachNode(text4);
					detachNode(tr1);
				}

				removeListener(select, "change", select_change_handler);
				if (detach) {
					detachNode(text12);
					detachNode(tr2);
				}

				removeListener(input1, "keyup", keyup_handler_1);
				removeListener(input1, "paste", paste_handler_1);
			}
		};
	}

	// (110:28) {#if isInternal}
	function create_if_block_2$2(component, ctx) {
		var tr,
		    td0,
		    label,
		    text0_value = translate$d('cart.company'),
		    text0,
		    text1,
		    td1,
		    input,
		    input_value_value,
		    text2,
		    td2;

		return {
			c: function c() {
				tr = createElement("tr");
				td0 = createElement("td");
				label = createElement("label");
				text0 = createText(text0_value);
				text1 = createText("\r\n                                ");
				td1 = createElement("td");
				input = createElement("input");
				text2 = createText("\r\n                                ");
				td2 = createElement("td");
				setAttribute(input, "type", "text");
				input.readOnly = true;
				input.value = input_value_value = ctx.inputValues['Organization'];
				tr.className = "cart-company";
			},
			m: function m(target, anchor) {
				insert(target, tr, anchor);
				append(tr, td0);
				append(td0, label);
				append(label, text0);
				append(tr, text1);
				append(tr, td1);
				append(td1, input);
				append(tr, text2);
				append(tr, td2);
			},
			p: function p(changed, ctx) {
				if (changed.inputValues && input_value_value !== (input_value_value = ctx.inputValues['Organization'])) {
					input.value = input_value_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(tr);
				}
			}
		};
	}

	function OrderDialog(options) {
		var _this3 = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$j(), options.data);

		this._recompute({ isInternal: 1, inputValues: 1, cartType: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$i(this, this._state);

		this.root._oncreate.push(function () {
			oncreate$5.call(_this3);
			_this3.fire("update", { changed: assignTrue({}, _this3._state), current: _this3._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(OrderDialog.prototype, proto$4);
	assign(OrderDialog.prototype, methods$g);

	OrderDialog.prototype._recompute = function _recompute(changed, state) {
		if (changed.isInternal || changed.inputValues || changed.cartType) {
			if (this._differs(state.isButtonValid, state.isButtonValid = isButtonValid(state))) changed.isButtonValid = true;
		}
	};

	var SidebarUIElement = function (_BaseUIElement) {
	    inherits(SidebarUIElement, _BaseUIElement);

	    function SidebarUIElement() {
	        classCallCheck(this, SidebarUIElement);
	        return possibleConstructorReturn(this, (SidebarUIElement.__proto__ || Object.getPrototypeOf(SidebarUIElement)).apply(this, arguments));
	    }

	    createClass(SidebarUIElement, [{
	        key: 'init',
	        value: function init() {

	            var map = this.getMap();

	            this._view = new View$7({ map: map });

	            this.initChildren([{
	                index: 'searchTab',
	                constructor: SearchTabComponent
	            }, {
	                index: 'resultsTab',
	                constructor: ResultTabComponent
	            }, {
	                index: 'favoritesTab',
	                constructor: FavouritesTabComponent
	            }, {
	                index: 'imageDetails',
	                constructor: ImageDetailsComponent
	            }]);

	            this._manageTabState('start');

	            this._bindEvents();
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var _this2 = this;

	            var application = this.getApplication();
	            var serviceEvents = application.getServiceEvents();
	            var globalEvents = application.getAppEvents();
	            var store = application.getStore();

	            var _application$getMap = application.getMap(),
	                gmxDrawing = _application$getMap.gmxDrawing;

	            var contourController = application.getBridgeController('contour');
	            var searchTabComponent = this.getChildComponent('searchTab');
	            var resultsHeaderComponent = this.getChildComponent('resultsTab.header');
	            var resutsListComponent = this.getChildComponent('resultsTab.list');
	            var tableHeaderComponent = this.getChildComponent('resultsTab.tableHeader');
	            var favoritesTabComponent = this.getChildComponent('favoritesTab');
	            var favoritesListComponent = this.getChildComponent('favoritesTab.list');
	            var sidebarView = this.getView();

	            sidebarView.on('change', function (e) {
	                return _this2._onTabChangeHandler(e);
	            });

	            gmxDrawing.on('drawstop', function () {
	                return _this2._manageTabState('stopDrawing');
	            });

	            store.on('contours:researchedList', function () {
	                return _this2._manageTabState('addToResults');
	            });
	            store.on('contours:addToCartList', function () {
	                return _this2._manageTabState('addToFavorites');
	            });
	            store.on('contours:addAllToCartList', function () {
	                return _this2._manageTabState('addToFavorites');
	            });
	            store.on('contours:addVisibleToFavoritesList', function () {
	                return _this2._manageTabState('addToFavorites');
	            });
	            store.on('contours:removeSelectedFavoritesList', function () {
	                return _this2._manageTabState('clearFavorites');
	            });

	            globalEvents.on('system:window:resize', function () {
	                return _this2._resizeSidebar();
	            });
	            globalEvents.on('system:uiElements:created', function () {
	                return _this2._resizeSidebar();
	            });
	            serviceEvents.on('sidebar:cart:limit', function () {
	                return _this2._cartLimitMessage();
	            });
	            serviceEvents.on('permalink:searchResults', function () {
	                return _this2._searchResults();
	            });
	            serviceEvents.on('sidebar:setCurrentTab', function (tab) {
	                return _this2._manageTabState('applyAppState', tab);
	            });

	            searchTabComponent.events.on('searchButton:click', function () {
	                return _this2._searchResults();
	            });
	            resultsHeaderComponent.events.on('results:clear', function () {
	                return contourController.clearContoursOnResults();
	            });
	            resultsHeaderComponent.events.on('filter:clear', function () {
	                return contourController.clearClientFilter();
	            });
	            resultsHeaderComponent.events.on('results:setVisibleToCart', function () {
	                return contourController.setVisibleToCart();
	            });
	            resutsListComponent.events.on('imageDetails:show', function (e, bBox) {
	                return _this2._showImageDetails(e, bBox);
	            });
	            //resutsListComponent.events.on('filter:change', (e) => contourController.changeClientFilter(e));
	            tableHeaderComponent.events.on('filter:change', function (e) {
	                return contourController.changeClientFilter(e);
	            });
	            favoritesListComponent.events.on('imageDetails:show', function (e, bBox) {
	                return _this2._showImageDetails(e, bBox);
	            });
	            favoritesTabComponent.events.on('makeOrder:click', function () {
	                return _this2._showOrderDialog();
	            });
	        }
	    }, {
	        key: '_onTabChangeHandler',
	        value: function _onTabChangeHandler(e) {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var currentTab = e.detail.current;


	            store.setMetaItem('currentTab', currentTab, ['currentTab:changeUI', 'currentTab:changeMap', 'currentTab:changeMeta', 'currentTab:changeAfter']);

	            this._changeTabBorder(e);
	        }
	    }, {
	        key: '_searchResults',
	        value: function _searchResults() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var requestManager = application.getRequestManager();
	            var contourController = application.getBridgeController('contour');

	            var searchCriteria = store.getData('searchCriteria');
	            var _searchCriteria$satel = searchCriteria.satellites,
	                _searchCriteria$satel2 = _searchCriteria$satel.pc,
	                pc = _searchCriteria$satel2 === undefined ? [] : _searchCriteria$satel2,
	                _searchCriteria$satel3 = _searchCriteria$satel.ms,
	                ms = _searchCriteria$satel3 === undefined ? [] : _searchCriteria$satel3;


	            var hasCheckedSatellites = ms.some(function (x) {
	                return x.checked;
	            }) || pc.some(function (x) {
	                return x.checked;
	            });

	            if (!hasCheckedSatellites) {
	                return false;
	            }

	            application.showLoader(true);

	            contourController.clearClientFilter();

	            contourController.clearContoursOnResults();

	            requestManager.requestSearchContours(RESULT_MAX_COUNT_PLUS_ONE).then(this._setContoursData.bind(this)).catch(this._showError.bind(this));
	        }
	    }, {
	        key: '_setContoursData',
	        value: function _setContoursData() {
	            var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


	            var application = this.getApplication();
	            var store = application.getStore();
	            var ContourController = application.getBridgeController('contour');
	            var isLoadingCancelled = store.getMetaItem('cancelLoading');

	            if (!isLoadingCancelled) {
	                var _result$values = result.values,
	                    values = _result$values === undefined ? [] : _result$values;

	                var resultLength = values.length;

	                if (resultLength === 0) {
	                    var alertNothingMessage = Translations$2.getText('alerts.nothing');
	                    application.showNotification(alertNothingMessage);
	                } else if (0 < resultLength && resultLength < RESULT_MAX_COUNT_PLUS_ONE) {
	                    ContourController.addContoursOnMapAndList(result);
	                } else {
	                    this._showDownloadDialog();
	                }
	            }

	            application.showLoader(false);

	            store.setMetaItem('cancelLoading', false);
	        }
	    }, {
	        key: '_showDownloadDialog',
	        value: function _showDownloadDialog() {
	            var _this3 = this;

	            var application = this.getApplication();
	            var modalComponent = application.getModal();

	            modalComponent.show({
	                component: DownloadDialog,
	                data: { isAuthentificated: this._isUserIsAuthenticated() },
	                events: {
	                    close: function close() {
	                        return modalComponent.hide();
	                    },
	                    apply: function apply() {
	                        modalComponent.hide();
	                        _this3._onDownloadApplyClick();
	                    }
	                }
	            });
	        }
	    }, {
	        key: '_showOrderDialog',
	        value: function _showOrderDialog() {
	            var _this4 = this;

	            var application = this.getApplication();
	            var store = application.getStore();
	            var modalComponent = application.getModal();
	            var appStateManager = application.getAddon('appStateManager');

	            var showModal = function showModal(data) {
	                modalComponent.show({
	                    data: data,
	                    showClose: true,
	                    component: OrderDialog,
	                    events: {
	                        login: function login() {
	                            return _this4._onLoginButtonClick();
	                        },
	                        warning: function warning(permalink) {
	                            return _this4._onWarningClick(permalink);
	                        },
	                        submit: function submit(_ref) {
	                            var dataToSend = _ref.dataToSend,
	                                view = _ref.view;
	                            return _this4._onSubmitClick(dataToSend, view);
	                        },
	                        close: function close() {
	                            return modalComponent.hide();
	                        }
	                    }
	                });
	            };

	            var userInfo = store.getData('userInfo');
	            var inputValues = _extends({}, userInfo, { customer: '', project: '', number: '', comment: '' });
	            var isAuthed = this._isUserIsAuthenticated();
	            var isInternal = this._isUserIsInternal();
	            var selectedCarts = store.getSelectedFavorites();

	            if (selectedCarts.length < 1) {
	                return;
	            }

	            var orderData = {
	                inputValues: inputValues,
	                isAuthed: isAuthed,
	                isInternal: isInternal,
	                items: selectedCarts.map(function (item) {
	                    return getProperty(item, 'sceneid');
	                }).join(',')
	            };

	            if (!isAuthed) {
	                showModal(orderData);
	                return;
	            }

	            appStateManager.getPermalinkId().then(function (result) {
	                orderData['permalink'] = getRootUrl() + '?link=' + result;
	                showModal(orderData);
	            }).catch(function (e) {
	                return _this4._errorHandler(e);
	            });
	        }
	    }, {
	        key: '_onLoginButtonClick',
	        value: function _onLoginButtonClick() {

	            var application = this.getApplication();
	            var appStateManager = application.getAddon('appStateManager');
	            var authContainer = document.getElementById('auth');
	            var loginButton = authContainer.querySelector('.authWidget-loginButton');

	            var currentAppState = appStateManager.getCurrentApplicationState();
	            var savedState = appStateManager.getAppStateFromLocalStorage();
	            if (!savedState) {
	                appStateManager.saveAppStateToLocalStorage(currentAppState);
	            }

	            loginButton.click();
	        }
	    }, {
	        key: '_onWarningClick',
	        value: function _onWarningClick(permalink) {

	            var application = this.getApplication();
	            var appStateManager = application.getAddon('appStateManager');
	            var matches = /link=([^&]+)/g.exec(permalink);

	            if (Array.isArray(matches) && matches.length > 0) {
	                var permalinkId = matches[1];
	                appStateManager.readPermalink(permalinkId).then(function (response) {
	                    appStateManager.saveAppStateToLocalStorage(response);
	                    window.location = HOME_LINK;
	                }).catch(function (error) {
	                    return window.console.error(error);
	                });
	            } else {
	                window.console.error('Permalink not set:' + permalink);
	            }
	        }
	    }, {
	        key: '_onSubmitClick',
	        value: function _onSubmitClick(data, dialogView) {

	            var application = this.getApplication();
	            var requestManager = application.getRequestManager();

	            requestManager.requestCreateOrder(data).then(function (response) {
	                var status = response.Status;


	                if (status === 'ok') {
	                    dialogView.showSuccess();
	                } else {
	                    alert('Error! Watch in console');
	                    window.console.error(response);
	                }
	            }).catch(function (error) {
	                alert('Error! Watch in console');
	                window.console.error(error);
	            });
	        }
	    }, {
	        key: '_isUserIsAuthenticated',
	        value: function _isUserIsAuthenticated() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var userInfo = store.getData('userInfo');

	            return userInfo['IsAuthenticated'];
	        }
	    }, {
	        key: '_isUserIsInternal',
	        value: function _isUserIsInternal() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var userInfo = store.getData('userInfo');

	            return userInfo['IsAuthenticated'] && userInfo['Role'] === ACCESS_USER_ROLE;
	        }
	    }, {
	        key: '_resizeSidebar',
	        value: function _resizeSidebar() {

	            var application = this.getApplication();
	            var events = application.getServiceEvents();
	            var height = getTotalHeight(['#header', '.leaflet-gmx-copyright']);
	            var preparedHeight = document.body.getBoundingClientRect().height - height + 'px';

	            document.body.querySelector('.scanex-sidebar').style.height = preparedHeight;
	            events.trigger('sidebar:tab:resize');
	        }
	    }, {
	        key: '_changeTabBorder',
	        value: function _changeTabBorder(e) {
	            var current = e.detail.current;

	            var tabs = document.querySelectorAll('.tabs > div');

	            tabs.forEach(function (tab) {
	                return tab.classList.remove('active-sidebar-tab');
	            });
	            if (current) {
	                var currentTab = document.querySelector('[data-tab-id="' + current + '"]');
	                currentTab.classList.add('active-sidebar-tab');
	            }
	        }
	    }, {
	        key: '_showImageDetails',
	        value: function _showImageDetails(e, bBox) {

	            var imageDetailsComponent = this.getChildComponent('imageDetails');
	            imageDetailsComponent.toggle(e, bBox);
	        }
	    }, {
	        key: '_cartLimitMessage',
	        value: function _cartLimitMessage() {

	            var application = this.getApplication();
	            var modalComponent = application.getModal();

	            modalComponent.show({
	                component: 'alert',
	                messageText: Translations$2.getText('favorites.limit')
	            });
	        }
	    }, {
	        key: '_onDownloadApplyClick',
	        value: function _onDownloadApplyClick() {

	            var application = this.getApplication();
	            var store = application.getStore();
	            var requestManager = application.getRequestManager();
	            var shapeLoader = application.getAddon('shapeLoader');

	            store.setMetaItem('cancelLoading', false);

	            application.showLoader(true);

	            requestManager.requestSearchContours().then(function (data) {
	                application.showLoader(false);

	                var cancelLoading = store.getMetaItem('cancelLoading');

	                if (!cancelLoading) {
	                    store.setDownloadCache(data);
	                    shapeLoader.download('results', 'results');
	                }
	            }).catch(this._showError.bind(this));
	        }
	    }, {
	        key: '_manageTabState',
	        value: function _manageTabState(state) {
	            var tabName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


	            var application = this.getApplication();
	            var store = application.getStore();
	            var sidebar = this.getView();
	            var imageDetailsComponent = this.getChildComponent('imageDetails');

	            var hasResultData = store.hasResults();
	            var hasFavoritesData = store.hasFavorites();

	            imageDetailsComponent.hide();

	            if (state === 'start') {
	                sidebar.disable('results');
	                sidebar.disable('favorites');
	                return;
	            }

	            if (state === 'applyAppState') {
	                if (hasResultData) {
	                    sidebar.enable('results');
	                }
	                if (hasFavoritesData) {
	                    sidebar.enable('favorites');
	                }
	                sidebar.setCurrent(tabName);
	                return;
	            }

	            if (state === 'stopDrawing') {
	                if (!sidebar.getCurrent()) {
	                    sidebar.setCurrent('search');
	                }
	                return;
	            }

	            if (state === 'clearResults') {
	                sidebar.disable('results');
	                sidebar.setCurrent('search');
	                return;
	            }

	            if (state === 'addToResults') {
	                if (hasResultData) {
	                    sidebar.enable('results');
	                    sidebar.setCurrent('results');
	                } else {
	                    sidebar.disable('results');
	                    sidebar.setCurrent('search');
	                }
	                return;
	            }

	            if (state === 'addToFavorites') {
	                if (hasFavoritesData > 0) {
	                    sidebar.enable('favorites');
	                } else {
	                    sidebar.disable('favorites');
	                    sidebar.setCurrent('results');
	                }
	                return;
	            }

	            if (state === 'clearFavorites') {
	                if (hasFavoritesData) {
	                    sidebar.enable('favorites');
	                    sidebar.setCurrent('favorites');
	                } else {
	                    sidebar.disable('favorites');
	                    var currentTab = hasResultData ? 'results' : 'search';
	                    sidebar.setCurrent(currentTab);
	                }
	                return;
	            }
	        }
	    }, {
	        key: '_showError',
	        value: function _showError(e) {

	            var application = this.getApplication();
	            var errorText = e.toString();

	            application.showError(errorText);

	            window.console.error(e);
	        }
	    }]);
	    return SidebarUIElement;
	}(BaseUIElement);

	var stringToArray = function stringToArray(str) {
	    var arr = [];
	    for (var i = 0; i < str.length; ++i) {
	        arr.push(str.charAt(i));
	    }
	    return arr;
	};

	var pad = function pad(origin, str, width, sym) {
	    var s = stringToArray(str);
	    for (var i = 0; s.length < width; ++i) {
	        if (origin === 'left') {
	            s.splice(0, 0, sym);
	        } else {
	            s.push(sym);
	        }
	    }
	    return s.join('');
	};

	var padLeft = function padLeft(str, sym, width) {
	    return pad('left', str, width, sym);
	};

	var hsl2rgb = function hsl2rgb(h, s, l) {
	    var q = void 0;
	    if (l < 0.5) {
	        q = l * (1.0 + s);
	    } else if (l >= 0.5) {
	        q = l + s - l * s;
	    }
	    var p = 2.0 * l - q;
	    var hk = h / 360;
	    var norm = function norm(tc) {
	        if (tc < 0) return tc + 1.0;
	        if (tc > 1) return tc - 1.0;
	        return tc;
	    };
	    var tr = norm(hk + 1 / 3);
	    var tg = norm(hk);
	    var tb = norm(hk - 1 / 3);

	    var color = function color(tc) {
	        if (tc < 1 / 6) {
	            return p + (q - p) * 6.0 * tc;
	        }
	        if (1 / 6 <= tc && tc < 1 / 2) {
	            return q;
	        }
	        if (1 / 2 <= tc && tc < 2 / 3) {
	            return p + (q - p) * (2 / 3 - tc) * 6.0;
	        }
	        return p;
	    };

	    return {
	        r: Math.round(color(tr) * 255),
	        g: Math.round(color(tg) * 255),
	        b: Math.round(color(tb) * 255)
	    };
	};

	var rgb2hsl = function rgb2hsl(R, G, B) {
	    var r = R / 255,
	        g = G / 255,
	        b = B / 255;
	    var max = Math.max(r, g, b);
	    var min = Math.min(r, g, b);
	    var h = void 0;
	    if (max == min) {
	        h = undefined;
	    } else if (max == r && g >= b) {
	        h = 60 * (g - b) / (max - min);
	    } else if (max == r && g < b) {
	        h = 60 * (g - b) / (max - min) + 360;
	    } else if (max == g) {
	        h = 60 * (b - r) / (max - min) + 120;
	    } else if (max == b) {
	        h = 60 * (r - g) / (max - min) + 240;
	    }
	    var l = (max + min) / 2;
	    var s = void 0;
	    if (l == 0 || max == min) {
	        s = 0;
	    } else if (0 < l && l <= 0.5) {
	        s = (max - min) / (max + min);
	    } else if (0.5 < l && l < 1) {
	        s = (max - min) / (2 - (max + min));
	    }
	    return { h: h, s: s, l: l };
	};

	var rgb2hex = function rgb2hex(r, g, b) {
	    return '#' + [r, g, b].map(function (x) {
	        return padLeft(x.toString(16), '0', 2).toUpperCase();
	    }).join('');
	};

	var hex2rgb = function hex2rgb(hex) {
	    var _$exec$slice$map = /#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/gi.exec(hex).slice(1).map(function (x) {
	        return parseInt(x, 16);
	    }),
	        _$exec$slice$map2 = slicedToArray(_$exec$slice$map, 3),
	        r = _$exec$slice$map2[0],
	        g = _$exec$slice$map2[1],
	        b = _$exec$slice$map2[2];

	    return { r: r, g: g, b: b };
	};

	/* node_modules\scanex-color-picker\src\Slider\HSlider.html generated by Svelte v2.16.1 */

	var TIMEOUT = 70;
	function hasTooltip(_ref) {
		var tooltip = _ref.tooltip;

		switch (typeof tooltip === 'undefined' ? 'undefined' : _typeof(tooltip)) {
			case 'boolean':
				return tooltip;
			case 'string':
				return tooltip.toLowerCase() === 'true';
			default:
				return false;
		}
	}

	function data$k() {
		return {
			min: 0,
			max: 0,
			value: 0,
			step: 0,
			tooltip: false
		};
	}
	var methods$h = {
		click: function click(e) {
			e.stopPropagation();

			var _get = this.get(),
			    min = _get.min,
			    max = _get.max;

			var a = parseFloat(min);
			var z = parseFloat(max);

			var _refs$slider$getBound = this.refs.slider.getBoundingClientRect(),
			    left = _refs$slider$getBound.left;

			var _refs$tick$getBoundin = this.refs.tick.getBoundingClientRect(),
			    width = _refs$tick$getBoundin.width;

			var d = (e.clientX - width / 2 - left) * this._ratio;
			var value = d;
			if (!isNaN(z) && !isNaN(a) && a <= value && value <= z) {
				this.set({ value: value });
			}
		},
		start: function start(e) {
			e.stopPropagation();
			this._moving = true;

			var _get2 = this.get(),
			    value = _get2.value,
			    hasTooltip = _get2.hasTooltip;

			this._startX = e.clientX;
			this._start = parseFloat(value);
			if (hasTooltip) {
				this.refs.tooltip.style.display = 'block';
			}
		},
		move: function move(e) {
			var _this = this;

			if (this._moving) {
				setTimeout(function () {
					e.stopPropagation();
					document.body.style.cursor = 'pointer';

					var _get3 = _this.get(),
					    min = _get3.min,
					    max = _get3.max,
					    step = _get3.step;

					var a = parseFloat(min);
					var z = parseFloat(max);
					var s = parseFloat(step);
					var d = (e.clientX - _this._startX) * _this._ratio;
					if (s > 0) {
						d = Math.floor(d / s) * s;
					}
					var value = _this._start + d;
					if (!isNaN(z) && !isNaN(a) && a <= value && value <= z) {
						_this.set({ value: value });
					}
				}, TIMEOUT);
			}
		},
		stop: function stop(e) {
			this._moving = false;
			document.body.style.cursor = 'initial';

			var _get4 = this.get(),
			    hasTooltip = _get4.hasTooltip;

			if (hasTooltip) {
				this.refs.tooltip.style.display = 'none';
			}
		},
		_getRatio: function _getRatio(min, max) {
			var a = parseFloat(min);
			var z = parseFloat(max);
			if (!isNaN(a) && !isNaN(z)) {
				var _refs$bar$getBounding = this.refs.bar.getBoundingClientRect(),
				    width = _refs$bar$getBounding.width;

				return (z - a) / width;
			} else {
				return NaN;
			}
		},
		_updateDom: function _updateDom(min, max, value, ratio) {
			var a = parseFloat(min);
			var z = parseFloat(max);
			var v = parseFloat(value);
			if (!isNaN(a) && !isNaN(z) && !isNaN(v) && a <= v && v <= z) {
				this.refs.tick.style.left = Math.round(v / ratio) + 'px';
			}
		}
	};

	function oncreate$6() {
		var _get5 = this.get(),
		    min = _get5.min,
		    max = _get5.max;

		this._ratio = this._getRatio(min, max);
	}
	function onupdate(_ref2) {
		var changed = _ref2.changed,
		    current = _ref2.current,
		    previous = _ref2.previous;

		if (changed.value) {
			var value = parseFloat(current.value);
			if (!isNaN(value)) {
				var _get6 = this.get(),
				    min = _get6.min,
				    max = _get6.max;

				this._updateDom(min, max, value, this._ratio);
			}
		}
	}
	function create_main_fragment$j(component, ctx) {
		var div2,
		    slot_content_default = component._slotted.default,
		    slot_content_default_after,
		    text,
		    div1,
		    div0;

		function onwindowmouseup(event) {
			component.stop(event);	}
		window.addEventListener("mouseup", onwindowmouseup);

		function onwindowmousemove(event) {
			component.move(event);	}
		window.addEventListener("mousemove", onwindowmousemove);

		var if_block = ctx.hasTooltip && create_if_block$8(component, ctx);

		function mousedown_handler(event) {
			component.start(event);
		}

		function click_handler(event) {
			component.click(event);
		}

		return {
			c: function c() {
				div2 = createElement("div");
				text = createText("\r\n    ");
				div1 = createElement("div");
				div0 = createElement("div");
				if (if_block) if_block.c();
				addListener(div0, "mousedown", mousedown_handler);
				div0.className = "hslider-tick";
				addListener(div1, "click", click_handler);
				div1.className = "hslider-bar";
				div2.className = "hslider";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);

				if (slot_content_default) {
					append(div2, slot_content_default);
					append(div2, slot_content_default_after || (slot_content_default_after = createComment()));
				}

				append(div2, text);
				append(div2, div1);
				append(div1, div0);
				if (if_block) if_block.m(div0, null);
				component.refs.tick = div0;
				component.refs.bar = div1;
				component.refs.slider = div2;
			},
			p: function p(changed, ctx) {
				if (ctx.hasTooltip) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$8(component, ctx);
						if_block.c();
						if_block.m(div0, null);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			d: function d(detach) {
				window.removeEventListener("mouseup", onwindowmouseup);

				window.removeEventListener("mousemove", onwindowmousemove);

				if (detach) {
					detachNode(div2);
				}

				if (slot_content_default) {
					reinsertBefore(slot_content_default_after, slot_content_default);
				}

				if (if_block) if_block.d();
				removeListener(div0, "mousedown", mousedown_handler);
				if (component.refs.tick === div0) component.refs.tick = null;
				removeListener(div1, "click", click_handler);
				if (component.refs.bar === div1) component.refs.bar = null;
				if (component.refs.slider === div2) component.refs.slider = null;
			}
		};
	}

	// (6:12) {#if hasTooltip}
	function create_if_block$8(component, ctx) {
		var div,
		    text_value = ctx.parseFloat(ctx.value).toFixed(),
		    text;

		return {
			c: function c() {
				div = createElement("div");
				text = createText(text_value);
				div.className = "hslider-tooltip";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, text);
				component.refs.tooltip = div;
			},
			p: function p(changed, ctx) {
				if ((changed.parseFloat || changed.value) && text_value !== (text_value = ctx.parseFloat(ctx.value).toFixed())) {
					setData(text, text_value);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (component.refs.tooltip === div) component.refs.tooltip = null;
			}
		};
	}

	function HSlider(options) {
		var _this2 = this;

		init(this, options);
		this.refs = {};
		this._state = assign(assign({ parseFloat: parseFloat }, data$k()), options.data);

		this._recompute({ tooltip: 1 }, this._state);
		this._intro = true;
		this._handlers.update = [onupdate];

		this._slotted = options.slots || {};

		this._fragment = create_main_fragment$j(this, this._state);

		this.root._oncreate.push(function () {
			oncreate$6.call(_this2);
			_this2.fire("update", { changed: assignTrue({}, _this2._state), current: _this2._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(HSlider.prototype, proto$4);
	assign(HSlider.prototype, methods$h);

	HSlider.prototype._recompute = function _recompute(changed, state) {
		if (changed.tooltip) {
			if (this._differs(state.hasTooltip, state.hasTooltip = hasTooltip(state))) changed.hasTooltip = true;
		}
	};

	/* node_modules\scanex-color-picker\src\Slider\VSlider.html generated by Svelte v2.16.1 */

	var TIMEOUT$1 = 70;
	function hasTooltip$1(_ref) {
		var tooltip = _ref.tooltip;

		switch (typeof tooltip === 'undefined' ? 'undefined' : _typeof(tooltip)) {
			case 'boolean':
				return tooltip;
			case 'string':
				return tooltip.toLowerCase() === 'true';
			default:
				return false;
		}
	}

	function data$l() {
		return {
			min: 0,
			max: 0,
			value: 0,
			step: 0,
			tooltip: false
		};
	}
	var methods$i = {
		click: function click(e) {
			e.stopPropagation();

			var _get = this.get(),
			    min = _get.min,
			    max = _get.max;

			var a = parseFloat(min);
			var z = parseFloat(max);

			var _refs$slider$getBound = this.refs.slider.getBoundingClientRect(),
			    top = _refs$slider$getBound.top;

			var d = (e.clientY - top) * this._ratio;
			var value = d;
			if (!isNaN(z) && !isNaN(a) && a <= value && value <= z) {
				this.set({ value: value });
			}
		},
		start: function start(e) {
			e.stopPropagation();
			this._moving = true;

			var _get2 = this.get(),
			    value = _get2.value,
			    hasTooltip = _get2.hasTooltip;

			this._startX = e.clientY;
			this._start = parseFloat(value);
			if (hasTooltip) {
				this.refs.tooltip.style.display = 'block';
			}
		},
		move: function move(e) {
			var _this = this;

			if (this._moving) {
				setTimeout(function () {
					e.stopPropagation();
					document.body.style.cursor = 'pointer';

					var _get3 = _this.get(),
					    min = _get3.min,
					    max = _get3.max,
					    step = _get3.step;

					var a = parseFloat(min);
					var z = parseFloat(max);
					var s = parseFloat(step);
					var d = (e.clientY - _this._startX) * _this._ratio;
					if (s > 0) {
						d = Math.floor(d / s) * s;
					}
					var value = _this._start + d;
					if (!isNaN(z) && !isNaN(a) && a <= value && value <= z) {
						_this.set({ value: value });
					}
				}, TIMEOUT$1);
			}
		},
		stop: function stop(e) {
			e.stopPropagation();
			this._moving = false;

			var _get4 = this.get(),
			    hasTooltip = _get4.hasTooltip;

			document.body.style.cursor = 'initial';
			if (hasTooltip) {
				this.refs.tooltip.style.display = 'none';
			}
		},
		_getRatio: function _getRatio(min, max) {
			var a = parseFloat(min);
			var z = parseFloat(max);
			if (!isNaN(a) && !isNaN(z)) {
				var _refs$bar$getBounding = this.refs.bar.getBoundingClientRect(),
				    height = _refs$bar$getBounding.height;

				return (z - a) / height;
			} else {
				return NaN;
			}
		},
		_updateDom: function _updateDom(min, max, value, ratio) {
			var a = parseFloat(min);
			var z = parseFloat(max);
			var v = parseFloat(value);
			if (!isNaN(a) && !isNaN(z) && !isNaN(v) && a <= v && v <= z) {
				this.refs.tick.style.top = v / ratio + 'px';
			}
		}
	};

	function oncreate$7() {
		var _get5 = this.get(),
		    min = _get5.min,
		    max = _get5.max;

		this._ratio = this._getRatio(min, max);
	}
	function onupdate$1(_ref2) {
		var changed = _ref2.changed,
		    current = _ref2.current,
		    previous = _ref2.previous;

		if (changed.value) {
			var value = parseFloat(current.value);
			if (!isNaN(value)) {
				var _get6 = this.get(),
				    min = _get6.min,
				    max = _get6.max;

				this._updateDom(min, max, value, this._ratio);
			}
		}
	}
	function create_main_fragment$k(component, ctx) {
		var div2,
		    slot_content_default = component._slotted.default,
		    slot_content_default_after,
		    text,
		    div1,
		    div0;

		function onwindowmouseup(event) {
			component.stop(event);	}
		window.addEventListener("mouseup", onwindowmouseup);

		function onwindowmousemove(event) {
			component.move(event);	}
		window.addEventListener("mousemove", onwindowmousemove);

		var if_block = ctx.hasTooltip && create_if_block$9(component, ctx);

		function mousedown_handler(event) {
			component.start(event);
		}

		function click_handler(event) {
			component.click(event);
		}

		return {
			c: function c() {
				div2 = createElement("div");
				text = createText("\r\n    ");
				div1 = createElement("div");
				div0 = createElement("div");
				if (if_block) if_block.c();
				addListener(div0, "mousedown", mousedown_handler);
				div0.className = "vslider-tick";
				addListener(div1, "click", click_handler);
				div1.className = "vslider-bar";
				div2.className = "vslider";
			},
			m: function m(target, anchor) {
				insert(target, div2, anchor);

				if (slot_content_default) {
					append(div2, slot_content_default);
					append(div2, slot_content_default_after || (slot_content_default_after = createComment()));
				}

				append(div2, text);
				append(div2, div1);
				append(div1, div0);
				if (if_block) if_block.m(div0, null);
				component.refs.tick = div0;
				component.refs.bar = div1;
				component.refs.slider = div2;
			},
			p: function p(changed, ctx) {
				if (ctx.hasTooltip) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$9(component, ctx);
						if_block.c();
						if_block.m(div0, null);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			d: function d(detach) {
				window.removeEventListener("mouseup", onwindowmouseup);

				window.removeEventListener("mousemove", onwindowmousemove);

				if (detach) {
					detachNode(div2);
				}

				if (slot_content_default) {
					reinsertBefore(slot_content_default_after, slot_content_default);
				}

				if (if_block) if_block.d();
				removeListener(div0, "mousedown", mousedown_handler);
				if (component.refs.tick === div0) component.refs.tick = null;
				removeListener(div1, "click", click_handler);
				if (component.refs.bar === div1) component.refs.bar = null;
				if (component.refs.slider === div2) component.refs.slider = null;
			}
		};
	}

	// (6:12) {#if hasTooltip}
	function create_if_block$9(component, ctx) {
		var div,
		    text_value = ctx.parseFloat(ctx.value).toFixed(),
		    text;

		return {
			c: function c() {
				div = createElement("div");
				text = createText(text_value);
				div.className = "vslider-tooltip";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(div, text);
				component.refs.tooltip = div;
			},
			p: function p(changed, ctx) {
				if ((changed.parseFloat || changed.value) && text_value !== (text_value = ctx.parseFloat(ctx.value).toFixed())) {
					setData(text, text_value);
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (component.refs.tooltip === div) component.refs.tooltip = null;
			}
		};
	}

	function VSlider(options) {
		var _this2 = this;

		init(this, options);
		this.refs = {};
		this._state = assign(assign({ parseFloat: parseFloat }, data$l()), options.data);

		this._recompute({ tooltip: 1 }, this._state);
		this._intro = true;
		this._handlers.update = [onupdate$1];

		this._slotted = options.slots || {};

		this._fragment = create_main_fragment$k(this, this._state);

		this.root._oncreate.push(function () {
			oncreate$7.call(_this2);
			_this2.fire("update", { changed: assignTrue({}, _this2._state), current: _this2._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(VSlider.prototype, proto$4);
	assign(VSlider.prototype, methods$i);

	VSlider.prototype._recompute = function _recompute(changed, state) {
		if (changed.tooltip) {
			if (this._differs(state.hasTooltip, state.hasTooltip = hasTooltip$1(state))) changed.hasTooltip = true;
		}
	};

	/* node_modules\scanex-color-picker\src\Slider\Slider.html generated by Svelte v2.16.1 */

	function data$m() {
		return { HSlider: HSlider, VSlider: VSlider };
	}
	function create_main_fragment$l(component, ctx) {
		var slot_content_default = component._slotted.default,
		    switch_instance_updating = {},
		    switch_instance_anchor;

		var switch_value = ctx.orientation === 'horizontal' ? ctx.HSlider : ctx.VSlider;

		function switch_props(ctx) {
			var switch_instance_initial_data = {};
			if (ctx.min !== void 0) {
				switch_instance_initial_data.min = ctx.min;
				switch_instance_updating.min = true;
			}
			if (ctx.max !== void 0) {
				switch_instance_initial_data.max = ctx.max;
				switch_instance_updating.max = true;
			}
			if (ctx.value !== void 0) {
				switch_instance_initial_data.value = ctx.value;
				switch_instance_updating.value = true;
			}
			if (ctx.step !== void 0) {
				switch_instance_initial_data.step = ctx.step;
				switch_instance_updating.step = true;
			}
			if (ctx.tooltip !== void 0) {
				switch_instance_initial_data.tooltip = ctx.tooltip;
				switch_instance_updating.tooltip = true;
			}
			return {
				root: component.root,
				store: component.store,
				slots: { default: createFragment() },
				data: switch_instance_initial_data,
				_bind: function _bind(changed, childState) {
					var newState = {};
					if (!switch_instance_updating.min && changed.min) {
						newState.min = childState.min;
					}

					if (!switch_instance_updating.max && changed.max) {
						newState.max = childState.max;
					}

					if (!switch_instance_updating.value && changed.value) {
						newState.value = childState.value;
					}

					if (!switch_instance_updating.step && changed.step) {
						newState.step = childState.step;
					}

					if (!switch_instance_updating.tooltip && changed.tooltip) {
						newState.tooltip = childState.tooltip;
					}
					component._set(newState);
					switch_instance_updating = {};
				}
			};
		}

		if (switch_value) {
			var switch_instance = new switch_value(switch_props(ctx));

			component.root._beforecreate.push(function () {
				switch_instance._bind({ min: 1, max: 1, value: 1, step: 1, tooltip: 1 }, switch_instance.get());
			});
		}

		return {
			c: function c() {
				if (switch_instance) switch_instance._fragment.c();
				switch_instance_anchor = createComment();
			},
			m: function m(target, anchor) {
				if (slot_content_default) {
					append(switch_instance._slotted.default, slot_content_default);
				}

				if (switch_instance) {
					switch_instance._mount(target, anchor);
				}

				insert(target, switch_instance_anchor, anchor);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				var switch_instance_changes = {};
				if (!switch_instance_updating.min && changed.min) {
					switch_instance_changes.min = ctx.min;
					switch_instance_updating.min = ctx.min !== void 0;
				}
				if (!switch_instance_updating.max && changed.max) {
					switch_instance_changes.max = ctx.max;
					switch_instance_updating.max = ctx.max !== void 0;
				}
				if (!switch_instance_updating.value && changed.value) {
					switch_instance_changes.value = ctx.value;
					switch_instance_updating.value = ctx.value !== void 0;
				}
				if (!switch_instance_updating.step && changed.step) {
					switch_instance_changes.step = ctx.step;
					switch_instance_updating.step = ctx.step !== void 0;
				}
				if (!switch_instance_updating.tooltip && changed.tooltip) {
					switch_instance_changes.tooltip = ctx.tooltip;
					switch_instance_updating.tooltip = ctx.tooltip !== void 0;
				}

				if (switch_value !== (switch_value = ctx.orientation === 'horizontal' ? ctx.HSlider : ctx.VSlider)) {
					if (switch_instance) {
						switch_instance.destroy();
					}

					if (switch_value) {
						switch_instance = new switch_value(switch_props(ctx));

						component.root._beforecreate.push(function () {
							var changed = {};
							if (ctx.min === void 0) changed.min = 1;
							if (ctx.max === void 0) changed.max = 1;
							if (ctx.value === void 0) changed.value = 1;
							if (ctx.step === void 0) changed.step = 1;
							if (ctx.tooltip === void 0) changed.tooltip = 1;
							switch_instance._bind(changed, switch_instance.get());
						});
						switch_instance._fragment.c();

						slot.m(switch_instance._slotted.default, null);
						switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					switch_instance._set(switch_instance_changes);
					switch_instance_updating = {};
				}
			},
			d: function d(detach) {
				if (slot_content_default) {
					reinsertChildren(switch_instance._slotted.default, slot_content_default);
				}

				if (detach) {
					detachNode(switch_instance_anchor);
				}

				if (switch_instance) switch_instance.destroy(detach);
			}
		};
	}

	function Slider(options) {
		init(this, options);
		this._state = assign(data$m(), options.data);
		this._intro = true;

		this._slotted = options.slots || {};

		this._fragment = create_main_fragment$l(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(Slider.prototype, proto$4);

	/* node_modules\scanex-color-picker\src\AlphaSlider\AlphaSlider.html generated by Svelte v2.16.1 */

	function data$n() {
		return {
			order: 'asc',
			alpha: 100,
			hue: 0,
			saturation: 1.0,
			lightness: 0.5
		};
	}
	var methods$j = {};

	function onupdate$2(_ref) {
		var changed = _ref.changed,
		    current = _ref.current,
		    previous = _ref.previous;

		if (changed.hue || changed.saturation || changed.lightness) {
			var _hsl2rgb = hsl2rgb(current.hue, current.saturation, current.lightness),
			    r = _hsl2rgb.r,
			    g = _hsl2rgb.g,
			    b = _hsl2rgb.b;

			var ctx = this.refs.alpha.getContext('2d');
			var imgData = ctx.getImageData(0, 0, this.refs.alpha.width, this.refs.alpha.height);
			var _data = imgData.data,
			    width = imgData.width,
			    height = imgData.height;

			for (var i = 0, j = 0, k = 0; i < _data.length; i += 4, ++j) {
				if (j >= width) {
					++k;
					j = 0;
				}
				var a = k / height;

				var _get = this.get(),
				    order = _get.order;

				a = order === 'desc' ? 1.0 - a : a;
				_data[i + 0] = r;
				_data[i + 1] = g;
				_data[i + 2] = b;
				_data[i + 3] = Math.round(255 * a);
			}
			ctx.putImageData(imgData, 0, 0);
		}
	}
	function create_main_fragment$m(component, ctx) {
		var div,
		    canvas,
		    slider_updating = {};

		var slider_initial_data = {
			orientation: "vertical",
			tooltip: "true",
			min: "0",
			max: "100",
			high: "0",
			step: "0"
		};
		if (ctx.alpha !== void 0) {
			slider_initial_data.value = ctx.alpha;
			slider_updating.value = true;
		}
		var slider = new Slider({
			root: component.root,
			store: component.store,
			slots: { default: createFragment() },
			data: slider_initial_data,
			_bind: function _bind(changed, childState) {
				var newState = {};
				if (!slider_updating.value && changed.value) {
					newState.alpha = childState.value;
				}
				component._set(newState);
				slider_updating = {};
			}
		});

		component.root._beforecreate.push(function () {
			slider._bind({ value: 1 }, slider.get());
		});

		component.refs.slider = slider;

		return {
			c: function c() {
				div = createElement("div");
				canvas = createElement("canvas");
				slider._fragment.c();
				div.className = "alpha-slider";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(slider._slotted.default, canvas);
				component.refs.alpha = canvas;
				slider._mount(div, null);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				var slider_changes = {};
				if (!slider_updating.value && changed.alpha) {
					slider_changes.value = ctx.alpha;
					slider_updating.value = ctx.alpha !== void 0;
				}
				slider._set(slider_changes);
				slider_updating = {};
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (component.refs.alpha === canvas) component.refs.alpha = null;
				slider.destroy();
				if (component.refs.slider === slider) component.refs.slider = null;
			}
		};
	}

	function AlphaSlider(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$n(), options.data);
		this._intro = true;
		this._handlers.update = [onupdate$2];

		this._fragment = create_main_fragment$m(this, this._state);

		this.root._oncreate.push(function () {
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(AlphaSlider.prototype, proto$4);
	assign(AlphaSlider.prototype, methods$j);

	/* node_modules\scanex-color-picker\src\ColorArea\ColorArea.html generated by Svelte v2.16.1 */

	var TIMEOUT$2 = 70;
	function data$o() {
	    return {
	        hue: 0,
	        saturation: 1.0,
	        lightness: 0.5
	    };
	}
	var methods$k = {
	    click: function click(e) {
	        e.stopPropagation();

	        var _refs$canvas$getBound = this.refs.canvas.getBoundingClientRect(),
	            left = _refs$canvas$getBound.left,
	            top = _refs$canvas$getBound.top;

	        var x = e.clientX - left;
	        var y = e.clientY - top;
	        var saturation = 1 - x / this._width;
	        var lightness = 1 - y / this._height;
	        this.set({ saturation: saturation, lightness: lightness });
	    },
	    start: function start(e) {
	        e.stopPropagation();
	        this._offsetX = e.offsetX;
	        this._offsetY = e.offsetY;
	        this._moving = true;
	    },
	    move: function move(e) {
	        if (this._moving) {
	            e.stopPropagation();
	            document.body.style.cursor = 'pointer';

	            var _refs$canvas$getBound2 = this.refs.canvas.getBoundingClientRect(),
	                left = _refs$canvas$getBound2.left,
	                top = _refs$canvas$getBound2.top;
	            // handle x


	            var x = e.clientX - this._offsetX + this._halfWidth - left;
	            if (x < 0) {
	                x = 0;
	            } else if (x > this._width) {
	                x = this._width;
	            }
	            // handle y
	            var y = e.clientY - this._offsetY + this._halfHeight - top;
	            if (y < 0) {
	                y = 0;
	            } else if (y > this._height) {
	                y = this._height;
	            }
	            var saturation = 1 - x / this._width;
	            var lightness = 1 - y / this._height;

	            this.set({ saturation: saturation, lightness: lightness });
	        }
	    },
	    stop: function stop(e) {
	        if (this._moving) {
	            e.stopPropagation();
	            document.body.style.cursor = 'initial';
	            this._offsetX = 0;
	            this._offsetY = 0;
	            this._moving = false;
	        }
	    }
	};

	function oncreate$8() {
	    var samplerRect = this.refs.sampler.getBoundingClientRect();
	    this._halfWidth = samplerRect.width / 2;
	    this._halfHeight = samplerRect.height / 2;
	    this._width = this.refs.canvas.clientWidth;
	    this._height = this.refs.canvas.clientHeight;
	    this._moving = false;
	    this._offsetX = 0;
	    this._offsetY = 0;
	}
	function onupdate$3(_ref) {
	    var _this = this;

	    var changed = _ref.changed,
	        current = _ref.current,
	        previous = _ref.previous;

	    setTimeout(function () {
	        if (changed.saturation) {
	            var s = current.saturation;
	            _this.refs.sampler.style.left = Math.round((1 - s) * _this._width) + 'px';
	        }
	        if (changed.lightness) {
	            var l = current.lightness;
	            _this.refs.sampler.style.top = Math.round((1 - l) * _this._height) + 'px';

	            var _hsl2rgb = hsl2rgb(0, 0, 1 - l),
	                r = _hsl2rgb.r,
	                g = _hsl2rgb.g,
	                b = _hsl2rgb.b;

	            _this.refs.sampler.style.borderColor = 'rgb(' + [r, g, b].join(',') + ')';
	        }
	        if (changed.hue) {
	            var _get = _this.get(),
	                saturation = _get.saturation,
	                lightness = _get.lightness;
	            var h = current.hue;
	            var ctx = _this.refs.canvas.getContext('2d');
	            var imgData = ctx.getImageData(0, 0, _this.refs.canvas.width, _this.refs.canvas.height);
	            var _data = imgData.data,
	                width = imgData.width,
	                height = imgData.height;
	            // let buff = new ArrayBuffer(width * height * 4);
	            // let data = new DataView(buff);                    

	            var k = 0;
	            // let data = new Uint8ClampedArray(width * height * 4);
	            // let data = new Uint8Array(width * height * 4);
	            // let data = imgData.data;
	            for (var i = height - 1; i >= 0; --i) {
	                for (var j = width - 1; j >= 0; --j) {
	                    var _s2 = j / width;
	                    var _l2 = i / height;

	                    var _hsl2rgb2 = hsl2rgb(h, _s2, _l2),
	                        _r = _hsl2rgb2.r,
	                        _g = _hsl2rgb2.g,
	                        _b = _hsl2rgb2.b;

	                    _data[k + 0] = _r;
	                    _data[k + 1] = _g;
	                    _data[k + 2] = _b;
	                    _data[k + 3] = 255;
	                    // data.setUint8(k + 0, r);
	                    // data.setUint8(k + 1, g);
	                    // data.setUint8(k + 2, b);
	                    // data.setUint8(k + 3, Math.round (a * 255));
	                    k += 4;
	                }
	            }
	            // imgData.data.set(data);
	            ctx.putImageData(imgData, 0, 0);
	        }
	    }, TIMEOUT$2);
	}
	function create_main_fragment$n(component, ctx) {
	    var div1, canvas, text, div0;

	    function onwindowmousemove(event) {
	        component.move(event);    }
	    window.addEventListener("mousemove", onwindowmousemove);

	    function onwindowmouseup(event) {
	        component.stop(event);    }
	    window.addEventListener("mouseup", onwindowmouseup);

	    function click_handler(event) {
	        component.click(event);
	    }

	    function mousedown_handler(event) {
	        component.start(event);
	    }

	    return {
	        c: function c() {
	            div1 = createElement("div");
	            canvas = createElement("canvas");
	            text = createText("\r\n    ");
	            div0 = createElement("div");
	            addListener(canvas, "click", click_handler);
	            addListener(div0, "mousedown", mousedown_handler);
	            div0.className = "sampler";
	            div1.className = "color-area";
	        },
	        m: function m(target, anchor) {
	            insert(target, div1, anchor);
	            append(div1, canvas);
	            component.refs.canvas = canvas;
	            append(div1, text);
	            append(div1, div0);
	            component.refs.sampler = div0;
	            component.refs.container = div1;
	        },


	        p: noop,

	        d: function d(detach) {
	            window.removeEventListener("mousemove", onwindowmousemove);

	            window.removeEventListener("mouseup", onwindowmouseup);

	            if (detach) {
	                detachNode(div1);
	            }

	            removeListener(canvas, "click", click_handler);
	            if (component.refs.canvas === canvas) component.refs.canvas = null;
	            removeListener(div0, "mousedown", mousedown_handler);
	            if (component.refs.sampler === div0) component.refs.sampler = null;
	            if (component.refs.container === div1) component.refs.container = null;
	        }
	    };
	}

	function ColorArea(options) {
	    var _this2 = this;

	    init(this, options);
	    this.refs = {};
	    this._state = assign(data$o(), options.data);
	    this._intro = true;
	    this._handlers.update = [onupdate$3];

	    this._fragment = create_main_fragment$n(this, this._state);

	    this.root._oncreate.push(function () {
	        oncreate$8.call(_this2);
	        _this2.fire("update", { changed: assignTrue({}, _this2._state), current: _this2._state });
	    });

	    if (options.target) {
	        this._fragment.c();
	        this._mount(options.target, options.anchor);

	        flush(this);
	    }
	}

	assign(ColorArea.prototype, proto$4);
	assign(ColorArea.prototype, methods$k);

	/* node_modules\scanex-color-picker\src\ColorSlider\ColorSlider.html generated by Svelte v2.16.1 */

	function data$p() {
		return { hue: 0 };
	}
	function onupdate$4() {
		var ctx = this.refs.color.getContext('2d');
		var imgData = ctx.createImageData(this.refs.color.width, this.refs.color.height);
		var data = imgData.data,
		    width = imgData.width;

		for (var i = 0; i < data.length; i += 4) {
			var h = i / 4 % width * 360 / width;

			var _hsl2rgb = hsl2rgb(h, this.constructor.SATURATION, this.constructor.LIGHTNESS),
			    r = _hsl2rgb.r,
			    g = _hsl2rgb.g,
			    b = _hsl2rgb.b;

			data[i + 0] = r;
			data[i + 1] = g;
			data[i + 2] = b;
			data[i + 3] = this.constructor.ALPHA;
		}
		ctx.putImageData(imgData, 0, 0);
	}
	function setup(Component) {
		Component.SATURATION = 1.0;
		Component.LIGHTNESS = 0.5;
		Component.ALPHA = 255;
	}
	function create_main_fragment$o(component, ctx) {
		var div,
		    canvas,
		    slider_updating = {};

		var slider_initial_data = {
			orientation: "horizontal",
			tooltip: "false",
			min: "0",
			max: "360",
			high: "0",
			step: "0"
		};
		if (ctx.hue !== void 0) {
			slider_initial_data.value = ctx.hue;
			slider_updating.value = true;
		}
		var slider = new Slider({
			root: component.root,
			store: component.store,
			slots: { default: createFragment() },
			data: slider_initial_data,
			_bind: function _bind(changed, childState) {
				var newState = {};
				if (!slider_updating.value && changed.value) {
					newState.hue = childState.value;
				}
				component._set(newState);
				slider_updating = {};
			}
		});

		component.root._beforecreate.push(function () {
			slider._bind({ value: 1 }, slider.get());
		});

		component.refs.slider = slider;

		return {
			c: function c() {
				div = createElement("div");
				canvas = createElement("canvas");
				slider._fragment.c();
				div.className = "color-slider";
			},
			m: function m(target, anchor) {
				insert(target, div, anchor);
				append(slider._slotted.default, canvas);
				component.refs.color = canvas;
				slider._mount(div, null);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				var slider_changes = {};
				if (!slider_updating.value && changed.hue) {
					slider_changes.value = ctx.hue;
					slider_updating.value = ctx.hue !== void 0;
				}
				slider._set(slider_changes);
				slider_updating = {};
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (component.refs.color === canvas) component.refs.color = null;
				slider.destroy();
				if (component.refs.slider === slider) component.refs.slider = null;
			}
		};
	}

	function ColorSlider(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$p(), options.data);
		this._intro = true;
		this._handlers.update = [onupdate$4];

		this._fragment = create_main_fragment$o(this, this._state);

		this.root._oncreate.push(function () {
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(ColorSlider.prototype, proto$4);

	setup(ColorSlider);

	/* node_modules\scanex-color-picker\src\ColorPicker\ColorPicker.html generated by Svelte v2.16.1 */

	function value(_ref) {
		var mode = _ref.mode,
		    hex = _ref.hex,
		    rgb = _ref.rgb;

		return mode === 'hex' ? hex : rgb;
	}

	function hex$2(_ref2) {
		var hue = _ref2.hue,
		    saturation = _ref2.saturation,
		    lightness = _ref2.lightness;

		var _hsl2rgb = hsl2rgb(hue, saturation, lightness),
		    r = _hsl2rgb.r,
		    g = _hsl2rgb.g,
		    b = _hsl2rgb.b;

		return rgb2hex(r, g, b);
	}

	function rgb(_ref3) {
		var hue = _ref3.hue,
		    saturation = _ref3.saturation,
		    lightness = _ref3.lightness;

		var _hsl2rgb2 = hsl2rgb(hue, saturation, lightness),
		    r = _hsl2rgb2.r,
		    g = _hsl2rgb2.g,
		    b = _hsl2rgb2.b;

		return [r, g, b].join(',');
	}

	function rgba(_ref4) {
		var hue = _ref4.hue,
		    saturation = _ref4.saturation,
		    lightness = _ref4.lightness,
		    alpha = _ref4.alpha;

		var _hsl2rgb3 = hsl2rgb(hue, saturation, lightness),
		    r = _hsl2rgb3.r,
		    g = _hsl2rgb3.g,
		    b = _hsl2rgb3.b;

		var a = alpha / 100;
		return 'rgba(' + [r, g, b, a].join(',') + ')';
	}

	function data$q() {
		return {
			mode: 'hex',
			alpha: 100,
			hue: 0,
			saturation: 1.0,
			lightness: 0.5
		};
	}
	var methods$l = {
		prevent: function prevent(e) {
			e.stopPropagation();
			e.preventDefault();
		},
		change: function change(_ref5) {
			var value = _ref5.target.value;

			var _get = this.get(),
			    mode = _get.mode;

			var _r$g$b = { r: 0, g: 0, b: 0 },
			    r = _r$g$b.r,
			    g = _r$g$b.g,
			    b = _r$g$b.b;

			if (mode === 'hex') {
				var _hex2rgb = hex2rgb(value),
				    r = _hex2rgb.r,
				    g = _hex2rgb.g,
				    b = _hex2rgb.b;
			} else if (mode === 'rgb') {
				var _value$split$map = value.split(',').map(function (x) {
					return parseInt(x, 10);
				}),
				    _value$split$map2 = slicedToArray(_value$split$map, 3),
				    r = _value$split$map2[0],
				    g = _value$split$map2[1],
				    b = _value$split$map2[2];
			}

			var _rgb2hsl = rgb2hsl(r, g, b),
			    h = _rgb2hsl.h,
			    s = _rgb2hsl.s,
			    l = _rgb2hsl.l;

			this.set({ hue: h, saturation: s, lightness: l });
		},
		keydown: function keydown(e) {
			if (e.keyCode === 13) {
				this.change(this.refs.box.value);
			}
		}
	};

	function onupdate$5(_ref6) {
		var changed = _ref6.changed,
		    current = _ref6.current;

		if (changed.rgba) {
			this.refs.sample.style.backgroundColor = current.rgba;
		}
		if (changed.value) {
			this.refs.box.value = current.value;
		}
	}
	function create_main_fragment$p(component, ctx) {
		var table,
		    tr0,
		    td0,
		    span0,
		    text0,
		    td1,
		    span1,
		    text1,
		    text2,
		    input,
		    text3,
		    td2,
		    span2,
		    text4,
		    td3,
		    text5,
		    tr1,
		    td4,
		    colorarea_updating = {},
		    text6,
		    td5,
		    alphaslider_updating = {},
		    text7,
		    tr2,
		    td6,
		    colorslider_updating = {},
		    text8,
		    td7;

		function change_handler(event) {
			component.change(event);
		}

		function click_handler(event) {
			component.set({ mode: ctx.mode === 'hex' ? 'rgb' : 'hex' });
		}

		var colorarea_initial_data = {};
		if (ctx.hue !== void 0) {
			colorarea_initial_data.hue = ctx.hue;
			colorarea_updating.hue = true;
		}
		if (ctx.saturation !== void 0) {
			colorarea_initial_data.saturation = ctx.saturation;
			colorarea_updating.saturation = true;
		}
		if (ctx.lightness !== void 0) {
			colorarea_initial_data.lightness = ctx.lightness;
			colorarea_updating.lightness = true;
		}
		var colorarea = new ColorArea({
			root: component.root,
			store: component.store,
			data: colorarea_initial_data,
			_bind: function _bind(changed, childState) {
				var newState = {};
				if (!colorarea_updating.hue && changed.hue) {
					newState.hue = childState.hue;
				}

				if (!colorarea_updating.saturation && changed.saturation) {
					newState.saturation = childState.saturation;
				}

				if (!colorarea_updating.lightness && changed.lightness) {
					newState.lightness = childState.lightness;
				}
				component._set(newState);
				colorarea_updating = {};
			}
		});

		component.root._beforecreate.push(function () {
			colorarea._bind({ hue: 1, saturation: 1, lightness: 1 }, colorarea.get());
		});

		var alphaslider_initial_data = {};
		if (ctx.alpha !== void 0) {
			alphaslider_initial_data.alpha = ctx.alpha;
			alphaslider_updating.alpha = true;
		}
		if (ctx.hue !== void 0) {
			alphaslider_initial_data.hue = ctx.hue;
			alphaslider_updating.hue = true;
		}
		if (ctx.saturation !== void 0) {
			alphaslider_initial_data.saturation = ctx.saturation;
			alphaslider_updating.saturation = true;
		}
		if (ctx.lightness !== void 0) {
			alphaslider_initial_data.lightness = ctx.lightness;
			alphaslider_updating.lightness = true;
		}
		var alphaslider = new AlphaSlider({
			root: component.root,
			store: component.store,
			data: alphaslider_initial_data,
			_bind: function _bind(changed, childState) {
				var newState = {};
				if (!alphaslider_updating.alpha && changed.alpha) {
					newState.alpha = childState.alpha;
				}

				if (!alphaslider_updating.hue && changed.hue) {
					newState.hue = childState.hue;
				}

				if (!alphaslider_updating.saturation && changed.saturation) {
					newState.saturation = childState.saturation;
				}

				if (!alphaslider_updating.lightness && changed.lightness) {
					newState.lightness = childState.lightness;
				}
				component._set(newState);
				alphaslider_updating = {};
			}
		});

		component.root._beforecreate.push(function () {
			alphaslider._bind({ alpha: 1, hue: 1, saturation: 1, lightness: 1 }, alphaslider.get());
		});

		var colorslider_initial_data = {};
		if (ctx.hue !== void 0) {
			colorslider_initial_data.hue = ctx.hue;
			colorslider_updating.hue = true;
		}
		var colorslider = new ColorSlider({
			root: component.root,
			store: component.store,
			data: colorslider_initial_data,
			_bind: function _bind(changed, childState) {
				var newState = {};
				if (!colorslider_updating.hue && changed.hue) {
					newState.hue = childState.hue;
				}
				component._set(newState);
				colorslider_updating = {};
			}
		});

		component.root._beforecreate.push(function () {
			colorslider._bind({ hue: 1 }, colorslider.get());
		});

		function click_handler_1(event) {
			component.prevent(event);
		}

		function dragstart_handler(event) {
			component.prevent(event);
		}

		return {
			c: function c() {
				table = createElement("table");
				tr0 = createElement("tr");
				td0 = createElement("td");
				span0 = createElement("span");
				text0 = createText("\r\n        ");
				td1 = createElement("td");
				span1 = createElement("span");
				text1 = createText(ctx.mode);
				text2 = createText("\r\n            ");
				input = createElement("input");
				text3 = createText("\r\n        ");
				td2 = createElement("td");
				span2 = createElement("span");
				text4 = createText("\r\n        ");
				td3 = createElement("td");
				text5 = createText("\r\n    ");
				tr1 = createElement("tr");
				td4 = createElement("td");
				colorarea._fragment.c();
				text6 = createText("\r\n        ");
				td5 = createElement("td");
				alphaslider._fragment.c();
				text7 = createText("\r\n    ");
				tr2 = createElement("tr");
				td6 = createElement("td");
				colorslider._fragment.c();
				text8 = createText("\r\n        ");
				td7 = createElement("td");
				span0.className = "color-picker-sample";
				span1.className = "color-picker-mode";
				addListener(input, "change", change_handler);
				setAttribute(input, "type", "text");
				input.className = "color-picker-box";
				addListener(span2, "click", click_handler);
				span2.className = "color-picker-box-button";
				td4.colSpan = "3";
				td4.className = "color-area-container";
				td5.className = "alpha-slider-container";
				td6.colSpan = "3";
				td6.className = "color-slider-container";
				addListener(table, "click", click_handler_1);
				addListener(table, "dragstart", dragstart_handler);
				table.className = "color-picker";
			},
			m: function m(target, anchor) {
				insert(target, table, anchor);
				append(table, tr0);
				append(tr0, td0);
				append(td0, span0);
				component.refs.sample = span0;
				append(tr0, text0);
				append(tr0, td1);
				append(td1, span1);
				append(span1, text1);
				append(td1, text2);
				append(td1, input);
				component.refs.box = input;
				append(tr0, text3);
				append(tr0, td2);
				append(td2, span2);
				append(tr0, text4);
				append(tr0, td3);
				append(table, text5);
				append(table, tr1);
				append(tr1, td4);
				colorarea._mount(td4, null);
				append(tr1, text6);
				append(tr1, td5);
				alphaslider._mount(td5, null);
				append(table, text7);
				append(table, tr2);
				append(tr2, td6);
				colorslider._mount(td6, null);
				append(tr2, text8);
				append(tr2, td7);
			},
			p: function p(changed, _ctx) {
				ctx = _ctx;
				if (changed.mode) {
					setData(text1, ctx.mode);
				}

				var colorarea_changes = {};
				if (!colorarea_updating.hue && changed.hue) {
					colorarea_changes.hue = ctx.hue;
					colorarea_updating.hue = ctx.hue !== void 0;
				}
				if (!colorarea_updating.saturation && changed.saturation) {
					colorarea_changes.saturation = ctx.saturation;
					colorarea_updating.saturation = ctx.saturation !== void 0;
				}
				if (!colorarea_updating.lightness && changed.lightness) {
					colorarea_changes.lightness = ctx.lightness;
					colorarea_updating.lightness = ctx.lightness !== void 0;
				}
				colorarea._set(colorarea_changes);
				colorarea_updating = {};

				var alphaslider_changes = {};
				if (!alphaslider_updating.alpha && changed.alpha) {
					alphaslider_changes.alpha = ctx.alpha;
					alphaslider_updating.alpha = ctx.alpha !== void 0;
				}
				if (!alphaslider_updating.hue && changed.hue) {
					alphaslider_changes.hue = ctx.hue;
					alphaslider_updating.hue = ctx.hue !== void 0;
				}
				if (!alphaslider_updating.saturation && changed.saturation) {
					alphaslider_changes.saturation = ctx.saturation;
					alphaslider_updating.saturation = ctx.saturation !== void 0;
				}
				if (!alphaslider_updating.lightness && changed.lightness) {
					alphaslider_changes.lightness = ctx.lightness;
					alphaslider_updating.lightness = ctx.lightness !== void 0;
				}
				alphaslider._set(alphaslider_changes);
				alphaslider_updating = {};

				var colorslider_changes = {};
				if (!colorslider_updating.hue && changed.hue) {
					colorslider_changes.hue = ctx.hue;
					colorslider_updating.hue = ctx.hue !== void 0;
				}
				colorslider._set(colorslider_changes);
				colorslider_updating = {};
			},
			d: function d(detach) {
				if (detach) {
					detachNode(table);
				}

				if (component.refs.sample === span0) component.refs.sample = null;
				removeListener(input, "change", change_handler);
				if (component.refs.box === input) component.refs.box = null;
				removeListener(span2, "click", click_handler);
				colorarea.destroy();
				alphaslider.destroy();
				colorslider.destroy();
				removeListener(table, "click", click_handler_1);
				removeListener(table, "dragstart", dragstart_handler);
			}
		};
	}

	function ColorPicker(options) {
		var _this = this;

		init(this, options);
		this.refs = {};
		this._state = assign(data$q(), options.data);

		this._recompute({ hue: 1, saturation: 1, lightness: 1, mode: 1, hex: 1, rgb: 1, alpha: 1 }, this._state);
		this._intro = true;
		this._handlers.update = [onupdate$5];

		this._fragment = create_main_fragment$p(this, this._state);

		this.root._oncreate.push(function () {
			_this.fire("update", { changed: assignTrue({}, _this._state), current: _this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(ColorPicker.prototype, proto$4);
	assign(ColorPicker.prototype, methods$l);

	ColorPicker.prototype._recompute = function _recompute(changed, state) {
		if (changed.hue || changed.saturation || changed.lightness) {
			if (this._differs(state.hex, state.hex = hex$2(state))) changed.hex = true;
			if (this._differs(state.rgb, state.rgb = rgb(state))) changed.rgb = true;
		}

		if (changed.mode || changed.hex || changed.rgb) {
			if (this._differs(state.value, state.value = value(state))) changed.value = true;
		}

		if (changed.hue || changed.saturation || changed.lightness || changed.alpha) {
			if (this._differs(state.rgba, state.rgba = rgba(state))) changed.rgba = true;
		}
	};

	function get_area_text(area) {
	    var sq = '<span class="square">2</span>';
	    if (area < 10e+5) {
	        return Math.round(area).toFixed(0) + ' ' + Translations$2.getText('units.m') + sq;
	    } else {
	        return Math.round(area / 10e+5).toFixed(0) + ' ' + Translations$2.getText('units.km') + sq;
	    }
	}

	var DrawnObjects = function (_EventTarget) {
	    inherits(DrawnObjects, _EventTarget);

	    function DrawnObjects(container, _ref) {
	        var _ref$color = _ref.color,
	            color = _ref$color === undefined ? '#0000FF' : _ref$color;
	        classCallCheck(this, DrawnObjects);

	        var _this = possibleConstructorReturn(this, (DrawnObjects.__proto__ || Object.getPrototypeOf(DrawnObjects)).call(this));

	        _this._commonVisible = true;

	        _this._count = 0;
	        _this._container = container;
	        _this._container.style.display = 'none';
	        _this._container.innerHTML = '<div class="drawn-objects">\n                <div class="drawn-objects-header">\n                    <span class="drawn-objects-title">' + Translations$2.getText('objects.title') + '</span>\n                    <span class="drawn-objects-number">0</span>\n                    <span class="drawn-objects-minimize"></span>\n                </div>\n                <div class="drawn-objects-list"></div>\n            </div>';
	        _this._preventDefault = _this._preventDefault.bind(_this);
	        _this._stopPropagation = _this._stopPropagation.bind(_this);
	        _this._container.addEventListener('click', _this._preventDefault);
	        _this._container.addEventListener('click', _this._stopPropagation);
	        _this._container.addEventListener('mousewheel', _this._stopPropagation);
	        _this._toggle = _this._toggle.bind(_this);
	        _this._container.querySelector('.drawn-objects-minimize').addEventListener('click', _this._toggle);

	        _this._onCellClick = _this._onCellClick.bind(_this);
	        _this._onCellEdit = _this._onCellEdit.bind(_this);
	        _this._onColumnClick = _this._onColumnClick.bind(_this);
	        _this._indexBy = 'id';
	        _this._grid = new DataGrid(_this._container.querySelector('.drawn-objects-list'), {
	            indexBy: _this._indexBy,
	            fields: {
	                'visible': {
	                    type: 'boolean',
	                    columnIcon: 'drawn-objects-visible',
	                    icon: 'search',
	                    yes: 'search-visibility-off',
	                    no: 'search-visibility-on',
	                    default: true
	                },
	                'color': {
	                    type: 'color',
	                    name: Translations$2.getText('color'),
	                    default: color
	                },
	                'name': {
	                    type: 'string',
	                    name: Translations$2.getText('name'),
	                    edit: 'drawing-edit',
	                    sortable: true
	                },
	                'area': {
	                    type: 'float',
	                    name: Translations$2.getText('area'),
	                    align: 'right',
	                    sortable: true,
	                    default: 0,
	                    formatter: function formatter(item) {
	                        var geoJSON = item.geoJSON;
	                        var g = geoJSON.geometry;
	                        var type = g.type;
	                        var value = item.area;
	                        switch (type.toUpperCase()) {
	                            case "POINT":
	                                return L.gmxUtil.latLonToString(g.coordinates[0], g.coordinates[1], 6);
	                            case "LINESTRING":
	                            case "MULTILINESTRING":
	                                return L.gmxUtil.prettifyDistance(value);
	                            case "MULTIPOLYGON":
	                            case "POLYGON":
	                            default:
	                                return get_area_text(value);
	                        }
	                    }
	                },
	                'delete': {
	                    columnIcon: 'delete-all',
	                    type: 'button',
	                    button: 'search search-delete'
	                }
	            }
	        });
	        _this._grid.addEventListener('cell:click', _this._onCellClick);
	        _this._grid.addEventListener('cell:edit', _this._onCellEdit);
	        _this._grid.addEventListener('column:click', _this._onColumnClick);
	        _this._colorPickerCell = null;
	        _this._onSetColor = _this._onSetColor.bind(_this);

	        _this._colorPickerContainer = createContainer();
	        _this._colorPickerContainer.classList.add('noselect');
	        _this._hideColorPicker = _this._hideColorPicker.bind(_this);
	        _this._colorPicker = new ColorPicker({ target: _this._colorPickerContainer });
	        _this._colorPickerWidget = _this._colorPickerContainer.querySelector('.color-picker');
	        _this._colorPicker.on('change', _this._onSetColor);
	        _this._colorPicker.on('state', function (e) {
	            var _e$current = e.current,
	                current = _e$current === undefined ? {} : _e$current;

	            if (current['hex']) {
	                _this._onSetColor({
	                    detail: {
	                        hex: current['hex']
	                    }
	                });
	            }
	        });
	        document.body.addEventListener('click', _this._hideColorPicker);
	        return _this;
	    }

	    createClass(DrawnObjects, [{
	        key: '_toggle',
	        value: function _toggle(e) {
	            var content = this._container.querySelector('.drawn-objects-list');
	            content.style.display = content.style.display === 'none' ? 'block' : 'none';
	        }
	    }, {
	        key: '_preventDefault',
	        value: function _preventDefault(e) {
	            e.preventDefault();
	        }
	    }, {
	        key: '_stopPropagation',
	        value: function _stopPropagation(e) {
	            e.stopPropagation();
	        }
	    }, {
	        key: '_hideColorPicker',
	        value: function _hideColorPicker(e) {
	            this._colorPickerContainer.style.visibility = 'hidden';
	            this._colorPickerWidget.style.visibility = 'hidden';
	        }
	    }, {
	        key: '_onSetColor',
	        value: function _onSetColor(e) {
	            if (this._colorPickerCell) {
	                var _colorPickerCell = this._colorPickerCell,
	                    item = _colorPickerCell.item,
	                    cell = _colorPickerCell.cell;

	                item.color = e.detail.hex;
	                cell.querySelector('.table-list-color').style.borderColor = e.detail.hex;

	                var event = document.createEvent('Event');
	                event.initEvent('editDrawing', false, false);
	                event.detail = item;
	                this.dispatchEvent(event);
	            }
	        }
	    }, {
	        key: '_onCellClick',
	        value: function _onCellClick(e) {
	            var _e$detail = e.detail,
	                i = _e$detail.i,
	                j = _e$detail.j,
	                row = _e$detail.row,
	                cell = _e$detail.cell,
	                name = _e$detail.name,
	                field = _e$detail.field,
	                item = _e$detail.item;

	            var event = document.createEvent('Event');
	            switch (name) {
	                case 'visible':
	                    // let btn = cell.querySelector('i');
	                    // if (btn.classList.contains('search-visibility-off')) {
	                    //     btn.classList.remove('search-visibility-off');
	                    //     btn.classList.add('search-visibility-on');
	                    //     item.visible = false;
	                    // }
	                    // else {
	                    //     btn.classList.remove('search-visibility-on');
	                    //     btn.classList.add('search-visibility-off');

	                    // }   
	                    item.visible = !item.visible;
	                    var id = item[this._indexBy];
	                    this._grid.redrawRow(id, item);

	                    event.initEvent('toggleDrawing', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);

	                    break;
	                case 'color':
	                    if (item.color) {
	                        this._colorPickerCell = { item: item, cell: cell };

	                        var _cell$getBoundingClie = cell.getBoundingClientRect(),
	                            left = _cell$getBoundingClie.left,
	                            top = _cell$getBoundingClie.top;

	                        var colorPickerRect = this._colorPickerWidget.getBoundingClientRect();

	                        var _hex2rgb = hex2rgb(item.color),
	                            r = _hex2rgb.r,
	                            g = _hex2rgb.g,
	                            b = _hex2rgb.b;

	                        var _rgb2hsl = rgb2hsl(r, g, b),
	                            h = _rgb2hsl.h,
	                            s = _rgb2hsl.s,
	                            l = _rgb2hsl.l;

	                        this._colorPicker.set({ hue: h, saturation: s, lightness: l });
	                        this._colorPickerContainer.style.left = left - colorPickerRect.width - 50 + 'px';
	                        this._colorPickerWidget.style.left = left - colorPickerRect.width - 50 + 'px';
	                        var rect = document.body.getBoundingClientRect();
	                        this._colorPickerContainer.style.top = (top + colorPickerRect.height < rect.bottom ? top : top - colorPickerRect.height + 10) + 'px';
	                        this._colorPickerWidget.style.top = (top + colorPickerRect.height < rect.bottom ? top : top - colorPickerRect.height + 10) + 'px';
	                        this._colorPickerContainer.style.visibility = 'visible';
	                        this._colorPickerWidget.style.visibility = 'visible';
	                    }
	                    break;
	                case 'delete':
	                    event.initEvent('deleteDrawing', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);
	                    break;
	                default:
	                    event.initEvent('zoomToObject', false, false);
	                    event.detail = item;
	                    this.dispatchEvent(event);
	                    break;
	            }
	        }
	    }, {
	        key: '_onCellEdit',
	        value: function _onCellEdit(e) {
	            var item = e.detail.item;

	            var event = document.createEvent('Event');
	            event.initEvent('editDrawing', false, false);
	            event.detail = item;
	            this.dispatchEvent(event);
	        }
	    }, {
	        key: '_onColumnClick',
	        value: function _onColumnClick(e) {
	            var _e$detail2 = e.detail,
	                col = _e$detail2.col,
	                name = _e$detail2.name;

	            var event = document.createEvent('Event');
	            switch (name) {
	                case 'visible':
	                    //let state = !col.querySelector('i').classList.contains('drawn-objects-visible');
	                    var state = !this._commonVisible;
	                    this._commonVisible = state;
	                    this._grid.items.forEach(function (item) {
	                        return item.visible = state;
	                    });
	                    this._grid.refresh();
	                    var btn = this._grid.getCol(name).querySelector('i');
	                    if (state) {
	                        btn.classList.remove('drawn-objects-hidden');
	                        btn.classList.add('drawn-objects-visible');
	                    } else {
	                        btn.classList.add('drawn-objects-hidden');
	                        btn.classList.remove('drawn-objects-visible');
	                    }

	                    event.initEvent('toggleAllDrawings', false, false);
	                    event.detail = state;
	                    this.dispatchEvent(event);
	                    break;
	                case 'delete':
	                    event.initEvent('deleteAllDrawings', false, false);
	                    this.dispatchEvent(event);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'updateCount',
	        value: function updateCount(num) {
	            this._count = parseInt(num, 10);
	            this._container.querySelector('.drawn-objects-number').innerText = num;
	        }
	    }, {
	        key: 'resize',
	        value: function resize(total) {
	            var height = this._container.querySelector('.table-list-header').getBoundingClientRect().height;
	            this._container.querySelector('.table-list-body').style.maxHeight = total - height + 'px';
	        }
	    }, {
	        key: 'redrawItem',
	        value: function redrawItem(id, item) {
	            this._grid.redrawRow(id, item);
	        }
	    }, {
	        key: 'items',
	        set: function set$$1(items) {
	            if (Array.isArray(items) && items.length > 0) {
	                this._container.style.display = 'block';
	                this._grid.items = items;
	                this.updateCount(this._grid.items.length);
	            } else {
	                this._container.style.display = 'none';
	                this._grid.items = [];
	                this.updateCount(0);
	            }
	        },
	        get: function get$$1() {
	            return this._grid.items;
	        }
	    }, {
	        key: 'count',
	        get: function get$$1() {
	            return this._count;
	        }
	    }]);
	    return DrawnObjects;
	}(EventTarget);

	var View$8 = function View(_ref2) {
	    var application = _ref2.application,
	        map = _ref2.map,
	        position = _ref2.position;
	    classCallCheck(this, View);


	    this._application = application;

	    var DrawnObjectsControl = L.Control.extend({
	        includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,

	        // options.position (left|right)
	        initialize: function initialize(options) {
	            L.setOptions(this, options);
	        },

	        onAdd: function onAdd() {
	            this._container = L.DomUtil.create('div', 'drawn-objects-control');
	            this.widget = new DrawnObjects(this._container, {});
	            // L.DomEvent.disableClickPropagation(this._container);
	            // L.DomEvent.disableScrollPropagation(this._container);
	            // L.DomEvent.on(this._container, 'mousemove', L.DomEvent.stopPropagation);
	            return this._container;
	        },

	        onRemove: function onRemove(map) {},

	        resizeDrawings: function resizeDrawings() {

	            var app = application;

	            var _app$getMapContainer$ = app.getMapContainer().getBoundingClientRect(),
	                height = _app$getMapContainer$.height;

	            this.widget.resize(height - 150);
	        }
	    });

	    var drawingView = new DrawnObjectsControl({
	        position: position
	    });

	    map.addControl(drawingView);

	    this._main = drawingView;

	    return drawingView;
	};

	var DrawingObjectsUIElement = function (_BaseUIElement) {
	        inherits(DrawingObjectsUIElement, _BaseUIElement);

	        function DrawingObjectsUIElement() {
	                classCallCheck(this, DrawingObjectsUIElement);
	                return possibleConstructorReturn(this, (DrawingObjectsUIElement.__proto__ || Object.getPrototypeOf(DrawingObjectsUIElement)).apply(this, arguments));
	        }

	        createClass(DrawingObjectsUIElement, [{
	                key: 'init',
	                value: function init() {

	                        var map = this.getMap();
	                        var application = this.getApplication();

	                        this._view = new View$8({
	                                map: map,
	                                application: application,
	                                position: 'topright'
	                        });

	                        this._bindEvents();
	                }
	        }, {
	                key: '_bindEvents',
	                value: function _bindEvents() {

	                        var application = this.getApplication();
	                        var store = application.getStore();
	                        var DrawingController = application.getBridgeController('drawing');
	                        var view = this._view.widget;

	                        store.on('drawings:updateList', this._updateList.bind(this));
	                        store.on('drawings:redrawItem', this._redrawItemOnList.bind(this));

	                        view.addEventListener('editDrawing', function (e) {
	                                return DrawingController.editDrawingOnMapAndList(e);
	                        });
	                        view.addEventListener('zoomToObject', function (e) {
	                                return DrawingController.zoomToDrawingOnMap(e);
	                        });
	                        view.addEventListener('toggleDrawing', function (e) {
	                                var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'row';
	                                return DrawingController.toggleDrawingsOnMapAndList(e, mode);
	                        });
	                        view.addEventListener('toggleAllDrawings', function (e) {
	                                var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
	                                return DrawingController.toggleDrawingsOnMapAndList(e, mode);
	                        });
	                        view.addEventListener('deleteDrawing', function (e) {
	                                var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'row';
	                                return DrawingController.deleteDrawingsOnMapAndList(e, mode);
	                        });
	                        view.addEventListener('deleteAllDrawings', function (e) {
	                                var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
	                                return DrawingController.deleteDrawingsOnMapAndList(e, mode);
	                        });
	                }
	        }, {
	                key: '_updateList',
	                value: function _updateList() {

	                        var application = this.getApplication();
	                        var store = application.getStore();
	                        var data = store.getSerializedData('drawings');

	                        this.getView().widget.items = data;

	                        this._resizeWidget();
	                }
	        }, {
	                key: '_redrawItemOnList',
	                value: function _redrawItemOnList(itemId) {

	                        var application = this.getApplication();
	                        var store = application.getStore();
	                        var view = this.getView();

	                        var itemData = store.getData('drawings', itemId);

	                        view.widget.redrawItem(itemId, itemData);
	                }
	        }, {
	                key: '_resizeWidget',
	                value: function _resizeWidget() {

	                        var view = this.getView();

	                        view.resizeDrawings();
	                }
	        }]);
	        return DrawingObjectsUIElement;
	}(BaseUIElement);

	var application = new Application({

	    //store
	    store: {
	        'name': 'searchStore',
	        'data': [{
	            'key': 'userInfo',
	            'isTable': false
	        }, {
	            'key': 'drawings',
	            'isTable': true,
	            'indexBy': 'id'
	        }, {
	            'key': 'contours',
	            'isTable': true,
	            'indexBy': 'gmx_id'
	        }, {
	            'key': 'downloadCache',
	            'isTable': false
	        }, {
	            'key': 'searchCriteria',
	            'isTable': false,
	            'defaultValue': createDefaultCriteria()
	        }, {
	            'key': 'clientFilter',
	            'isTable': false,
	            'defaultValue': {
	                isChanged: false,
	                filterData: createDefaultFilter()
	            }
	        }, {
	            'key': 'meta',
	            'isTable': false,
	            'defaultValue': {
	                currentTab: null,
	                about: '',
	                cancelLoading: false,
	                updateResults: false,
	                activeIcon: null,
	                activeLayer: null
	            }
	        }]
	    },

	    // bridge controllers
	    bridgeControllers: [{
	        'index': 'drawing',
	        constructor: DrawingBridgeController
	    }, {
	        'index': 'contour',
	        constructor: ContourBridgeController
	    }],

	    // map managers
	    mapManagers: [{
	        'index': 'drawing',
	        constructor: DrawingsMapManager
	    }, {
	        'index': 'contour',
	        constructor: DrawingsMapManager$1
	    }],

	    // addons
	    addons: [{
	        index: 'shapeLoader',
	        constructor: ShapeLoader
	    }, {
	        index: 'appStateManager',
	        constructor: AppStateManager
	    }],

	    // components
	    uiElements: [{
	        type: 'custom',
	        index: 'loadingIndicator',
	        constructor: LoadingIndicatorUIElement
	    }, {
	        type: 'custom',
	        index: 'popupNotificator',
	        constructor: PopupNotificationUIElement
	    }, {
	        type: 'custom',
	        index: 'helpButton',
	        constructor: HelpButtonUIElement
	    }, {
	        type: 'custom',
	        index: 'authInformation',
	        constructor: UserInformationUIElement
	    }, {
	        type: 'custom',
	        index: 'languageSelect',
	        constructor: LangWidgetUIElement
	    }, {
	        type: 'icon',
	        index: 'point',
	        constructor: PointUIElement
	    }, {
	        type: 'icon',
	        index: 'polyline',
	        constructor: PolylineUIElement,
	        mobile: false
	    }, {
	        type: 'icon',
	        index: 'polygon',
	        constructor: PolygonUIElement,
	        mobile: false
	    }, {
	        type: 'icon',
	        index: 'rectangle',
	        constructor: RectangleUIElement,
	        mobile: false
	    }, {
	        type: 'icon',
	        index: 'permalink',
	        constructor: PermalinkUIElement
	    }, {
	        type: 'icon',
	        index: 'boxZoom',
	        constructor: BoxZoomUIElement,
	        mobile: false
	    }, {
	        type: 'icon',
	        index: 'upload',
	        constructor: UploadUIElement
	    }, {
	        type: 'icon',
	        index: 'download',
	        constructor: DownloadUIElement
	    }, {
	        type: 'widget',
	        index: 'baseLayers',
	        constructor: BaseLayersComponent
	    }, {
	        type: 'widget',
	        index: 'zoom',
	        constructor: BaseLayesrUIElement
	    }, {
	        type: 'widget',
	        index: 'drawingObjects',
	        constructor: DrawingObjectsUIElement
	    }, {
	        type: 'widget',
	        index: 'sidebar',
	        constructor: SidebarUIElement
	    }]

	});

	application.start();

}(L,moment));
//# sourceMappingURL=bundle.js.map
